<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>技术文章摘抄 – Go核心36讲</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/</link><description>Recent content in Go核心36讲 on 技术文章摘抄</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 29 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/index.xml" rel="self" type="application/rss+xml"/><item><title>极客专栏: 00丨开篇词丨跟着学，你也能成为Go语言高手</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/00%E4%B8%A8%E5%BC%80%E7%AF%87%E8%AF%8D%E4%B8%A8%E8%B7%9F%E7%9D%80%E5%AD%A6%E4%BD%A0%E4%B9%9F%E8%83%BD%E6%88%90%E4%B8%BAgo%E8%AF%AD%E8%A8%80%E9%AB%98%E6%89%8B/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/00%E4%B8%A8%E5%BC%80%E7%AF%87%E8%AF%8D%E4%B8%A8%E8%B7%9F%E7%9D%80%E5%AD%A6%E4%BD%A0%E4%B9%9F%E8%83%BD%E6%88%90%E4%B8%BAgo%E8%AF%AD%E8%A8%80%E9%AB%98%E6%89%8B/</guid><description>
&lt;p>你好，我是郝林。今天想跟你聊聊我和 Go 语言的故事。&lt;/p>
&lt;p>Go 语言是由 Google 出品的一门通用型计算机编程语言。作为在近年来快速崛起的编程语言，Go 已经成功跻身主流编程语言的行列。&lt;/p>
&lt;p>它的种种亮点都受到了广大编程爱好者的追捧。特别是一些对团队协作有较高要求的公司和技术团队，已经在有意识地大量使用 Go 语言编程，并且，使用的人群还在持续迅猛增长。&lt;/p>
&lt;p>我个人很喜欢 Go 语言。我是从 2012 年底开始关注 Go 语言的，虽然这个日期与 Go 语言诞生的 2009 年 11 月 10 日相比并不算早，但我也算得上国内比较早期的使用者了。&lt;/p>
&lt;p>Go 程序可以在装有 Windows、Linux、FreeBSD 等操作系统的服务器上运行，并用于提供基础软件支撑、API 服务、Web 服务、网页服务等等。&lt;/p>
&lt;p>Go 语言也在移动端进行了积极的探索，现在在 Android 和 iOS 上都可以运行其程序。另外，Go 语言也已经与 WebAssembly 强强联合，加入了 WASM 平台。这意味着过不了多久，互联网浏览器也可以运行 Go 编写的程序了。&lt;/p>
&lt;p>从业务维度看，在云计算、微服务、大数据、区块链、物联网等领域，Go 语言早已蓬勃发展。有的使用率已经非常之高，有的已有一席之地。即使是在 Python 为王的数据科学和人工智能领域，Go 语言也在缓慢渗透，并初露头角。&lt;/p>
&lt;p>从公司角度看，许多大厂都已经拥抱 Go 语言，包括以 Java 打天下的阿里巴巴，更别提深爱着 Go 语言的滴滴、今日头条、小米、奇虎 360、京东等明星公司。同时，创业公司也很喜欢 Go 语言，主要因为其入门快、程序库多、运行迅速，很适合快速构建互联网软件产品，比如轻松筹、快手、知乎、探探、美图、猎豹移动等等。&lt;/p>
&lt;p>我从 2013 年开始准备撰写《Go 并发编程实战》这本书，在经历了一些艰辛和坎坷之后，本书终于在 2014 年底由人民邮电出版社的图灵公司正式出版。&lt;/p>
&lt;p>时至今日，《Go 并发编程实战》的第 2 版已经出版一年多了，也受到了广大 Go 语言爱好者的欢迎。同时，我也发起和维护着一个 Go 语言爱好者组织 GoHackers，至今已有近 4000 人的规模。我们每年都会举办一些活动，交流技术、互通有无。当然，我们平常都会在一些线上的群组里交流。欢迎你的加入。&lt;/p>
&lt;p>2015 年初，我开始帮助公司和团队招聘 Go 程序员。我面试过的 Go 程序员应该已经有几百个了。虽然一场面试的交流内容远不止技术能力这种硬技能，更别提只限于一门编程语言。&lt;/p>
&lt;p>但是就事论事，我在这里只说 Go 语言。在所有的应聘者当中，真正掌握 Go 语言基础知识的比例恐怕超不过 50%，而真正熟悉 Go 语言高阶技术的比例也不超过 30%。当然了，情况是明显一年比一年好的，尤其是今年。&lt;/p>
&lt;p>我写此专栏的初衷是，让希望迅速掌握 Go 语言的爱好者们，通过一种比较熟悉和友好的路径去学习。我并不想事无巨细地去阐述 Go 语言规范的每个细节以及其标准库中的每个 API，更不想写那种填鸭式的教学文章，我更想去做的是详细论述这门语言的重点和主线。&lt;/p>
&lt;p>我会努力探究我们对新技能，尤其是编程语言的学习方式，并以这种方式一步步带领和引导你去记忆和实践。我几乎总会以一道简单的题目为引子，并以一连串相关且重要的概念和知识为主线，而后再进行扩充，以助你进行发散性的思考。&lt;/p>
&lt;p>我希望用这种先点、后线、再面的方式，帮你占领一个个重要的阵地。别的不敢说，如果你认真地跟我一起走完这个专栏，那么基本掌握 Go 语言是肯定的。&lt;/p>
&lt;p>为什么说基本掌握？因为软件技术，尤其是编程技术，必须经过很多的实践甚至历练才能完全掌握，这需要时间而不能速成。不过，本专栏一定会成为你学习 Go 语言最重要的敲门砖和垫脚石。&lt;/p>
&lt;p>下面，我们一起浏览一下本专栏的主要模块，一共分成 3 大模块，5 个章节。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>基础概念：我会讲述 Go 语言基础中的基础，包括一些基本概念和运作机制。它们都应该是你初识 Go 语言时必须知道的，同时也有助于你理解后面的知识。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据类型和语句：Go 语言中的数据类型大都是很有特色的，你只有理解了它们才能真正玩转 Go 语言。我将和你一起与探索它们的奥妙。另外，我也会一一揭示怎样使用各种语法和语句操纵它们。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Go 程序的测试：很多程序员总以为测试是另一个团队的事情，其实不然。单元测试甚至接口测试其实都应该是程序员去做的，并且应该受到重视。在 Go 语言中怎样做好测试这件事？我会跟你说清楚、讲明白。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>标准库的用法：虽然 Go 语言提供了自己的高效并发编程方式，但是同步方法依然不容忽视。这些方法集中在&lt;code>sync&lt;/code>代码包及其子包中。这部分还涉及了字节和字符问题、OS 操控方法和 Web 服务写法等，这些都是我们在日常工作中很可能会用到的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Go 语言拾遗：这部分将会讲述一些我们使用 Go 语言做软件项目的过程中很可能会遇到的问题，至少会包含两篇文章，是附赠给广大 Go 语言爱好者的。虽然我已经有一个计划了，但是具体会讲哪些内容我还是选择暂时保密。请你和我一起小期待一下吧。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>我希望本专栏能帮助或推动你去做更多的实践和思考。同时我也希望，你能通过学习本专栏感受到学习的快乐，并能够在应聘 Go 语言相关岗位的时候更加游刃有余。&lt;/p>
&lt;p>所以，如果学，请深学。我不敢自称布道师，但很愿意去做推广优秀技术的事情。如果我的输出能为你的宝塔添砖加瓦，那将会是我的快乐之源。我也相信这几十篇文章可以做到这一点。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 00丨预习篇丨写给0基础入门的Go语言学习者</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/00%E4%B8%A8%E9%A2%84%E4%B9%A0%E7%AF%87%E4%B8%A8%E5%86%99%E7%BB%990%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%9A%84go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%80%85/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/00%E4%B8%A8%E9%A2%84%E4%B9%A0%E7%AF%87%E4%B8%A8%E5%86%99%E7%BB%990%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%9A%84go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%80%85/</guid><description>
&lt;p>你好，我是郝林，今天我分享的内容是：0 基础的你，如何开始入门学习 Go 语言。&lt;/p>
&lt;ol>
&lt;li>你需要遵循怎样的学习路径来学习 Go 语言？&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>我们发现，订阅本专栏的同学们都在非常积极的学习和讨论，这让我们非常欣慰，并且和你一样干劲十足。不过，我在留言中发现，大家的基础好像都不太一样，大致可以分为这么几类。&lt;/p>
&lt;ul>
&lt;li>零基础的同学：可能正准备入行或者刚刚对编程感兴趣，可以熟练操作电脑，但是对计算机、操作系统以及网络方面的知识不太了解。&lt;/li>
&lt;li>无编程经验或者编程经验较少的同学：可能正在从事其他的技术相关工作，也许可以熟练编写脚本，但是对程序设计的通用知识和技巧还不太了解。&lt;/li>
&lt;li>有其他语言编程经验的同学：可能已成为程序员或软件工程师，可以用其他的编程语言熟练编写程序，但是对 Go 语言还不太了解。&lt;/li>
&lt;li>有一定 Go 语言编程经验的同学：已有 Go 语言编程基础，写过一些 Go 语言程序，但是急需进阶却看不清途径。&lt;/li>
&lt;/ul>
&lt;p>基于以上分类，我为大家制定了一份 Go 语言学习路径。不论你属于上面的哪一类，都可以按照此路径去学习深造。具体请看下面的思维导图。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/c7/b7/c702df29da67be3c4083ecce1d0eadb7.png" alt="">&lt;/p>
&lt;p>（长按保存大图）&lt;/p>
&lt;ol start="2">
&lt;li>学习本专栏前，你需要有哪些基础知识储备？&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>在这个专栏里，我会假设你有一定的计算机基础，比如，知道操作系统是什么、环境变量怎么设置、命令行怎样使用，等等。&lt;/p>
&lt;p>另外，我还会假定你具备一点点编程知识，比如，知道程序是什么、程序通常会以怎样的形式存在，以及程序与操作系统和计算机有哪些关系，等等。&lt;/p>
&lt;p>对了，还有在这个早已成熟的移动互联网时代，想学编程的你，一定也应该知道那些最最基本的网络知识。&lt;/p>
&lt;p>我在本专栏里只会讨论 Go 语言的代码和程序，而不会提及太多计算机体系结构或软件工程方面的事情。所以你即使没有专门学过计算机系统或者软件工程也没有关系，我会尽量连带讲一些必要的基础概念和知识。&lt;/p>
&lt;p>从 2018 年开始，随着 Google 逐渐重回中国，Go 语言的官方网站在 Google 中国的域名下也有了镜像，毕竟中国是 Go 语言爱好者最多的国家，同时也是 Go 语言使用最广泛的一片土地。如果你在国内，可以敲入&lt;a href="https://golang.google.cn">这个网址&lt;/a>来访问 Go 语言的官网。&lt;/p>
&lt;p>这个专栏专注于 Go 语言的核心知识，因此我并不会深入说明所有关于语法和命令的细枝末节。如果你想去全面了解 Go 语言的所有语法，那么可以去 Go 语言官网的&lt;a href="https://golang.google.cn/ref/spec">语言规范页面&lt;/a>仔细查阅。&lt;/p>
&lt;p>当然了，这里的语言规范是全英文的，如果你想看汉化的内容也是有选择的，我记得先后有几拨国内的 Go 语言爱好者自发组织翻译过。不过我都没有仔细看过，不知道质量如何，所以在这里就不特别推荐了。&lt;/p>
&lt;p>对于从事计算机和软件开发相关工作的同学，我强烈建议你们要有意地训练快速阅读英文文档的能力，不论是否借助字典和翻译工具。&lt;/p>
&lt;p>不过，如果你想专门学习一下 Go 命令方面的知识和技巧，那么我推荐你看看我之前写的免费开源教程《&lt;a href="https://github.com/hyper0x/go_command_tutorial">Go 命令教程&lt;/a>》。这份教程的内容虽然稍显陈旧，但是帮助你学会使用 Go 语言自带的常用命令和工具肯定是没问题的。&lt;/p>
&lt;p>好了，其实即使你是个编程小白也不用过于担心，我们会一起帮助你的。至于我刚刚说的 Go 语言规范和 Go 命令教程，你也可以在学习本专栏的过程中根据实际需要去有针对性的阅读。&lt;/p>
&lt;ol start="3">
&lt;li>这里有一份基础知识列表，请查收&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>如果你阅读本专栏的第一个模块时感觉有些吃力，那可能是你还没有熟悉 Go 语言的一些基础概念和知识。我为你精心制作了一张 Go 语言基础知识的导图，里面几乎包含了入门 Go 语言所需的所有知识点。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/ad/85/add8566dc5431378bda313a32a6ebb85.jpg" alt="">&lt;br>
（长按保存大图）&lt;/p>
&lt;p>有了这些，你是否已经感觉学习本专栏会更加轻松了呢？&lt;/p>
&lt;p>总之，教程、资料和助推就交给我和极客时间的编辑、运营们来共同负责。而你需要做的，就是保存好这一份对 Go 语言学习的决心，你可以自己去尝试整理一份 Go 语言的学习笔记，遇见不懂的地方，你也可以在文章下面留言，我们一起讨论。&lt;/p>
&lt;p>好了，感谢你的收听，我们下期再见。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 01丨工作区和GOPATH</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/01%E4%B8%A8%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8Cgopath/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/01%E4%B8%A8%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8Cgopath/</guid><description>
&lt;h3 id="go-语言代码较多建议配合文章收听音频">【Go 语言代码较多，建议配合文章收听音频。】&lt;/h3>
&lt;p>你好，我是郝林。从今天开始，我将和你一起梳理 Go 语言的整个知识体系。&lt;/p>
&lt;p>在过去的几年里，我与广大爱好者一起见证了 Go 语言的崛起。&lt;/p>
&lt;p>从 Go 1.5 版本的自举（即用 Go 语言编写程序来实现 Go 语言自身），到 Go 1.7 版本的极速 GC（也称垃圾回收器），再到 2018 年 2 月发布的 Go 1.10 版本对其自带工具的全面升级，以及可预见的后续版本关键特性（比如用来做程序依赖管理的&lt;code>go mod&lt;/code>命令），这一切都令我们欢欣鼓舞。Go 语言在一步步走向辉煌的同时，显然已经成为软件工程师们最喜爱的编程语言之一。&lt;/p>
&lt;p>我开办这个专栏的主要目的，是要与你一起探索 Go 语言的奥秘，并帮助你在学习和实践的过程中获取更多。&lt;/p>
&lt;p>我假设本专栏的读者已经具备了一定的计算机基础，比如，你要知道操作系统是什么、环境变量怎么设置、怎样正确使用命令行，等等。&lt;/p>
&lt;p>当然了，如果你已经有了编程经验，尤其是一点点 Go 语言编程经验，那就更好了，毕竟我想教给你的，都是 Go 语言中非常核心的技术。&lt;/p>
&lt;p>如果你对 Go 语言中最基本的概念和语法还不够了解，那么可能需要在学习本专栏的过程中去查阅&lt;a href="https://golang.google.cn/ref/spec">Go 语言规范文档&lt;/a>，也可以把预习篇的基础知识图拿出来好好研究一下。&lt;/p>
&lt;p>最后，我来说一下专栏的讲述模式。我总会以一道 Go 语言的面试题开始，针对它进行解答，我会告诉你为什么我要关注这道题，这道题的背后隐藏着哪些知识，并且，我会对这部分的内容，进行相关的知识扩展。&lt;/p>
&lt;p>好了，准备就绪，我们一起开始。&lt;/p>
&lt;hr>
&lt;p>我们学习 Go 语言时，要做的第一件事，都是根据自己电脑的计算架构（比如，是 32 位的计算机还是 64 位的计算机）以及操作系统（比如，是 Windows 还是 Linux），从&lt;a href="https://golang.google.cn">Go 语言官网&lt;/a>下载对应的二进制包，也就是可以拿来即用的安装包。&lt;/p>
&lt;p>随后，我们会解压缩安装包、放置到某个目录、配置环境变量，并通过在命令行中输入&lt;code>go version&lt;/code>来验证是否安装成功。&lt;/p>
&lt;p>在这个过程中，我们还需要配置 3 个环境变量，也就是 GOROOT、GOPATH 和 GOBIN。这里我可以简单介绍一下。&lt;/p>
&lt;ul>
&lt;li>GOROOT：Go 语言安装根目录的路径，也就是 GO 语言的安装路径。&lt;/li>
&lt;li>GOPATH：若干工作区目录的路径。是我们自己定义的工作空间。&lt;/li>
&lt;li>GOBIN：GO 程序生成的可执行文件（executable file）的路径。&lt;/li>
&lt;/ul>
&lt;p>其中，GOPATH 背后的概念是最多的，也是最重要的。那么，&lt;strong>今天我们的面试问题是：你知道设置 GOPATH 有什么意义吗？&lt;/strong>&lt;/p>
&lt;p>关于这个问题，它的&lt;strong>典型回答&lt;/strong>是这样的：&lt;/p>
&lt;p>你可以把 GOPATH 简单理解成 Go 语言的工作目录，它的值是一个目录的路径，也可以是多个目录路径，每个目录都代表 Go 语言的一个工作区（workspace）。&lt;/p>
&lt;p>我们需要利于这些工作区，去放置 Go 语言的源码文件（source file），以及安装（install）后的归档文件（archive file，也就是以&amp;quot;.a&amp;quot;为扩展名的文件）和可执行文件（executable file）。&lt;/p>
&lt;p>事实上，由于 Go 语言项目在其生命周期内的所有操作（编码、依赖管理、构建、测试、安装等）基本上都是围绕着 GOPATH 和工作区进行的。所以，它的背后至少有 3 个知识点，分别是：&lt;/p>
&lt;p>&lt;strong>1. Go 语言源码的组织方式是怎样的；&lt;/strong>&lt;/p>
&lt;p>&lt;strong>2. 你是否了解源码安装后的结果（只有在安装后，Go 语言源码才能被我们或其他代码使用）；&lt;/strong>&lt;/p>
&lt;p>&lt;strong>3. 你是否理解构建和安装 Go 程序的过程（这在开发程序以及查找程序问题的时候都很有用，否则你很可能会走弯路）。&lt;/strong>&lt;/p>
&lt;p>下面我就重点来聊一聊这些内容。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;ol>
&lt;li>Go 语言源码的组织方式&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>与许多编程语言一样，Go 语言的源码也是以代码包为基本组织单位的。在文件系统中，这些代码包其实是与目录一一对应的。由于目录可以有子目录，所以代码包也可以有子包。&lt;/p>
&lt;p>一个代码包中可以包含任意个以.go 为扩展名的源码文件，这些源码文件都需要被声明属于同一个代码包。&lt;/p>
&lt;p>代码包的名称一般会与源码文件所在的目录同名。如果不同名，那么在构建、安装的过程中会以代码包名称为准。&lt;/p>
&lt;p>每个代码包都会有导入路径。代码包的导入路径是其他代码在使用该包中的程序实体时，需要引入的路径。在实际使用程序实体之前，我们必须先导入其所在的代码包。具体的方式就是&lt;code>import&lt;/code>该代码包的导入路径。就像这样：&lt;/p>
&lt;pre>&lt;code>import &amp;quot;github.com/labstack/echo&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>在工作区中，一个代码包的导入路径实际上就是从 src 子目录，到该包的实际存储位置的相对路径。&lt;/p>
&lt;p>所以说，Go 语言源码的组织方式就是以环境变量 GOPATH、工作区、src 目录和代码包为主线的。一般情况下，Go 语言的源码文件都需要被存放在环境变量 GOPATH 包含的某个工作区（目录）中的 src 目录下的某个代码包（目录）中。&lt;/p>
&lt;ol start="2">
&lt;li>了解源码安装后的结果&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>了解了 Go 语言源码的组织方式后，我们很有必要知道 Go 语言源码在安装后会产生怎样的结果。&lt;/p>
&lt;p>源码文件以及安装后的结果文件都会放到哪里呢？我们都知道，源码文件通常会被放在某个工作区的 src 子目录下。&lt;/p>
&lt;p>那么在安装后如果产生了归档文件（以&amp;quot;.a&amp;quot;为扩展名的文件），就会放进该工作区的 pkg 子目录；如果产生了可执行文件，就可能会放进该工作区的 bin 子目录。&lt;/p>
&lt;p>我再讲一下归档文件存放的具体位置和规则。&lt;/p>
&lt;p>源码文件会以代码包的形式组织起来，一个代码包其实就对应一个目录。安装某个代码包而产生的归档文件是与这个代码包同名的。&lt;/p>
&lt;p>放置它的相对目录就是该代码包的导入路径的直接父级。比如，一个已存在的代码包的导入路径是&lt;/p>
&lt;pre>&lt;code>github.com/labstack/echo，
&lt;/code>&lt;/pre>
&lt;p>那么执行命令&lt;/p>
&lt;pre>&lt;code>go install github.com/labstack/echo
&lt;/code>&lt;/pre>
&lt;p>生成的归档文件的相对目录就是 &lt;a href="http://github.com/labstack%EF%BC%8C">github.com/labstack，&lt;/a> 文件名为 echo.a。&lt;/p>
&lt;p>顺便说一下，上面这个代码包导入路径还有另外一层含义，那就是：该代码包的源码文件存在于 GitHub 网站的 labstack 组的代码仓库 echo 中。&lt;/p>
&lt;p>再说回来，归档文件的相对目录与 pkg 目录之间还有一级目录，叫做平台相关目录。平台相关目录的名称是由 build（也称&amp;quot;构建&amp;quot;）的目标操作系统、下划线和目标计算架构的代号组成的。&lt;/p>
&lt;p>比如，构建某个代码包时的目标操作系统是 Linux，目标计算架构是 64 位的，那么对应的平台相关目录就是 linux_amd64。&lt;/p>
&lt;p>因此，上述代码包的归档文件就会被放置在当前工作区的子目录 pkg/linux_amd64/github.com/labstack 中。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/2f/3c/2fdfb5620e072d864907870e61ae5f3c.png" alt="">&lt;br>
（GOPATH 与工作区）&lt;/p>
&lt;p>总之，你需要记住的是，某个工作区的 src 子目录下的源码文件在安装后一般会被放置到当前工作区的 pkg 子目录下对应的目录中，或者被直接放置到该工作区的 bin 子目录中。&lt;/p>
&lt;ol start="3">
&lt;li>理解构建和安装 Go 程序的过程&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>我们再来说说构建和安装 Go 程序的过程都是怎样的，以及它们的异同点。&lt;/p>
&lt;p>构建使用命令&lt;code>go build&lt;/code>，安装使用命令&lt;code>go install&lt;/code>。构建和安装代码包的时候都会执行编译、打包等操作，并且，这些操作生成的任何文件都会先被保存到某个临时的目录中。&lt;/p>
&lt;p>如果构建的是库源码文件，那么操作后产生的结果文件只会存在于临时目录中。这里的构建的主要意义在于检查和验证。&lt;/p>
&lt;p>如果构建的是命令源码文件，那么操作的结果文件会被搬运到源码文件所在的目录中。（这里讲到的两种源码文件我在&lt;a href="https://time.geekbang.org/column/article/13540?utm_source=weibo&amp;amp;utm_medium=xuxiaoping&amp;amp;utm_campaign=promotion&amp;amp;utm_content=columns">&amp;ldquo;预习篇&amp;quot;的基础知识图&lt;/a>中提到过，在后面的文章中我也会带你详细了解。）&lt;/p>
&lt;p>安装操作会先执行构建，然后还会进行链接操作，并且把结果文件搬运到指定目录。&lt;/p>
&lt;p>进一步说，如果安装的是库源码文件，那么结果文件会被搬运到它所在工作区的 pkg 目录下的某个子目录中。&lt;/p>
&lt;p>如果安装的是命令源码文件，那么结果文件会被搬运到它所在工作区的 bin 目录中，或者环境变量&lt;code>GOBIN&lt;/code>指向的目录中。&lt;/p>
&lt;p>这里你需要记住的是，构建和安装的不同之处，以及执行相应命令后得到的结果文件都会出现在哪里。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>工作区和 GOPATH 的概念和含义是每个 Go 工程师都需要了解的。虽然它们都比较简单，但是说它们是 Go 程序开发的核心知识并不为过。&lt;/p>
&lt;p>然而，我在招聘面试的过程中仍然发现有人忽略掉了它们。Go 语言提供的很多工具都是在 GOPATH 和工作区的基础上运行的，比如上面提到的&lt;code>go build&lt;/code>、&lt;code>go install&lt;/code>和&lt;code>go get&lt;/code>，这三个命令也是我们最常用到的。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>说到 Go 程序中的依赖管理，其实还有很多问题值得我们探索。我在这里留下两个问题供你进一步思考。&lt;/p>
&lt;ol>
&lt;li>Go 语言在多个工作区中查找依赖包的时候是以怎样的顺序进行的？&lt;/li>
&lt;li>如果在多个工作区中都存在导入路径相同的代码包会产生冲突吗？&lt;/li>
&lt;/ol>
&lt;p>这两个问题之间其实是有一些关联的。答案并不复杂，你做几个试验几乎就可以找到它了。你也可以看一下 Go 语言标准库中&lt;code>go build&lt;/code>包及其子包的源码。那里面的宝藏也很多，可以助你深刻理解 Go 程序的构建过程。&lt;/p>
&lt;hr>
&lt;h2 id="补充阅读">补充阅读&lt;/h2>
&lt;h2 id="go-build-命令一些可选项的用途和用法">go build 命令一些可选项的用途和用法&lt;/h2>
&lt;p>在运行&lt;code>go build&lt;/code>命令的时候，默认不会编译目标代码包所依赖的那些代码包。当然，如果被依赖的代码包的归档文件不存在，或者源码文件有了变化，那它还是会被编译。&lt;/p>
&lt;p>如果要强制编译它们，可以在执行命令的时候加入标记&lt;code>-a&lt;/code>。此时，不但目标代码包总是会被编译，它依赖的代码包也总会被编译，即使依赖的是标准库中的代码包也是如此。&lt;/p>
&lt;p>另外，如果不但要编译依赖的代码包，还要安装它们的归档文件，那么可以加入标记&lt;code>-i&lt;/code>。&lt;/p>
&lt;p>那么我们怎么确定哪些代码包被编译了呢？有两种方法。&lt;/p>
&lt;ol>
&lt;li>运行&lt;code>go build&lt;/code>命令时加入标记&lt;code>-x&lt;/code>，这样可以看到&lt;code>go build&lt;/code>命令具体都执行了哪些操作。另外也可以加入标记&lt;code>-n&lt;/code>，这样可以只查看具体操作而不执行它们。&lt;/li>
&lt;li>运行&lt;code>go build&lt;/code>命令时加入标记&lt;code>-v&lt;/code>，这样可以看到&lt;code>go build&lt;/code>命令编译的代码包的名称。它在与&lt;code>-a&lt;/code>标记搭配使用时很有用。&lt;/li>
&lt;/ol>
&lt;p>下面再说一说与 Go 源码的安装联系很紧密的一个命令：&lt;code>go get&lt;/code>。&lt;/p>
&lt;p>命令&lt;code>go get&lt;/code>会自动从一些主流公用代码仓库（比如 GitHub）下载目标代码包，并把它们安装到环境变量&lt;code>GOPATH&lt;/code>包含的第 1 工作区的相应目录中。如果存在环境变量&lt;code>GOBIN&lt;/code>，那么仅包含命令源码文件的代码包会被安装到&lt;code>GOBIN&lt;/code>指向的那个目录。&lt;/p>
&lt;p>最常用的几个标记有下面几种。&lt;/p>
&lt;ul>
&lt;li>&lt;code>-u&lt;/code>：下载并安装代码包，不论工作区中是否已存在它们。&lt;/li>
&lt;li>&lt;code>-d&lt;/code>：只下载代码包，不安装代码包。&lt;/li>
&lt;li>&lt;code>-fix&lt;/code>：在下载代码包后先运行一个用于根据当前 Go 语言版本修正代码的工具，然后再安装代码包。&lt;/li>
&lt;li>&lt;code>-t&lt;/code>：同时下载测试所需的代码包。&lt;/li>
&lt;li>&lt;code>-insecure&lt;/code>：允许通过非安全的网络协议下载和安装代码包。HTTP 就是这样的协议。&lt;/li>
&lt;/ul>
&lt;p>Go 语言官方提供的&lt;code>go get&lt;/code>命令是比较基础的，其中并没有提供依赖管理的功能。目前 GitHub 上有很多提供这类功能的第三方工具，比如&lt;code>glide&lt;/code>、&lt;code>gb&lt;/code>以及官方出品的&lt;code>dep&lt;/code>、&lt;code>vgo&lt;/code>等等，它们在内部大都会直接使用&lt;code>go get&lt;/code>。&lt;/p>
&lt;p>有时候，我们可能会出于某种目的变更存储源码的代码仓库或者代码包的相对路径。这时，为了让代码包的远程导入路径不受此类变更的影响，我们会使用自定义的代码包导入路径。&lt;/p>
&lt;p>对代码包的远程导入路径进行自定义的方法是：在该代码包中的库源码文件的包声明语句的右边加入导入注释，像这样：&lt;/p>
&lt;pre>&lt;code>package semaphore // import &amp;quot;golang.org/x/sync/semaphore&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>这个代码包原本的完整导入路径是&lt;code>github.com/golang/sync/semaphore&lt;/code>。这与实际存储它的网络地址对应的。该代码包的源码实际存在 GitHub 网站的 golang 组的 sync 代码仓库的 semaphore 目录下。而加入导入注释之后，用以下命令即可下载并安装该代码包了：&lt;/p>
&lt;pre>&lt;code>go get golang.org/x/sync/semaphore
&lt;/code>&lt;/pre>
&lt;p>而 Go 语言官网 golang.org 下的路径 /x/sync/semaphore 并不是存放&lt;code>semaphore&lt;/code>包的真实地址。我们称之为代码包的自定义导入路径。&lt;/p>
&lt;p>不过，这还需要在 golang.org 这个域名背后的服务端程序上，添加一些支持才能使这条命令成功。&lt;/p>
&lt;p>关于自定义代码包导入路径的完整说明可以参看&lt;a href="https://github.com/hyper0x/go_command_tutorial/blob/master/0.3.md">这里&lt;/a>。&lt;/p>
&lt;p>好了，对于&lt;code>go build&lt;/code>命令和&lt;code>go get&lt;/code>命令的简短介绍就到这里。如果你想查阅更详细的文档，那么可以访问 Go 语言官方的&lt;a href="https://golang.google.cn/cmd/go">命令文档页面&lt;/a>，或者在命令行下输入诸如&lt;code>go help build&lt;/code>这类的命令。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 02丨命令源码文件</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/02%E4%B8%A8%E5%91%BD%E4%BB%A4%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/02%E4%B8%A8%E5%91%BD%E4%BB%A4%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6/</guid><description>
&lt;p>我们已经知道，环境变量 GOPATH 指向的是一个或多个工作区，每个工作区中都会有以代码包为基本组织形式的源码文件。&lt;/p>
&lt;p>&lt;strong>这里的源码文件又分为三种，即：命令源码文件、库源码文件和测试源码文件，它们都有着不同的用途和编写规则。（&lt;/strong> 我在&lt;a href="https://time.geekbang.org/column/article/13540?utm_source=weibo&amp;amp;utm_medium=xuxiaoping&amp;amp;utm_campaign=promotion&amp;amp;utm_content=columns">&amp;ldquo;预习篇&amp;quot;的基础知识图&lt;/a>介绍过这三种文件的基本情况。）&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/9d/cb/9d08647d238e21e7184d60c0afe5afcb.png" alt="">&lt;/p>
&lt;p>（长按保存大图查看）&lt;/p>
&lt;p>今天，我们就沿着&lt;strong>命令源码文件&lt;/strong>的知识点，展开更深层级的学习。&lt;/p>
&lt;hr>
&lt;p>一旦开始学习用编程语言编写程序，我们就一定希望在编码的过程中及时地得到反馈，只有这样才能清楚对错。实际上，我们的有效学习和进步，都是通过不断地接受反馈和执行修正实现的。&lt;/p>
&lt;p>对于 Go 语言学习者来说，你在学习阶段中，也一定会经常编写可以直接运行的程序。这样的程序肯定会涉及命令源码文件的编写，而且，命令源码文件也可以很方便地用&lt;code>go run&lt;/code>命令启动。&lt;/p>
&lt;p>那么，&lt;strong>我今天的问题就是：命令源码文件的用途是什么，怎样编写它？&lt;/strong>&lt;/p>
&lt;p>这里，我给出你一个&lt;strong>参考的回答&lt;/strong>：命令源码文件是程序的运行入口，是每个可独立运行的程序必须拥有的。我们可以通过构建或安装，生成与其对应的可执行文件，后者一般会与该命令源码文件的直接父目录同名。&lt;/p>
&lt;p>&lt;strong>如果一个源码文件声明属于&lt;code>main&lt;/code>包，并且包含一个无参数声明且无结果声明的&lt;code>main&lt;/code>函数，那么它就是命令源码文件。&lt;/strong> 就像下面这段代码：&lt;/p>
&lt;pre>&lt;code>package main
import &amp;quot;fmt&amp;quot;
func main() {
fmt.Println(&amp;quot;Hello, world!&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;p>如果你把这段代码存成 demo1.go 文件，那么运行&lt;code>go run demo1.go&lt;/code>命令后就会在屏幕（标准输出）中看到&lt;code>Hello, world!&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>当需要模块化编程时，我们往往会将代码拆分到多个文件，甚至拆分到不同的代码包中。但无论怎样，对于一个独立的程序来说，命令源码文件永远只会也只能有一个。如果有与命令源码文件同包的源码文件，那么它们也应该声明属于&lt;code>main&lt;/code>包。&lt;/p>
&lt;/blockquote>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>命令源码文件如此重要，以至于它毫无疑问地成为了我们学习 Go 语言的第一助手。不过，只会打印&lt;code>Hello, world&lt;/code>是远远不够的，咱们千万不要成为&amp;quot;Hello, world&amp;quot;党。既然决定学习 Go 语言，你就应该从每一个知识点深入下去。&lt;/p>
&lt;p>无论是 Linux 还是 Windows，如果你用过命令行（command line）的话，肯定就会知道几乎所有命令（command）都是可以接收参数（argument）的。通过构建或安装命令源码文件，生成的可执行文件就可以被视为&amp;quot;命令&amp;rdquo;，既然是命令，那么就应该具备接收参数的能力。&lt;/p>
&lt;p>下面，我就带你深入了解一下与命令参数的接收和解析有关的一系列问题。&lt;/p>
&lt;h2 id="知识精讲">知识精讲&lt;/h2>
&lt;h3 id="1-命令源码文件怎样接收参数">1. 命令源码文件怎样接收参数&lt;/h3>
&lt;p>我们先看一段不完整的代码：&lt;/p>
&lt;pre>&lt;code>package main
import (
// 需在此处添加代码。[1]
&amp;quot;fmt&amp;quot;
)
var name string
func init() {
// 需在此处添加代码。[2]
}
func main() {
// 需在此处添加代码。[3]
fmt.Printf(&amp;quot;Hello, %s!\n&amp;quot;, name)
}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>如果邀请你帮助我，在注释处添加相应的代码，并让程序实现&amp;quot;根据运行程序时给定的参数问候某人&amp;quot;的功能，你会打算怎样做？&lt;/strong>&lt;/p>
&lt;p>如果你知道做法，请现在就动手实现它。如果不知道也不要着急，咱们一起来搞定。&lt;/p>
&lt;p>首先，Go 语言标准库中有一个代码包专门用于接收和解析命令参数。这个代码包的名字叫&lt;code>flag&lt;/code>。&lt;/p>
&lt;p>我之前说过，如果想要在代码中使用某个包中的程序实体，那么应该先导入这个包。因此，我们需要在&lt;code>[1]&lt;/code>处添加代码&lt;code>&amp;quot;flag&amp;quot;&lt;/code>。注意，这里应该在代码包导入路径的前后加上英文半角的引号。如此一来，上述代码导入了&lt;code>flag&lt;/code>和&lt;code>fmt&lt;/code>这两个包。&lt;/p>
&lt;p>其次，人名肯定是由字符串代表的。所以我们要在&lt;code>[2]&lt;/code>处添加调用&lt;code>flag&lt;/code>包的&lt;code>StringVar&lt;/code>函数的代码。就像这样：&lt;/p>
&lt;pre>&lt;code>flag.StringVar(&amp;amp;name, &amp;quot;name&amp;quot;, &amp;quot;everyone&amp;quot;, &amp;quot;The greeting object.&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>函数&lt;code>flag.StringVar&lt;/code>接受 4 个参数。&lt;/p>
&lt;p>第 1 个参数是用于存储该命令参数值的地址，具体到这里就是在前面声明的变量&lt;code>name&lt;/code>的地址了，由表达式&lt;code>&amp;amp;name&lt;/code>表示。&lt;/p>
&lt;p>第 2 个参数是为了指定该命令参数的名称，这里是&lt;code>name&lt;/code>。&lt;/p>
&lt;p>第 3 个参数是为了指定在未追加该命令参数时的默认值，这里是&lt;code>everyone&lt;/code>。&lt;/p>
&lt;p>至于第 4 个函数参数，即是该命令参数的简短说明了，这在打印命令说明时会用到。&lt;/p>
&lt;p>顺便说一下，还有一个与&lt;code>flag.StringVar&lt;/code>函数类似的函数，叫&lt;code>flag.String&lt;/code>。这两个函数的区别是，后者会直接返回一个已经分配好的用于存储命令参数值的地址。如果使用它的话，我们就需要把&lt;/p>
&lt;pre>&lt;code>var name string
&lt;/code>&lt;/pre>
&lt;p>改为&lt;/p>
&lt;pre>&lt;code>var name = flag.String(&amp;quot;name&amp;quot;, &amp;quot;everyone&amp;quot;, &amp;quot;The greeting object.&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>所以，如果我们使用&lt;code>flag.String&lt;/code>函数就需要改动原有的代码。这样并不符合上述问题的要求。&lt;/p>
&lt;p>再说最后一个填空。我们需要在&lt;code>[3]&lt;/code>处添加代码&lt;code>flag.Parse()&lt;/code>。函数&lt;code>flag.Parse&lt;/code>用于真正解析命令参数，并把它们的值赋给相应的变量。&lt;/p>
&lt;p>对该函数的调用必须在所有命令参数存储载体的声明（这里是对变量&lt;code>name&lt;/code>的声明）和设置（这里是在&lt;code>[2]&lt;/code>处对&lt;code>flag.StringVar&lt;/code>函数的调用）之后，并且在读取任何命令参数值之前进行。&lt;/p>
&lt;p>正因为如此，我们最好把&lt;code>flag.Parse()&lt;/code>放在&lt;code>main&lt;/code>函数的函数体的第一行。&lt;/p>
&lt;h3 id="2-怎样在运行命令源码文件的时候传入参数又怎样查看参数的使用说明">2. 怎样在运行命令源码文件的时候传入参数，又怎样查看参数的使用说明&lt;/h3>
&lt;p>如果我们把上述代码存成名为 demo2.go 的文件，那么运行如下命令就可以为参数&lt;code>name&lt;/code>传值：&lt;/p>
&lt;pre>&lt;code>go run demo2.go -name=&amp;quot;Robert&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>运行后，打印到标准输出（stdout）的内容会是：&lt;/p>
&lt;pre>&lt;code>Hello, Robert!
&lt;/code>&lt;/pre>
&lt;p>另外，如果想查看该命令源码文件的参数说明，可以这样做：&lt;/p>
&lt;pre>&lt;code>$ go run demo2.go --help
&lt;/code>&lt;/pre>
&lt;p>其中的&lt;code>$&lt;/code>表示我们是在命令提示符后运行&lt;code>go run&lt;/code>命令的。运行后输出的内容会类似：&lt;/p>
&lt;pre>&lt;code>Usage of /var/folders/ts/7lg_tl_x2gd_k1lm5g_48c7w0000gn/T/go-build155438482/b001/exe/demo2:
-name string
The greeting object. (default &amp;quot;everyone&amp;quot;)
exit status 2
&lt;/code>&lt;/pre>
&lt;p>你可能不明白下面这段输出代码的意思。&lt;/p>
&lt;pre>&lt;code>/var/folders/ts/7lg_tl_x2gd_k1lm5g_48c7w0000gn/T/go-build155438482/b001/exe/demo2
&lt;/code>&lt;/pre>
&lt;p>这其实是&lt;code>go run&lt;/code>命令构建上述命令源码文件时临时生成的可执行文件的完整路径。&lt;/p>
&lt;p>如果我们先构建这个命令源码文件再运行生成的可执行文件，像这样：&lt;/p>
&lt;pre>&lt;code>$ go build demo2.go
$ ./demo2 --help
&lt;/code>&lt;/pre>
&lt;p>那么输出就会是&lt;/p>
&lt;pre>&lt;code>Usage of ./demo2:
-name string
The greeting object. (default &amp;quot;everyone&amp;quot;)
&lt;/code>&lt;/pre>
&lt;h3 id="3-怎样自定义命令源码文件的参数使用说明">3. 怎样自定义命令源码文件的参数使用说明&lt;/h3>
&lt;p>这有很多种方式，最简单的一种方式就是对变量&lt;code>flag.Usage&lt;/code>重新赋值。&lt;code>flag.Usage&lt;/code>的类型是&lt;code>func()&lt;/code>，即一种无参数声明且无结果声明的函数类型。&lt;/p>
&lt;p>&lt;code>flag.Usage&lt;/code>变量在声明时就已经被赋值了，所以我们才能够在运行命令&lt;code>go run demo2.go --help&lt;/code>时看到正确的结果。&lt;/p>
&lt;p>注意，对&lt;code>flag.Usage&lt;/code>的赋值必须在调用&lt;code>flag.Parse&lt;/code>函数之前。&lt;/p>
&lt;p>现在，我们把 demo2.go 另存为 demo3.go，然后在&lt;code>main&lt;/code>函数体的开始处加入如下代码。&lt;/p>
&lt;pre>&lt;code>flag.Usage = func() {
fmt.Fprintf(os.Stderr, &amp;quot;Usage of %s:\n&amp;quot;, &amp;quot;question&amp;quot;)
flag.PrintDefaults()
}
&lt;/code>&lt;/pre>
&lt;p>那么当运行&lt;/p>
&lt;pre>&lt;code>$ go run demo3.go --help
&lt;/code>&lt;/pre>
&lt;p>后，就会看到&lt;/p>
&lt;pre>&lt;code>Usage of question:
-name string
The greeting object. (default &amp;quot;everyone&amp;quot;)
exit status 2
&lt;/code>&lt;/pre>
&lt;p>现在再深入一层，我们在调用&lt;code>flag&lt;/code>包中的一些函数（比如&lt;code>StringVar&lt;/code>、&lt;code>Parse&lt;/code>等等）的时候，实际上是在调用&lt;code>flag.CommandLine&lt;/code>变量的对应方法。&lt;/p>
&lt;p>&lt;code>flag.CommandLine&lt;/code>相当于默认情况下的命令参数容器。所以，通过对&lt;code>flag.CommandLine&lt;/code>重新赋值，我们可以更深层次地定制当前命令源码文件的参数使用说明。&lt;/p>
&lt;p>现在我们把&lt;code>main&lt;/code>函数体中的那条对&lt;code>flag.Usage&lt;/code>变量的赋值语句注销掉，然后在&lt;code>init&lt;/code>函数体的开始处添加如下代码：&lt;/p>
&lt;pre>&lt;code>flag.CommandLine = flag.NewFlagSet(&amp;quot;&amp;quot;, flag.ExitOnError)
flag.CommandLine.Usage = func() {
fmt.Fprintf(os.Stderr, &amp;quot;Usage of %s:\n&amp;quot;, &amp;quot;question&amp;quot;)
flag.PrintDefaults()
}
&lt;/code>&lt;/pre>
&lt;p>再运行命令&lt;code>go run demo3.go --help&lt;/code>后，其输出会与上一次的输出的一致。不过后面这种定制的方法更加灵活。比如，当我们把为&lt;code>flag.CommandLine&lt;/code>赋值的那条语句改为&lt;/p>
&lt;pre>&lt;code>flag.CommandLine = flag.NewFlagSet(&amp;quot;&amp;quot;, flag.PanicOnError)
&lt;/code>&lt;/pre>
&lt;p>后，再运行&lt;code>go run demo3.go --help&lt;/code>命令就会产生另一种输出效果。这是由于我们在这里传给&lt;code>flag.NewFlagSet&lt;/code>函数的第二个参数值是&lt;code>flag.PanicOnError&lt;/code>。&lt;code>flag.PanicOnError&lt;/code>和&lt;code>flag.ExitOnError&lt;/code>都是预定义在&lt;code>flag&lt;/code>包中的常量。&lt;/p>
&lt;p>&lt;code>flag.ExitOnError&lt;/code>的含义是，告诉命令参数容器，当命令后跟&lt;code>--help&lt;/code>或者参数设置的不正确的时候，在打印命令参数使用说明后以状态码&lt;code>2&lt;/code>结束当前程序。&lt;/p>
&lt;p>状态码&lt;code>2&lt;/code>代表用户错误地使用了命令，而&lt;code>flag.PanicOnError&lt;/code>与之的区别是在最后抛出&amp;quot;运行时恐慌（panic）&amp;quot;。&lt;/p>
&lt;p>上述两种情况都会在我们调用&lt;code>flag.Parse&lt;/code>函数时被触发。顺便提一句，&amp;ldquo;运行时恐慌&amp;quot;是 Go 程序错误处理方面的概念。关于它的抛出和恢复方法，我在本专栏的后续部分中会讲到。&lt;/p>
&lt;p>下面再进一步，我们索性不用全局的&lt;code>flag.CommandLine&lt;/code>变量，转而自己创建一个私有的命令参数容器。我们在函数外再添加一个变量声明：&lt;/p>
&lt;pre>&lt;code>var cmdLine = flag.NewFlagSet(&amp;quot;question&amp;quot;, flag.ExitOnError)
&lt;/code>&lt;/pre>
&lt;p>然后，我们把对&lt;code>flag.StringVar&lt;/code>的调用替换为对&lt;code>cmdLine.StringVar&lt;/code>调用，再把&lt;code>flag.Parse()&lt;/code>替换为&lt;code>cmdLine.Parse(os.Args[1:])&lt;/code>。&lt;/p>
&lt;p>其中的&lt;code>os.Args[1:]&lt;/code>指的就是我们给定的那些命令参数。这样做就完全脱离了&lt;code>flag.CommandLine&lt;/code>。&lt;code>*flag.FlagSet&lt;/code>类型的变量&lt;code>cmdLine&lt;/code>拥有很多有意思的方法。你可以去探索一下。我就不在这里一一讲述了。&lt;/p>
&lt;p>这样做的好处依然是更灵活地定制命令参数容器。但更重要的是，你的定制完全不会影响到那个全局变量&lt;code>flag.CommandLine&lt;/code>。&lt;/p>
&lt;p>&lt;strong>总结&lt;/strong>&lt;/p>
&lt;p>恭喜你！你现在已经走出了 Go 语言编程的第一步。你可以用 Go 编写命令，并可以让它们像众多操作系统命令那样被使用，甚至可以把它们嵌入到各种脚本中。&lt;/p>
&lt;p>虽然我为你讲解了命令源码文件的基本编写方法，并且也谈到了为了让它接受参数而需要做的各种准备工作，但这并不是全部。&lt;/p>
&lt;p>别担心，我在后面会经常提到它的。另外，如果你想详细了解&lt;code>flag&lt;/code>包的用法，可以到&lt;a href="https://golang.google.cn/pkg/flag/">这个网址&lt;/a>查看文档。或者直接使用&lt;code>godoc&lt;/code>命令在本地启动一个 Go 语言文档服务器。怎样使用&lt;code>godoc&lt;/code>命令？你可以参看&lt;a href="https://github.com/hyper0x/go_command_tutorial/blob/master/0.5.md">这里&lt;/a>。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>我们已经见识过为命令源码文件传入字符串类型的参数值的方法，那还可以传入别的吗？这就是今天我留下的思考题。&lt;/p>
&lt;ol>
&lt;li>默认情况下，我们可以让命令源码文件接受哪些类型的参数值？&lt;/li>
&lt;li>我们可以把自定义的数据类型作为参数值的类型吗？如果可以，怎样做？&lt;/li>
&lt;/ol>
&lt;p>你可以通过查阅文档获得第一个问题的答案。记住，快速查看和理解文档是一项必备的技能。&lt;/p>
&lt;p>至于第二个问题，你回答起来可能会有些困难，因为这涉及了另一个问题：&amp;ldquo;怎样声明自己的数据类型？&amp;ldquo;这个问题我在专栏的后续部分中也会讲到。如果是这样，我希望你记下它和这里说的另一问题，并在能解决后者之后再来回答前者。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 03丨库源码文件</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/03%E4%B8%A8%E5%BA%93%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/03%E4%B8%A8%E5%BA%93%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6/</guid><description>
&lt;p>你已经使用过 Go 语言编写了小命令（或者说微型程序）吗？&lt;/p>
&lt;p>当你在编写&amp;quot;Hello, world&amp;quot;的时候，一个源码文件就足够了，虽然这种小玩意儿没什么用，最多能给你一点点莫名的成就感。如果你对这一点点并不满足，别着急，跟着学，我肯定你也可以写出很厉害的程序。&lt;/p>
&lt;hr>
&lt;p>我们在上一篇的文章中学到了命令源码文件的相关知识，那么除了命令源码文件，你还能用 Go 语言编写库源码文件。那么什么是库源码文件呢？&lt;/p>
&lt;p>在我的定义中，&lt;strong>库源码文件是不能被直接运行的源码文件，它仅用于存放程序实体，这些程序实体可以被其他代码使用（只要遵从 Go 语言规范的话）。&lt;/strong>&lt;/p>
&lt;p>这里的&amp;quot;其他代码&amp;quot;可以与被使用的程序实体在同一个源码文件内，也可以在其他源码文件，甚至其他代码包中。&lt;/p>
&lt;blockquote>
&lt;p>那么程序实体是什么呢？在 Go 语言中，程序实体是变量、常量、函数、结构体和接口的统称。&lt;/p>
&lt;p>我们总是会先声明（或者说定义）程序实体，然后再去使用。比如在上一篇的例子中，我们先定义了变量&lt;code>name&lt;/code>，然后在&lt;code>main&lt;/code>函数中调用&lt;code>fmt.Printf&lt;/code>函数的时候用到了它。&lt;/p>
&lt;p>再多说一点，程序实体的名字被统称为标识符。标识符可以是任何 Unicode 编码可以表示的字母字符、数字以及下划线&amp;quot;_&amp;quot;，但是其首字母不能是数字。&lt;/p>
&lt;p>从规则上说，我们可以用中文作为变量的名字。但是，我觉得这种命名方式非常不好，自己也会在开发团队中明令禁止这种做法。作为一名合格的程序员，我们应该向着编写国际水准的程序无限逼近。&lt;/p>
&lt;/blockquote>
&lt;p>回到正题。&lt;/p>
&lt;p>我们今天的&lt;strong>问题是：怎样把命令源码文件中的代码拆分到其他库源码文件？&lt;/strong>&lt;/p>
&lt;p>我们用代码演示，把这个问题说得更具体一些。&lt;/p>
&lt;p>如果在某个目录下有一个命令源码文件 demo4.go，如下：&lt;/p>
&lt;pre>&lt;code>package main
import (
&amp;quot;flag&amp;quot;
)
var name string
func init() {
flag.StringVar(&amp;amp;name, &amp;quot;name&amp;quot;, &amp;quot;everyone&amp;quot;, &amp;quot;The greeting object.&amp;quot;)
}
func main() {
flag.Parse()
hello(name)
}
&lt;/code>&lt;/pre>
&lt;p>其中的代码你应该比较眼熟了。我在讲命令源码文件的时候贴过很相似的代码，那个源码文件名为 demo2.go。&lt;/p>
&lt;p>这两个文件的不同之处在于，demo2.go 直接通过调用&lt;code>fmt.Printf&lt;/code>函数打印问候语，而当前的 demo4.go 在同样位置调用了一个叫作&lt;code>hello&lt;/code>的函数。&lt;/p>
&lt;p>函数&lt;code>hello&lt;/code>被声明在了另外一个源码文件中，我把它命名为 demo4_lib.go，并且放在与 demo4.go 相同的目录下。如下：&lt;/p>
&lt;pre>&lt;code>// 需在此处添加代码。[1]
import &amp;quot;fmt&amp;quot;
func hello(name string) {
fmt.Printf(&amp;quot;Hello, %s!\n&amp;quot;, name)
}
&lt;/code>&lt;/pre>
&lt;p>那么问题来了：注释 1 处应该填入什么代码？&lt;/p>
&lt;h2 id="典型回答">&lt;strong>典型回答&lt;/strong>&lt;/h2>
&lt;p>答案很简单，填入代码包声明语句&lt;code>package main&lt;/code>。为什么？我之前说过，在同一个目录下的源码文件都需要被声明为属于同一个代码包。&lt;/p>
&lt;p>如果该目录下有一个命令源码文件，那么为了让同在一个目录下的文件都通过编译，其他源码文件应该也声明属于&lt;code>main&lt;/code>包。&lt;/p>
&lt;p>如此一来，我们就可以运行它们了。比如，我们可以在这些文件所在的目录下运行如下命令并得到相应的结果。&lt;/p>
&lt;pre>&lt;code>$ go run demo4.go demo4_lib.go
Hello, everyone!
&lt;/code>&lt;/pre>
&lt;p>或者，像下面这样先构建当前的代码包再运行。&lt;/p>
&lt;pre>&lt;code>$ go build puzzlers/article3/q1
$ ./q1
Hello, everyone!
&lt;/code>&lt;/pre>
&lt;p>在这里，我把 demo4.go 和 demo4_lib.go 都放在了一个相对路径为&lt;code>puzzlers/article3/q1&lt;/code>的目录中。&lt;/p>
&lt;p>在默认情况下，相应的代码包的导入路径会与此一致。我们可以通过代码包的导入路径引用其中声明的程序实体。但是，这里的情况是不同的。&lt;/p>
&lt;p>注意，demo4.go 和 demo4_lib.go 都声明自己属于&lt;code>main&lt;/code>包。我在前面讲 Go 语言源码的组织方式的时候提到过这种用法，即：源码文件声明的包名可以与其所在目录的名称不同，只要这些文件声明的包名一致就可以。&lt;/p>
&lt;p>顺便说一下，我为本专栏创建了一个名为&amp;quot;Golang_Puzzlers&amp;quot;的项目。该项目的 src 子目录下会存有我们涉及的所有代码和相关文件。&lt;/p>
&lt;p>也就是说，正确的用法是，你需要把该项目的打包文件下载到本地的任意目录下，然后经解压缩后把&amp;quot;Golang_Puzzlers&amp;quot;目录加入到环境变量&lt;code>GOPATH&lt;/code>中。还记得吗？这会使&amp;quot;Golang_Puzzlers&amp;quot;目录成为工作区之一。&lt;/p>
&lt;h2 id="问题解析">&lt;strong>问题解析&lt;/strong>&lt;/h2>
&lt;p>这个问题考察的是代码包声明的基本规则。这里再总结一下。&lt;/p>
&lt;p>第一条规则，同目录下的源码文件的代码包声明语句要一致。也就是说，它们要同属于一个代码包。这对于所有源码文件都是适用的。&lt;/p>
&lt;p>如果目录中有命令源码文件，那么其他种类的源码文件也应该声明属于&lt;code>main&lt;/code>包。这也是我们能够成功构建和运行它们的前提。&lt;/p>
&lt;p>第二条规则，源码文件声明的代码包的名称可以与其所在的目录的名称不同。在针对代码包进行构建时，生成的结果文件的主名称与其父目录的名称一致。&lt;/p>
&lt;p>对于命令源码文件而言，构建生成的可执行文件的主名称会与其父目录的名称相同，这在我前面的回答中也验证过了。&lt;/p>
&lt;p>好了，经过我的反复强调，相信你已经记住这些规则了。下面的内容也将会与它们相关。&lt;/p>
&lt;p>在编写真正的程序时，我们仅仅把代码拆分到几个源码文件中是不够的。我们往往会用模块化编程的方式，根据代码的功能和用途把它们放置到不同的代码包中。不过，这又会牵扯进一些 Go 语言的代码组织规则。我们一起来往下看。&lt;/p>
&lt;h2 id="知识精讲">&lt;strong>知识精讲&lt;/strong>&lt;/h2>
&lt;h3 id="1-怎样把命令源码文件中的代码拆分到其他代码包">1. 怎样把命令源码文件中的代码拆分到其他代码包？&lt;/h3>
&lt;p>我们先不用关注拆分代码的技巧。我在这里仍然依从前面的拆分方法。我把 demo4.go 另存为 demo5.go，并放到一个相对路径为&lt;code>puzzlers/article3/q2&lt;/code>的目录中。&lt;/p>
&lt;p>然后我再创建一个相对路径为&lt;code>puzzlers/article3/q2/lib&lt;/code>的目录，再把 demo4_lib.go 复制一份并改名为 demo5_lib.go 放到该目录中。&lt;/p>
&lt;p>现在，为了让它们通过编译，我们应该怎样修改代码？你可以先思考一下。我在这里给出一部分答案，我们一起来看看已经过修改的 demo5_lib.go 文件。&lt;/p>
&lt;pre>&lt;code>package lib5
import &amp;quot;fmt&amp;quot;
func Hello(name string) {
fmt.Printf(&amp;quot;Hello, %s!\n&amp;quot;, name)
}
&lt;/code>&lt;/pre>
&lt;p>可以看到，我在这里修改了两个地方。第一个改动是，我把代码包声明语句由&lt;code>package main&lt;/code>改为了&lt;code>package lib5&lt;/code>。注意，我故意让声明的包名与其所在的目录的名称不同。第二个改动是，我把全小写的函数名&lt;code>hello&lt;/code>改为首字母大写的&lt;code>Hello&lt;/code>。&lt;/p>
&lt;p>基于以上改动，我们再来看下面的几个问题。&lt;/p>
&lt;h3 id="2-代码包的导入路径总会与其所在目录的相对路径一致吗">&lt;strong>2. 代码包的导入路径总会与其所在目录的相对路径一致吗？&lt;/strong>&lt;/h3>
&lt;p>库源码文件 demo5_lib.go 所在目录的相对路径是&lt;code>puzzlers/article3/q2/lib&lt;/code>，而它却声明自己属于&lt;code>lib5&lt;/code>包。在这种情况下，该包的导入路径是&lt;code>puzzlers/article3/q2/lib&lt;/code>，还是&lt;code>puzzlers/article3/q2/lib5&lt;/code>？&lt;/p>
&lt;p>这个问题往往会让 Go 语言的初学者们困惑，就算是用 Go 开发过程序的人也不一定清楚。我们一起来看看。&lt;/p>
&lt;p>首先，我们在构建或者安装这个代码包的时候，提供给&lt;code>go&lt;/code>命令的路径应该是目录的相对路径，就像这样：&lt;/p>
&lt;pre>&lt;code>go install puzzlers/article3/q2/lib
&lt;/code>&lt;/pre>
&lt;p>该命令会成功完成。之后，当前工作区的 pkg 子目录下会产生相应的归档文件，具体的相对路径是:&lt;/p>
&lt;pre>&lt;code>pkg/darwin_amd64/puzzlers/article3/q2/lib.a
&lt;/code>&lt;/pre>
&lt;p>其中的&lt;code>darwin_amd64&lt;/code>就是我在讲工作区时提到的平台相关目录。可以看到，这里与源码文件所在目录的相对路径是对应的。&lt;/p>
&lt;p>为了进一步说明问题，我需要先对 demo5.go 做两个改动。第一个改动是，在以&lt;code>import&lt;/code>为前导的代码包导入语句中加入&lt;code>puzzlers/article3/q2/lib&lt;/code>，也就是试图导入这个代码包。&lt;/p>
&lt;p>第二个改动是，把对&lt;code>hello&lt;/code>函数的调用改为对&lt;code>lib.Hello&lt;/code>函数的调用。其中的&lt;code>lib.&lt;/code>叫做限定符，旨在指明右边的程序实体所在的代码包。不过这里与代码包导入路径的完整写法不同，只包含了路径中的最后一级&lt;code>lib&lt;/code>，这与代码包声明语句中的规则一致。&lt;/p>
&lt;p>现在，我们可以通过运行&lt;code>go run demo5.go&lt;/code>命令试一试。错误提示会类似于下面这种。&lt;/p>
&lt;pre>&lt;code>./demo5.go:5:2: imported and not used: &amp;quot;puzzlers/article3/q2/lib&amp;quot; as lib5
./demo5.go:16:2: undefined: lib
&lt;/code>&lt;/pre>
&lt;p>第一个错误提示的意思是，我们导入了&lt;code>puzzlers/article3/q2/lib&lt;/code>包，但没有实际使用其中的任何程序实体。这在 Go 语言中是不被允许的，在编译时就会导致失败。&lt;/p>
&lt;p>注意，这里还有另外一个线索，那就是&amp;quot;as lib5&amp;quot;。这说明虽然导入了代码包&lt;code>puzzlers/article3/q2/lib&lt;/code>，但是使用其中的程序实体的时候应该以&lt;code>lib5.&lt;/code>为限定符。这也就是第二个错误提示的原因了。Go 命令找不到&lt;code>lib.&lt;/code>这个限定符对应的代码包。&lt;/p>
&lt;p>为什么会是这样？根本原因就是，我们在源码文件中声明所属的代码包与其所在目录的名称不同。请记住，源码文件所在的目录相对于 src 目录的相对路径就是它的代码包导入路径，而实际使用其程序实体时给定的限定符要与它声明所属的代码包名称对应。&lt;/p>
&lt;p>有两个方式可以使上述构建成功完成。我在这里选择把 demo5_lib.go 文件中的代码包声明语句改为&lt;code>package lib&lt;/code>。理由是，为了不让该代码包的使用者产生困惑，我们总是应该让声明的包名与其父目录的名称一致。&lt;/p>
&lt;h3 id="3-什么样的程序实体才可以被当前包外的代码引用">&lt;strong>3. 什么样的程序实体才可以被当前包外的代码引用？&lt;/strong>&lt;/h3>
&lt;p>你可能会有疑问，我为什么要把 demo5_lib.go 文件中的那个函数名称&lt;code>hello&lt;/code>的首字母大写？实际上这涉及了 Go 语言中对于程序实体访问权限的规则。&lt;/p>
&lt;p>超级简单，名称的首字母为大写的程序实体才可以被当前包外的代码引用，否则它就只能被当前包内的其他代码引用。&lt;/p>
&lt;p>通过名称，Go 语言自然地把程序实体的访问权限划分为了包级私有的和公开的。对于包级私有的程序实体，即使你导入了它所在的代码包也无法引用到它。&lt;/p>
&lt;h3 id="4-对于程序实体还有其他的访问权限规则吗">&lt;strong>4. 对于程序实体，还有其他的访问权限规则吗？&lt;/strong>&lt;/h3>
&lt;p>答案是肯定的。在 Go 1.5 及后续版本中，我们可以通过创建&lt;code>internal&lt;/code>代码包让一些程序实体仅仅能被当前模块中的其他代码引用。这被称为 Go 程序实体的第三种访问权限：模块级私有。&lt;/p>
&lt;p>具体规则是，&lt;code>internal&lt;/code>代码包中声明的公开程序实体仅能被该代码包的直接父包及其子包中的代码引用。当然，引用前需要先导入这个&lt;code>internal&lt;/code>包。对于其他代码包，导入该&lt;code>internal&lt;/code>包都是非法的，无法通过编译。&lt;/p>
&lt;p>&amp;ldquo;Golang_Puzzlers&amp;quot;项目的&lt;code>puzzlers/article3/q4&lt;/code>包中有一个简单的示例，可供你查看。你可以改动其中的代码并体会&lt;code>internal&lt;/code>包的作用。&lt;/p>
&lt;h2 id="总结">&lt;strong>总结&lt;/strong>&lt;/h2>
&lt;p>我们在本篇文章中详细讨论了把代码从命令源码文件中拆分出来的方法，这包括拆分到其他库源码文件，以及拆分到其他代码包。&lt;/p>
&lt;p>这里涉及了几条重要的 Go 语言基本编码规则，即：代码包声明规则、代码包导入规则以及程序实体的访问权限规则。在进行模块化编程时，你必须记住这些规则，否则你的代码很可能无法通过编译。&lt;/p>
&lt;h2 id="思考题">&lt;strong>思考题&lt;/strong>&lt;/h2>
&lt;p>这次的思考题都是关于代码包导入的，如下。&lt;/p>
&lt;ol>
&lt;li>如果你需要导入两个代码包，而这两个代码包的导入路径的最后一级是相同的，比如：&lt;code>dep/lib/flag&lt;/code>和&lt;code>flag&lt;/code>，那么会产生冲突吗？&lt;/li>
&lt;li>如果会产生冲突，那么怎样解决这种冲突，有几种方式？&lt;/li>
&lt;/ol>
&lt;p>第一个问题比较简单，你一试便知。强烈建议你编写个例子，然后运行&lt;code>go&lt;/code>命令构建它，并看看会有什么样的提示。&lt;/p>
&lt;p>而第二个问题涉及了代码包导入语句的高级写法，你可能需要去查阅一下 Go 语言规范。不过也不难。你最多能想出几种解决办法呢？你可以给我留言，我们一起讨论。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 04丨程序实体的那些事儿（上）</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/04%E4%B8%A8%E7%A8%8B%E5%BA%8F%E5%AE%9E%E4%BD%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF%E4%B8%8A/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/04%E4%B8%A8%E7%A8%8B%E5%BA%8F%E5%AE%9E%E4%BD%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF%E4%B8%8A/</guid><description>
&lt;p>我已经为你打开了 Go 语言编程之门，并向你展示了&amp;quot;程序从初建到拆分，再到模块化&amp;quot;的基本演化路径。&lt;/p>
&lt;p>一个编程老手让程序完成基本演化，可能也就需要几十分钟甚至十几分钟，因为他们一开始就会把车开到模块化编程的道路上。我相信，等你真正理解了这个过程之后，也会驾轻就熟的。&lt;/p>
&lt;p>上述套路是通用的，不是只适用于 Go 语言。但从本篇开始，我会开始向你介绍 Go 语言中的各种特性以及相应的编程方法和思想。&lt;/p>
&lt;hr>
&lt;p>我在讲解那两种源码文件基本编写方法的时候，声明和使用了一些程序实体。你也许已经若有所觉，也许还在云里雾里。没关系，我现在就与你一起梳理这方面的重点。&lt;/p>
&lt;p>还记得吗？&lt;strong>Go 语言中的程序实体包括变量、常量、函数、结构体和接口。&lt;/strong> Go 语言是静态类型的编程语言，所以我们在声明变量或常量的时候，都需要指定它们的类型，或者给予足够的信息，这样才可以让 Go 语言能够推导出它们的类型。&lt;/p>
&lt;blockquote>
&lt;p>在 Go 语言中，变量的类型可以是其预定义的那些类型，也可以是程序自定义的函数、结构体或接口。常量的合法类型不多，只能是那些 Go 语言预定义的基本类型。它的声明方式也更简单一些。&lt;/p>
&lt;/blockquote>
&lt;p>好了，下面这个简单的问题你需要了解一下。&lt;/p>
&lt;h2 id="问题声明变量有几种方式">&lt;strong>问题：声明变量有几种方式？&lt;/strong>&lt;/h2>
&lt;p>先看段代码。&lt;/p>
&lt;pre>&lt;code>package main
import (
&amp;quot;flag&amp;quot;
&amp;quot;fmt&amp;quot;
)
func main() {
var name string // [1]
flag.StringVar(&amp;amp;name, &amp;quot;name&amp;quot;, &amp;quot;everyone&amp;quot;, &amp;quot;The greeting object.&amp;quot;) // [2]
flag.Parse()
fmt.Printf(&amp;quot;Hello, %v!\n&amp;quot;, name)
}
&lt;/code>&lt;/pre>
&lt;p>这是一个很简单的命令源码文件，我把它命名为 demo7.go。它是 demo2.go 的微调版。我只是把变量&lt;code>name&lt;/code>的声明和对&lt;code>flag.StringVar&lt;/code>函数的调用，都移动到了&lt;code>main&lt;/code>函数中，这分别对应代码中的注释&lt;code>[1]&lt;/code>和&lt;code>[2]&lt;/code>。&lt;/p>
&lt;p>具体的问题是，除了&lt;code>var name string&lt;/code>这种声明变量&lt;code>name&lt;/code>的方式，还有其他方式吗？你可以选择性地改动注释&lt;code>[1]&lt;/code>和&lt;code>[2]&lt;/code>处的代码。&lt;/p>
&lt;h2 id="典型回答">&lt;strong>典型回答&lt;/strong>&lt;/h2>
&lt;p>这有几种做法，我在这里只说最典型的两种。&lt;/p>
&lt;p>&lt;strong>第一种方式&lt;/strong> 需要先对注释&lt;code>[2]&lt;/code>处的代码稍作改动，把被调用的函数由&lt;code>flag.StringVar&lt;/code>改为&lt;code>flag.String&lt;/code>，传参的列表也需要随之修改，这是为了&lt;code>[1]&lt;/code>和&lt;code>[2]&lt;/code>处代码合并的准备工作。&lt;/p>
&lt;pre>&lt;code>var name = flag.String(&amp;quot;name&amp;quot;, &amp;quot;everyone&amp;quot;, &amp;quot;The greeting object.&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>合并后的代码看起来更简洁一些。我把注释&lt;code>[1]&lt;/code>处的代码中的&lt;code>string&lt;/code>去掉了，右边添加了一个&lt;code>=&lt;/code>，然后再拼接上经过修改的&lt;code>[2]&lt;/code>处代码。&lt;/p>
&lt;p>注意，&lt;code>flag.String&lt;/code>函数返回的结果值的类型是&lt;code>*string&lt;/code>而不是&lt;code>string&lt;/code>。类型&lt;code>*string&lt;/code>代表的是字符串的指针类型，而不是字符串类型。因此，这里的变量&lt;code>name&lt;/code>代表的是一个指向字符串值的指针。&lt;/p>
&lt;p>关于 Go 语言中的指针，我在后面会有专门的介绍。你在这里只需要知道，我们可以通过操作符&lt;code>*&lt;/code>把这个指针指向的字符串值取出来了。因此，在这种情况下，那个被用来打印内容的函数调用就需要微调一下，把其中的参数&lt;code>name&lt;/code>改为&lt;code>*name&lt;/code>，即：&lt;code>fmt.Printf(&amp;quot;Hello, %v!\n&amp;quot;, *name)&lt;/code>。&lt;/p>
&lt;p>好了，我想你已经基本理解了这行代码中的每一个部分。&lt;/p>
&lt;p>&lt;strong>下面我接着说第二种方式。&lt;/strong> 第二种方式与第一种方式非常类似，它基于第一种方式的代码，赋值符号&lt;code>=&lt;/code>右边的代码不动，左边只留下&lt;code>name&lt;/code>，再把&lt;code>=&lt;/code>变成&lt;code>:=&lt;/code>。&lt;/p>
&lt;pre>&lt;code>name := flag.String(&amp;quot;name&amp;quot;, &amp;quot;everyone&amp;quot;, &amp;quot;The greeting object.&amp;quot;)
&lt;/code>&lt;/pre>
&lt;h2 id="问题解析">&lt;strong>问题解析&lt;/strong>&lt;/h2>
&lt;p>这个问题的基本考点有两个。&lt;strong>一个是你要知道 Go 语言中的类型推断，以及它在代码中的基本体现，另一个是短变量声明的用法。&lt;/strong>&lt;/p>
&lt;p>第一种方式中的代码在声明变量&lt;code>name&lt;/code>的同时，还为它赋了值，而这时声明中并没有显式指定&lt;code>name&lt;/code>的类型。&lt;/p>
&lt;p>还记得吗？之前的变量声明语句是&lt;code>var name string&lt;/code>。这里利用了 Go 语言自身的类型推断，而省去了对该变量的类型的声明。&lt;/p>
&lt;blockquote>
&lt;p>简单地说，类型推断是一种编程语言在编译期自动解释表达式类型的能力。什么是表达式？详细的解释你可以参看 Go 语言规范中的&lt;a href="https://golang.google.cn/ref/spec#Expressions">表达式&lt;/a>和&lt;a href="https://golang.google.cn/ref/spec#Expression_statements">表达式语句&lt;/a>章节。我在这里就不赘述了。&lt;/p>
&lt;/blockquote>
&lt;p>你可以认为，表达式类型就是对表达式进行求值后得到结果的类型。Go 语言中的类型推断是很简约的，这也是 Go 语言整体的风格。&lt;/p>
&lt;p>它只能用于对变量或常量的初始化，就像上述回答中描述的那样。对&lt;code>flag.String&lt;/code>函数的调用其实就是一个调用表达式，而这个表达式的类型是&lt;code>*string&lt;/code>，即字符串的指针类型。&lt;/p>
&lt;p>这也是调用&lt;code>flag.String&lt;/code>函数后得到结果的类型。随后，Go 语言把这个调用了&lt;code>flag.String&lt;/code>函数的表达式类型，直接作为了变量&lt;code>name&lt;/code>的类型，这就是&amp;quot;推断&amp;quot;一词所指代的操作了。&lt;/p>
&lt;p>至于第二种方式所用的短变量声明，实际上就是 Go 语言的类型推断再加上一点点语法糖。&lt;/p>
&lt;p>我们只能在函数体内部使用短变量声明。在编写&lt;code>if&lt;/code>、&lt;code>for&lt;/code>或&lt;code>switch&lt;/code>语句的时候，我们经常把它安插在初始化子句中，并用来声明一些临时的变量。而相比之下，第一种方式更加通用，它可以被用在任何地方。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/b7/bc/b7d73fdce13a3a5f2d56d0b95f2c8cbc.png" alt="">&lt;/p>
&lt;p>（变量的多种声明方式）&lt;/p>
&lt;p>短变量声明还有其他的玩法，我稍后就会讲到。&lt;/p>
&lt;h2 id="知识扩展">&lt;strong>知识扩展&lt;/strong>&lt;/h2>
&lt;h3 id="1-go-语言的类型推断可以带来哪些好处">&lt;strong>1. Go 语言的类型推断可以带来哪些好处？&lt;/strong>&lt;/h3>
&lt;p>如果面试官问你这个问题，你应该怎样回答？&lt;/p>
&lt;p>当然，在写代码时，我们通过使用 Go 语言的类型推断，而节省下来的键盘敲击次数几乎可以忽略不计。但它真正的好处，往往会体现在我们写代码之后的那些事情上，比如代码重构。&lt;/p>
&lt;p>为了更好的演示，我们先要做一点准备工作。我们依然通过调用一个函数在声明&lt;code>name&lt;/code>变量的同时为它赋值，但是这个函数不是&lt;code>flag.String&lt;/code>，而是由我们自己定义的某个函数，比如叫&lt;code>getTheFlag&lt;/code>。&lt;/p>
&lt;pre>&lt;code>package main
import (
&amp;quot;flag&amp;quot;
&amp;quot;fmt&amp;quot;
)
func main() {
var name = getTheFlag()
flag.Parse()
fmt.Printf(&amp;quot;Hello, %v!\n&amp;quot;, *name)
}
func getTheFlag() *string {
return flag.String(&amp;quot;name&amp;quot;, &amp;quot;everyone&amp;quot;, &amp;quot;The greeting object.&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;p>我们可以用&lt;code>getTheFlag&lt;/code>函数包裹（或者说包装）那个对&lt;code>flag.String&lt;/code>函数的调用，并把其结果直接作为&lt;code>getTheFlag&lt;/code>函数的结果，结果的类型是&lt;code>*string&lt;/code>。&lt;/p>
&lt;p>这样一来，&lt;code>var name =&lt;/code>右边的表达式，可以变为针对&lt;code>getTheFlag&lt;/code>函数的调用表达式了。这实际上是对&amp;quot;声明并赋值&lt;code>name&lt;/code>变量的那行代码&amp;quot;的重构。&lt;/p>
&lt;blockquote>
&lt;p>我们通常把不改变某个程序与外界的任何交互方式和规则，而只改变其内部实现&amp;quot;的代码修改方式，叫做对该程序的重构。重构的对象可以是一行代码、一个函数、一个功能模块，甚至一个软件系统。&lt;/p>
&lt;/blockquote>
&lt;p>好了，在准备工作做完之后，你会发现，你可以随意改变&lt;code>getTheFlag&lt;/code>函数的内部实现，及其返回结果的类型，而不用修改&lt;code>main&lt;/code>函数中的任何代码。&lt;/p>
&lt;p>这个命令源码文件依然可以通过编译，并且构建和运行也都不会有问题。也许你能感觉得到，这是一个关于程序灵活性的质变。&lt;/p>
&lt;p>我们不显式地指定变量&lt;code>name&lt;/code>的类型，使得它可以被赋予任何类型的值。也就是说，变量&lt;code>name&lt;/code>的类型可以在其初始化时，由其他程序动态地确定。&lt;/p>
&lt;p>在你改变&lt;code>getTheFlag&lt;/code>函数的结果类型之后，Go 语言的编译器会在你再次构建该程序的时候，自动地更新变量&lt;code>name&lt;/code>的类型。如果你使用过&lt;code>Python&lt;/code>或&lt;code>Ruby&lt;/code>这种动态类型的编程语言的话，一定会觉得这情景似曾相识。&lt;/p>
&lt;p>没错，通过这种类型推断，你可以体验到动态类型编程语言所带来的一部分优势，即程序灵活性的明显提升。但在那些编程语言中，这种提升可以说是用程序的可维护性和运行效率换来的。&lt;/p>
&lt;p>Go 语言是静态类型的，所以一旦在初始化变量时确定了它的类型，之后就不可能再改变。这就避免了在后面维护程序时的一些问题。另外，请记住，这种类型的确定是在编译期完成的，因此不会对程序的运行效率产生任何影响。&lt;/p>
&lt;p>现在，你应该已经对这个问题有一个比较深刻的理解了。&lt;/p>
&lt;p>如果只用一两句话回答这个问题的话，我想可以是这样的：Go 语言的类型推断可以明显提升程序的灵活性，使得代码重构变得更加容易，同时又不会给代码的维护带来额外负担（实际上，它恰恰可以避免散弹式的代码修改），更不会损失程序的运行效率。&lt;/p>
&lt;h3 id="2-变量的重声明是什么意思">&lt;strong>2. 变量的重声明是什么意思？&lt;/strong>&lt;/h3>
&lt;p>这涉及了短变量声明。通过使用它，我们可以对同一个代码块中的变量进行重声明。&lt;/p>
&lt;blockquote>
&lt;p>既然说到了代码块，我先来解释一下它。在 Go 语言中，代码块一般就是一个由花括号括起来的区域，里面可以包含表达式和语句。Go 语言本身以及我们编写的代码共同形成了一个非常大的代码块，也叫全域代码块。&lt;/p>
&lt;p>这主要体现在，只要是公开的全局变量，都可以被任何代码所使用。相对小一些的代码块是代码包，一个代码包可以包含许多子代码包，所以这样的代码块也可以很大。&lt;/p>
&lt;p>接下来，每个源码文件也都是一个代码块，每个函数也是一个代码块，每个&lt;code>if&lt;/code>语句、&lt;code>for&lt;/code>语句、&lt;code>switch&lt;/code>语句和&lt;code>select&lt;/code>语句都是一个代码块。甚至，&lt;code>switch&lt;/code>或&lt;code>select&lt;/code>语句中的&lt;code>case&lt;/code>子句也都是独立的代码块。&lt;/p>
&lt;p>走个极端，我就在&lt;code>main&lt;/code>函数中写一对紧挨着的花括号算不算一个代码块？当然也算，这甚至还有个名词，叫&amp;quot;空代码块&amp;quot;。&lt;/p>
&lt;/blockquote>
&lt;p>回到变量重声明的问题上。其含义是对已经声明过的变量再次声明。变量重声明的前提条件如下。&lt;/p>
&lt;ol>
&lt;li>由于变量的类型在其初始化时就已经确定了，所以对它再次声明时赋予的类型必须与其原本的类型相同，否则会产生编译错误。&lt;/li>
&lt;li>变量的重声明只可能发生在某一个代码块中。如果与当前的变量重名的是外层代码块中的变量，那么就是另外一种含义了，我在下一篇文章中会讲到。&lt;/li>
&lt;li>变量的重声明只有在使用短变量声明时才会发生，否则也无法通过编译。如果要在此处声明全新的变量，那么就应该使用包含关键字&lt;code>var&lt;/code>的声明语句，但是这时就不能与同一个代码块中的任何变量有重名了。&lt;/li>
&lt;li>被&amp;quot;声明并赋值&amp;quot;的变量必须是多个，并且其中至少有一个是新的变量。这时我们才可以说对其中的旧变量进行了重声明。&lt;/li>
&lt;/ol>
&lt;p>这样来看，变量重声明其实算是一个语法糖（或者叫便利措施）。它允许我们在使用短变量声明时不用理会被赋值的多个变量中是否包含旧变量。可以想象，如果不这样会多写不少代码。&lt;/p>
&lt;p>我把一个简单的例子写在了&amp;quot;Golang_Puzzlers&amp;quot;项目的&lt;code>puzzlers/article4/q3&lt;/code>包中的 demo9.go 文件中，你可以去看一下。&lt;/p>
&lt;p>这其中最重要的两行代码如下：&lt;/p>
&lt;pre>&lt;code>var err error
n, err := io.WriteString(os.Stdout, &amp;quot;Hello, everyone!\n&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>我使用短变量声明对新变量&lt;code>n&lt;/code>和旧变量&lt;code>err&lt;/code>进行了&amp;quot;声明并赋值&amp;quot;，这时也是对后者的重声明。&lt;/p>
&lt;h2 id="总结">&lt;strong>总结&lt;/strong>&lt;/h2>
&lt;p>在本篇中，我们聚焦于最基本的 Go 语言程序实体：变量。并详细解说了变量声明和赋值的基本方法，及其背后的重要概念和知识。我们使用关键字&lt;code>var&lt;/code>和短变量声明，都可以实现对变量的&amp;quot;声明并赋值&amp;quot;。&lt;/p>
&lt;p>这两种方式各有千秋，有着各自的特点和适用场景。前者可以被用在任何地方，而后者只能被用在函数或者其他更小的代码块中。&lt;/p>
&lt;p>不过，通过前者我们无法对已有的变量进行重声明，也就是说它无法处理新旧变量混在一起的情况。不过它们也有一个很重要的共同点，即：基于类型推断，Go 语言的类型推断只应用在了对变量或常量的初始化方面。&lt;/p>
&lt;h2 id="思考题">&lt;strong>思考题&lt;/strong>&lt;/h2>
&lt;p>本次的思考题只有一个：如果与当前的变量重名的是外层代码块中的变量，那么这意味着什么？&lt;/p>
&lt;p>这道题对于你来说可能有些难，不过我鼓励你多做几次试验试试，你可以在代码中多写一些打印语句，然后运行它，并记录下每次试验的结果。如果有疑问也一定要写下来，答案将在下篇文章中揭晓。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 05丨程序实体的那些事儿（中）</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/05%E4%B8%A8%E7%A8%8B%E5%BA%8F%E5%AE%9E%E4%BD%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF%E4%B8%AD/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/05%E4%B8%A8%E7%A8%8B%E5%BA%8F%E5%AE%9E%E4%BD%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF%E4%B8%AD/</guid><description>
&lt;p>在前文中，我解释过代码块的含义。Go 语言的代码块是一层套一层的，就像大圆套小圆。&lt;/p>
&lt;p>一个代码块可以有若干个子代码块；但对于每个代码块，最多只会有一个直接包含它的代码块（后者可以简称为前者的外层代码块）。&lt;/p>
&lt;p>这种代码块的划分，也间接地决定了程序实体的作用域。我们今天就来看看它们之间的关系。&lt;/p>
&lt;p>我先说说作用域是什么？大家都知道，一个程序实体被创造出来，是为了让别的代码引用的。那么，哪里的代码可以引用它呢，这就涉及了它的作用域。&lt;/p>
&lt;p>我在前面说过，程序实体的访问权限有三种：包级私有的、模块级私有的和公开的。这其实就是 Go 语言在语言层面，依据代码块对程序实体作用域进行的定义。&lt;/p>
&lt;p>包级私有和模块级私有访问权限对应的都是代码包代码块，公开的访问权限对应的是全域代码块。然而，这个颗粒度是比较粗的，我们往往需要利用代码块再细化程序实体的作用域。&lt;/p>
&lt;p>比如，我在一个函数中声明了一个变量，那么在通常情况下，这个变量是无法被这个函数以外的代码引用的。这里的函数就是一个代码块，而变量的作用域被限制在了该代码块中。当然了，还有例外的情况，这部分内容，我留到讲函数的时候再说。&lt;/p>
&lt;p>总之，请记住，**一个程序实体的作用域总是会被限制在某个代码块中，而这个作用域最大的用处，就是对程序实体的访问权限的控制。**对&amp;quot;高内聚，低耦合&amp;quot;这种程序设计思想的实践，恰恰可以从这里开始。&lt;/p>
&lt;p>你应该可以通过下面的问题进一步感受代码块和作用域的魅力。&lt;/p>
&lt;p>&lt;strong>今天的问题是：如果一个变量与其外层代码块中的变量重名会出现什么状况？&lt;/strong>&lt;/p>
&lt;p>我把此题的代码存到了 demo10.go 文件中了。你可以在&amp;quot;Golang_Puzzlers&amp;quot;项目的&lt;code>puzzlers/article5/q1&lt;/code>包中找到它。&lt;/p>
&lt;pre>&lt;code>package main
import &amp;quot;fmt&amp;quot;
var block = &amp;quot;package&amp;quot;
func main() {
block := &amp;quot;function&amp;quot;
{
block := &amp;quot;inner&amp;quot;
fmt.Printf(&amp;quot;The block is %s.\n&amp;quot;, block)
}
fmt.Printf(&amp;quot;The block is %s.\n&amp;quot;, block)
}
&lt;/code>&lt;/pre>
&lt;p>这个命令源码文件中有四个代码块，它们是：全域代码块、&lt;code>main&lt;/code>包代表的代码块、&lt;code>main&lt;/code>函数代表的代码块，以及在&lt;code>main&lt;/code>函数中的一个用花括号包起来的代码块。&lt;/p>
&lt;p>我在后三个代码块中分别声明了一个名为&lt;code>block&lt;/code>的变量，并分别把字符串值&lt;code>&amp;quot;package&amp;quot;&lt;/code>、&lt;code>&amp;quot;function&amp;quot;&lt;/code>和&lt;code>&amp;quot;inner&amp;quot;&lt;/code>赋给了它们。此外，我在后两个代码块的最后分别尝试用&lt;code>fmt.Printf&lt;/code>函数打印出&amp;quot;The block is %s.&amp;quot;。这里的&amp;quot;%s&amp;quot;只是为了占位，程序会用&lt;code>block&lt;/code>变量的实际值替换掉。&lt;/p>
&lt;p>具体的问题是：该源码文件中的代码能通过编译吗？如果不能，原因是什么？如果能，运行它后会打印出什么内容？&lt;/p>
&lt;h2 id="典型回答">典型回答&lt;/h2>
&lt;p>能通过编译。运行后打印出的内容是：&lt;/p>
&lt;pre>&lt;code>The block is inner.
The block is function.
&lt;/code>&lt;/pre>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>初看这道题，你可能会认为它无法通过编译，因为三处代码都声明了相同名称的变量。的确，声明重名的变量是无法通过编译的，用短变量声明对已有变量进行重声明除外，但这只是对于同一个代码块而言的。&lt;/p>
&lt;p>对于不同的代码块来说，其中的变量重名没什么大不了，照样可以通过编译。即使这些代码块有直接的嵌套关系也是如此，就像 demo10.go 中的&lt;code>main&lt;/code>包代码块、&lt;code>main&lt;/code>函数代码块和那个最内层的代码块那样。&lt;/p>
&lt;p>这样规定显然很方便也很合理，否则我们会每天为了选择变量名而烦恼。但是这会导致另外一个问题，我引用变量时到底用的是哪一个？这也是这道题的第二个考点。&lt;/p>
&lt;p>这其实有一个很有画面感的查找过程。这个查找过程不只针对于变量，还适用于任何程序实体。如下面所示。&lt;/p>
&lt;ul>
&lt;li>首先，代码引用变量的时候总会最优先查找当前代码块中的那个变量。注意，这里的&amp;quot;当前代码块&amp;quot;仅仅是引用变量的代码所在的那个代码块，并不包含任何子代码块。&lt;/li>
&lt;li>其次，如果当前代码块中没有声明以此为名的变量，那么程序会沿着代码块的嵌套关系，从直接包含当前代码块的那个代码块开始，一层一层地查找。&lt;/li>
&lt;li>一般情况下，程序会一直查到当前代码包代表的代码块。如果仍然找不到，那么 Go 语言的编译器就会报错了。&lt;/li>
&lt;/ul>
&lt;p>还记得吗？如果我们在当前源码文件中导入了其他代码包，那么引用其中的程序实体时，是需要以限定符为前缀的。所以程序在找代表变量未加限定符的名字（即标识符）的时候，是不会去被导入的代码包中查找的。&lt;/p>
&lt;blockquote>
&lt;p>但有个特殊情况，如果我们把代码包导入语句写成&lt;code>import . XXX&lt;/code>的形式（注意中间的那个&amp;quot;.&amp;quot;），那么就会让这个&amp;quot;XXX&amp;quot;包中公开的程序实体，被当前源码文件中的代码，视为当前代码包中的程序实体。&lt;/p>
&lt;p>比如，如果有代码包导入语句&lt;code>import . fmt&lt;/code>，那么我们在当前源码文件中引用&lt;code>fmt.Printf&lt;/code>函数的时候直接用&lt;code>Printf&lt;/code>就可以了。在这个特殊情况下，程序在查找当前源码文件后会先去查用这种方式导入的那些代码包。&lt;/p>
&lt;/blockquote>
&lt;p>好了，当你明白了上述过程之后，再去看 demo10.go 中的代码。是不是感觉清晰了很多？&lt;/p>
&lt;p>从作用域的角度也可以说，虽然通过&lt;code>var block = &amp;quot;package&amp;quot;&lt;/code>声明的变量作用域是整个&lt;code>main&lt;/code>代码包，但是在&lt;code>main&lt;/code>函数中，它却被那两个同名的变量&amp;quot;屏蔽&amp;quot;了。&lt;/p>
&lt;p>相似的，虽然&lt;code>main&lt;/code>函数首先声明的&lt;code>block&lt;/code>的作用域，是整个&lt;code>main&lt;/code>函数，但是在最内层的那个代码块中，它却是不可能被引用到的。反过来讲，最内层代码块中的&lt;code>block&lt;/code>也不可能被该块之外的代码引用到，这也是打印内容的第二行是&amp;quot;The block is function.&amp;ldquo;的另一半原因。&lt;/p>
&lt;p>你现在应该知道了，这道题看似简单，但是它考察以及可延展的范围并不窄。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;p>&lt;strong>不同代码块中的重名变量与变量重声明中的变量区别到底在哪儿？&lt;/strong>&lt;/p>
&lt;p>**为了方便描述，我就把不同代码块中的重名变量叫做&amp;quot;可重名变量&amp;quot;吧。**注意，在同一个代码块中不允许出现重名的变量，这违背了 Go 语言的语法。关于这两者的表象和机理，我们已经讨论得足够充分了。你现在可以说出几条区别？请想一想，然后再看下面的列表。&lt;/p>
&lt;ol>
&lt;li>变量重声明中的变量一定是在某一个代码块内的。注意，这里的&amp;quot;某一个代码块内&amp;quot;并不包含它的任何子代码块，否则就变成了&amp;quot;多个代码块之间&amp;rdquo;。而可重名变量指的正是在多个代码块之间由相同的标识符代表的变量。&lt;/li>
&lt;li>变量重声明是对同一个变量的多次声明，这里的变量只有一个。而可重名变量中涉及的变量肯定是有多个的。&lt;/li>
&lt;li>不论对变量重声明多少次，其类型必须始终一致，具体遵从它第一次被声明时给定的类型。而可重名变量之间不存在类似的限制，它们的类型可以是任意的。&lt;/li>
&lt;li>如果可重名变量所在的代码块之间，存在直接或间接的嵌套关系，那么它们之间一定会存在&amp;quot;屏蔽&amp;quot;的现象。但是这种现象绝对不会在变量重声明的场景下出现。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/5e/89/5e68210d5639f9e42738f21bd9eb1e89.png" alt="">&lt;/p>
&lt;p>当然了，我们之前谈论过，对变量进行重声明还有一些前提条件，不过在这里并不是重点。我就不再赘述了。&lt;/p>
&lt;p>以上 4 大区别中的第 3 条需要你再注意一下。既然可重名变量的类型可以是任意的，那么当它们之间存在&amp;quot;屏蔽&amp;quot;时你就更需要注意了。&lt;/p>
&lt;p>不同类型的值大都有着不同的特性和用法。当你在某一种类型的值上施加只有在其他类型值上才能做的操作时，Go 语言编译器一定会告诉你：&amp;ldquo;这不可以&amp;rdquo;。&lt;/p>
&lt;p>这种情况很好，甚至值得庆幸，因为你的程序存在的问题被提前发现了。如若不然，程序没准儿会在运行过程中由此引发很隐晦的问题，让你摸不着头脑。&lt;/p>
&lt;p>相比之下，那时候排查问题的成本可就太高了。所以，我们应该尽量利用 Go 语言的语法、规范和命令来约束我们的程序。&lt;/p>
&lt;p>具体到不同类型的可重名变量的问题上，让我们先来看一下&lt;code>puzzlers/article5/q2&lt;/code>包中的源码文件 demo11.go。它是一个很典型的例子。&lt;/p>
&lt;pre>&lt;code>package main
import &amp;quot;fmt&amp;quot;
var container = []string{&amp;quot;zero&amp;quot;, &amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;}
func main() {
container := map[int]string{0: &amp;quot;zero&amp;quot;, 1: &amp;quot;one&amp;quot;, 2: &amp;quot;two&amp;quot;}
fmt.Printf(&amp;quot;The element is %q.\n&amp;quot;, container[1])
}
&lt;/code>&lt;/pre>
&lt;p>在 demo11.go 中，有两个都叫做&lt;code>container&lt;/code>的变量，分别位于&lt;code>main&lt;/code>包代码块和&lt;code>main&lt;/code>函数代码块。&lt;code>main&lt;/code>包代码块中的变量是切片（slice）类型的，另一个是字典（map）类型的。在&lt;code>main&lt;/code>函数的最后，我试图打印出&lt;code>container&lt;/code>变量的值中索引为&lt;code>1&lt;/code>的那个元素。&lt;/p>
&lt;p>如果你熟悉这两个类型肯定会知道，在它们的值上我们都可以施加索引表达式，比如&lt;code>container[0]&lt;/code>。只要中括号里的整数在有效范围之内（这里是 [0, 2]），它就可以把值中的某一个元素取出来。&lt;/p>
&lt;p>如果&lt;code>container&lt;/code>的类型不是数组、切片或字典类型，那么索引表达式就会引发编译错误。这正是利用 Go 语言语法，帮我们约束程序的一个例子；但是当我们想知道 container 确切类型的时候，利用索引表达式的方式就不够了。&lt;/p>
&lt;p>当可重名变量的值被转换成某个接口类型值，或者它们的类型本身就是接口类型的时候，严格的类型检查就很有必要了。至于怎么检查，我们在下篇文章中再讨论。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>我们先讨论了代码块，并且也谈到了它与程序实体的作用域，以及访问权限控制之间的巧妙关系。Go 语言本身对程序实体提供了相对粗粒度的访问控制。但我们自己可以利用代码块和作用域精细化控制它们。&lt;/p>
&lt;p>如果在具有嵌套关系的不同代码块中存在重名的变量，那么我们应该特别小心，它们之间可能会发生&amp;quot;屏蔽&amp;quot;的现象。这样你在不同代码块中引用到变量很可能是不同的。具体的鉴别方式需要参考 Go 语言查找（代表了程序实体的）标识符的过程。&lt;/p>
&lt;p>另外，请记住变量重声明与可重名变量之间的区别以及它们的重要特征。其中最容易产生隐晦问题的一点是，可重名变量可以各有各的类型。这时候我们往往应该在真正使用它们之前先对其类型进行检查。利用 Go 语言的语法、规范和命令做辅助的检查是很好的办法，但有些时候并不充分。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>我们在讨论 Go 语言查找标识符时的范围的时候，提到过&lt;code>import . XXX&lt;/code>这种导入代码包的方式。这里有个思考题：&lt;/p>
&lt;p>如果通过这种方式导入的代码包中的变量与当前代码包中的变量重名了，那么 Go 语言是会把它们当做&amp;quot;可重名变量&amp;quot;看待还是会报错呢？&lt;/p>
&lt;p>其实我们写个例子一试便知，但重点是为什么？请你尝试从代码块和作用域的角度解释试验得到的答案。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 06丨程序实体的那些事儿（下）</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/06%E4%B8%A8%E7%A8%8B%E5%BA%8F%E5%AE%9E%E4%BD%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF%E4%B8%8B/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/06%E4%B8%A8%E7%A8%8B%E5%BA%8F%E5%AE%9E%E4%BD%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF%E4%B8%8B/</guid><description>
&lt;p>在上一篇文章，我们一直都在围绕着可重名变量，也就是不同代码块中的重名变量，进行了讨论。&lt;/p>
&lt;p>还记得吗？最后我强调，如果可重名变量的类型不同，那么就需要引起我们的特别关注了，它们之间可能会存在&amp;quot;屏蔽&amp;quot;的现象。&lt;/p>
&lt;p>必要时，我们需要严格地检查它们的类型，但是怎样检查呢？咱们现在就说。&lt;/p>
&lt;p>&lt;strong>我今天的问题是：怎样判断一个变量的类型？&lt;/strong>&lt;/p>
&lt;p>我们依然以在上一篇文章中展示过的 demo11.go 为基础。&lt;/p>
&lt;pre>&lt;code>package main
import &amp;quot;fmt&amp;quot;
var container = []string{&amp;quot;zero&amp;quot;, &amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;}
func main() {
container := map[int]string{0: &amp;quot;zero&amp;quot;, 1: &amp;quot;one&amp;quot;, 2: &amp;quot;two&amp;quot;}
fmt.Printf(&amp;quot;The element is %q.\n&amp;quot;, container[1])
}
&lt;/code>&lt;/pre>
&lt;p>那么，怎样在打印其中元素之前，正确判断变量&lt;code>container&lt;/code>的类型？&lt;/p>
&lt;h2 id="典型回答">典型回答&lt;/h2>
&lt;p>答案是使用&amp;quot;类型断言&amp;quot;表达式。具体怎么写呢？&lt;/p>
&lt;pre>&lt;code>value, ok := interface{}(container).([]string)
&lt;/code>&lt;/pre>
&lt;p>这里有一条赋值语句。在赋值符号的右边，是一个类型断言表达式。&lt;/p>
&lt;p>它包括了用来把&lt;code>container&lt;/code>变量的值转换为空接口值的&lt;code>interface{}(container)&lt;/code>。&lt;/p>
&lt;p>以及一个用于判断前者的类型是否为切片类型 &lt;code>[]string&lt;/code> 的 &lt;code>.([]string)&lt;/code>。&lt;/p>
&lt;p>这个表达式的结果可以被赋给两个变量，在这里由&lt;code>value&lt;/code>和&lt;code>ok&lt;/code>代表。变量&lt;code>ok&lt;/code>是布尔（bool）类型的，它将代表类型判断的结果，&lt;code>true&lt;/code>或&lt;code>false&lt;/code>。&lt;/p>
&lt;p>如果是&lt;code>true&lt;/code>，那么被判断的值将会被自动转换为&lt;code>[]string&lt;/code>类型的值，并赋给变量&lt;code>value&lt;/code>，否则&lt;code>value&lt;/code>将被赋予&lt;code>nil&lt;/code>（即&amp;quot;空&amp;quot;）。&lt;/p>
&lt;p>顺便提一下，这里的&lt;code>ok&lt;/code>也可以没有。也就是说，类型断言表达式的结果，可以只被赋给一个变量，在这里是&lt;code>value&lt;/code>。&lt;/p>
&lt;p>但是这样的话，当判断为否时就会引发异常。&lt;/p>
&lt;p>这种异常在 Go 语言中被叫做&lt;code>panic&lt;/code>，我把它翻译为运行时恐慌。因为它是一种在 Go 程序运行期间才会被抛出的异常，而&amp;quot;恐慌&amp;quot;二字是英文 Panic 的中文直译。&lt;/p>
&lt;p>除非显式地&amp;quot;恢复&amp;quot;这种&amp;quot;恐慌&amp;quot;，否则它会使 Go 程序崩溃并停止。所以，在一般情况下，我们还是应该使用带&lt;code>ok&lt;/code>变量的写法。&lt;/p>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>正式说明一下，类型断言表达式的语法形式是&lt;code>x.(T)&lt;/code>。其中的&lt;code>x&lt;/code>代表要被判断类型的值。这个值当下的类型必须是接口类型的，不过具体是哪个接口类型其实是无所谓的。&lt;/p>
&lt;p>所以，当这里的&lt;code>container&lt;/code>变量类型不是任何的接口类型时，我们就需要先把它转成某个接口类型的值。&lt;/p>
&lt;p>如果&lt;code>container&lt;/code>是某个接口类型的，那么这个类型断言表达式就可以是&lt;code>container.([]string)&lt;/code>。这样看是不是清晰一些了？&lt;/p>
&lt;p>在 Go 语言中，&lt;code>interface{}&lt;/code>代表空接口，任何类型都是它的实现类型。我在下个模块，会再讲接口及其实现类型的问题。现在你只要知道，任何类型的值都可以很方便地被转换成空接口的值就行了。&lt;/p>
&lt;p>这里的具体语法是&lt;code>interface{}(x)&lt;/code>，例如前面展示的&lt;code>interface{}(container)&lt;/code>。&lt;/p>
&lt;p>你可能会对这里的&lt;code>{}&lt;/code>产生疑惑，为什么在关键字&lt;code>interface&lt;/code>的右边还要加上这个东西？&lt;/p>
&lt;p>请记住，一对不包裹任何东西的花括号，除了可以代表空的代码块之外，还可以用于表示不包含任何内容的数据结构（或者说数据类型）。&lt;/p>
&lt;p>比如你今后肯定会遇到的&lt;code>struct{}&lt;/code>，它就代表了不包含任何字段和方法的、空的结构体类型。&lt;/p>
&lt;p>而空接口&lt;code>interface{}&lt;/code>则代表了不包含任何方法定义的、空的接口类型。&lt;/p>
&lt;p>当然了，对于一些集合类的数据类型来说，&lt;code>{}&lt;/code>还可以用来表示其值不包含任何元素，比如空的切片值&lt;code>[]string{}&lt;/code>，以及空的字典值&lt;code>map[int]string{}&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/b5/15/b5f16bf3ad8f416fb151aed8df47a515.png" alt="">&lt;/p>
&lt;p>（类型断言表达式）&lt;/p>
&lt;p>我们再向答案的最右边看。圆括号中&lt;code>[]string&lt;/code>是一个类型字面量。所谓类型字面量，就是用来表示数据类型本身的若干个字符。&lt;/p>
&lt;p>比如，&lt;code>string&lt;/code>是表示字符串类型的字面量，&lt;code>uint8&lt;/code>是表示 8 位无符号整数类型的字面量。&lt;/p>
&lt;p>再复杂一些的就是我们刚才提到的&lt;code>[]string&lt;/code>，用来表示元素类型为&lt;code>string&lt;/code>的切片类型，以及&lt;code>map[int]string&lt;/code>，用来表示键类型为&lt;code>int&lt;/code>、值类型为&lt;code>string&lt;/code>的字典类型。&lt;/p>
&lt;p>还有更复杂的结构体类型字面量、接口类型字面量，等等。这些描述起来占用篇幅较多，我在后面再说吧。&lt;/p>
&lt;p>针对当前的这个问题，我写了 demo12.go。它是 demo11.go 的修改版。我在其中分别使用了两种方式来实施类型断言，一种用的是我上面讲到的方式，另一种用的是我们还没讨论过的&lt;code>switch&lt;/code>语句，先供你参考。&lt;/p>
&lt;p>可以看到，当前问题的答案可以只有一行代码。你可能会想，这一行代码解释起来也太复杂了吧？&lt;/p>
&lt;p>&lt;strong>千万不要为此烦恼，这其中很大一部分都是一些基本语法和概念，你只要记住它们就好了。但这也正是我要告诉你的，一小段代码可以隐藏很多细节。面试官可以由此延伸到几个方向继续提问。这有点儿像泼墨，可以迅速由点及面。&lt;/strong>&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;p>&lt;strong>问题 1. 你认为类型转换规则中有哪些值得注意的地方？&lt;/strong>&lt;/p>
&lt;p>类型转换表达式的基本写法我已经在前面展示过了。它的语法形式是&lt;code>T(x)&lt;/code>。&lt;/p>
&lt;p>其中的&lt;code>x&lt;/code>可以是一个变量，也可以是一个代表值的字面量（比如&lt;code>1.23&lt;/code>和&lt;code>struct{}&lt;/code>），还可以是一个表达式。&lt;/p>
&lt;p>注意，如果是表达式，那么该表达式的结果只能是一个值，而不能是多个值。在这个上下文中，&lt;code>x&lt;/code>可以被叫做源值，它的类型就是源类型，而那个&lt;code>T&lt;/code>代表的类型就是目标类型。&lt;/p>
&lt;p>如果从源类型到目标类型的转换是不合法的，那么就会引发一个编译错误。那怎样才算合法？具体的规则可参见 Go 语言规范中的&lt;a href="https://golang.google.cn/ref/spec#Conversions">转换&lt;/a>部分。&lt;/p>
&lt;p>我们在这里要关心的，并不是那些 Go 语言编译器可以检测出的问题。恰恰相反，那些在编程语言层面很难检测的东西才是我们应该关注的。&lt;/p>
&lt;p>&lt;strong>很多初学者所说的陷阱（或者说坑），大都源于他们需要了解但却不了解的那些知识和技巧。因此，在这些规则中，我想抛出三个我认为很常用并且非常值得注意的知识点，提前帮你标出一些&amp;quot;陷阱&amp;quot;。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>首先，对于整数类型值、整数常量之间的类型转换，原则上只要源值在目标类型的可表示范围内就是合法的。&lt;/strong>&lt;/p>
&lt;p>比如，之所以&lt;code>uint8(255)&lt;/code>可以把无类型的常量&lt;code>255&lt;/code>转换为&lt;code>uint8&lt;/code>类型的值，是因为&lt;code>255&lt;/code>在 [0, 255] 的范围内。&lt;/p>
&lt;p>但需要特别注意的是，源整数类型的可表示范围较大，而目标类型的可表示范围较小的情况，比如把值的类型从&lt;code>int16&lt;/code>转换为&lt;code>int8&lt;/code>。请看下面这段代码：&lt;/p>
&lt;pre>&lt;code>var srcInt = int16(-255)
dstInt := int8(srcInt)
&lt;/code>&lt;/pre>
&lt;p>变量&lt;code>srcInt&lt;/code>的值是&lt;code>int16&lt;/code>类型的&lt;code>-255&lt;/code>，而变量&lt;code>dstInt&lt;/code>的值是由前者转换而来的，类型是&lt;code>int8&lt;/code>。&lt;code>int16&lt;/code>类型的可表示范围可比&lt;code>int8&lt;/code>类型大了不少。问题是，&lt;code>dstInt&lt;/code>的值是多少？&lt;/p>
&lt;p>首先你要知道，整数在 Go 语言以及计算机中都是以补码的形式存储的。这主要是为了简化计算机对整数的运算过程。补码其实就是原码各位求反再加 1。&lt;/p>
&lt;p>比如，&lt;code>int16&lt;/code>类型的值&lt;code>-255&lt;/code>的补码是&lt;code>1111111100000001&lt;/code>。如果我们把该值转换为&lt;code>int8&lt;/code>类型的值，那么 Go 语言会把在较高位置（或者说最左边位置）上的 8 位二进制数直接截掉，从而得到&lt;code>00000001&lt;/code>。&lt;/p>
&lt;p>又由于其最左边一位是&lt;code>0&lt;/code>，表示它是个正整数，以及正整数的补码就等于其原码，所以&lt;code>dstInt&lt;/code>的值就是&lt;code>1&lt;/code>。&lt;/p>
&lt;p>一定要记住，当整数值的类型的有效范围由宽变窄时，只需在补码形式下截掉一定数量的高位二进制数即可。&lt;/p>
&lt;p>类似的快刀斩乱麻规则还有：当把一个浮点数类型的值转换为整数类型值时，前者的小数部分会被全部截掉。&lt;/p>
&lt;p>&lt;strong>第二，虽然直接把一个整数值转换为一个&lt;code>string&lt;/code>类型的值是可行的，但值得关注的是，被转换的整数值应该可以代表一个有效的 Unicode 代码点，否则转换的结果将会是&lt;code>&amp;quot;�&amp;quot;&lt;/code>（仅由高亮的问号组成的字符串值）。&lt;/strong>&lt;/p>
&lt;p>字符&lt;code>'�'&lt;/code>的 Unicode 代码点是&lt;code>U+FFFD&lt;/code>。它是 Unicode 标准中定义的 Replacement Character，专用于替换那些未知的、不被认可的以及无法展示的字符。&lt;/p>
&lt;p>我肯定不会去问&amp;quot;哪个整数值转换后会得到哪个字符串&amp;quot;，这太变态了！但是我会写下：&lt;/p>
&lt;pre>&lt;code>string(-1)
&lt;/code>&lt;/pre>
&lt;p>并询问会得到什么？这可是完全不同的问题啊。由于&lt;code>-1&lt;/code>肯定无法代表一个有效的 Unicode 代码点，所以得到的总会是&lt;code>&amp;quot;�&amp;quot;&lt;/code>。在实际工作中，我们在排查问题时可能会遇到&lt;code>�&lt;/code>，你需要知道这可能是由于什么引起的。&lt;/p>
&lt;p>&lt;strong>第三个知识点是关于&lt;code>string&lt;/code>类型与各种切片类型之间的互转的。&lt;/strong>&lt;/p>
&lt;p>你先要理解的是，一个值在从&lt;code>string&lt;/code>类型向&lt;code>[]byte&lt;/code>类型转换时代表着以 UTF-8 编码的字符串会被拆分成零散、独立的字节。&lt;/p>
&lt;p>除了与 ASCII 编码兼容的那部分字符集，以 UTF-8 编码的某个单一字节是无法代表一个字符的。&lt;/p>
&lt;pre>&lt;code>string([]byte{'\xe4', '\xbd', '\xa0', '\xe5', '\xa5', '\xbd'}) // 你好
&lt;/code>&lt;/pre>
&lt;p>比如，UTF-8 编码的三个字节&lt;code>\xe4&lt;/code>、&lt;code>\xbd&lt;/code>和&lt;code>\xa0&lt;/code>合在一起才能代表字符&lt;code>'你'&lt;/code>，而&lt;code>\xe5&lt;/code>、&lt;code>\xa5&lt;/code>和&lt;code>\xbd&lt;/code>合在一起才能代表字符&lt;code>'好'&lt;/code>。&lt;/p>
&lt;p>其次，一个值在从&lt;code>string&lt;/code>类型向&lt;code>[]rune&lt;/code>类型转换时代表着字符串会被拆分成一个个 Unicode 字符。&lt;/p>
&lt;pre>&lt;code>string([]rune{'\u4F60', '\u597D'}) // 你好
&lt;/code>&lt;/pre>
&lt;p>当你真正理解了 Unicode 标准及其字符集和编码方案之后，上面这些内容就会显得很容易了。什么是 Unicode 标准？我会首先推荐你去它的&lt;a href="http://www.unicode.org">官方网站&lt;/a>一探究竟。&lt;/p>
&lt;p>&lt;strong>问题 2. 什么是别名类型？什么是潜在类型？&lt;/strong>&lt;/p>
&lt;p>我们可以用关键字&lt;code>type&lt;/code>声明自定义的各种类型。当然了，这些类型必须在 Go 语言基本类型和高级类型的范畴之内。在它们当中，有一种被叫做&amp;quot;别名类型&amp;quot;的类型。我们可以像下面这样声明它：&lt;/p>
&lt;pre>&lt;code>type MyString = string
&lt;/code>&lt;/pre>
&lt;p>这条声明语句表示，&lt;code>MyString&lt;/code>是&lt;code>string&lt;/code>类型的别名类型。顾名思义，别名类型与其源类型的区别恐怕只是在名称上，它们是完全相同的。&lt;/p>
&lt;p>源类型与别名类型是一对概念，是两个对立的称呼。别名类型主要是为了代码重构而存在的。更详细的信息可参见 Go 语言官方的文档&lt;a href="https://golang.org/design/18130-type-alias">Proposal: Type Aliases&lt;/a>。&lt;/p>
&lt;p>Go 语言内建的基本类型中就存在两个别名类型。&lt;code>byte&lt;/code>是&lt;code>uint8&lt;/code>的别名类型，而&lt;code>rune&lt;/code>是&lt;code>int32&lt;/code>的别名类型。&lt;/p>
&lt;p>一定要注意，如果我这样声明：&lt;/p>
&lt;pre>&lt;code>type MyString2 string // 注意，这里没有等号。
&lt;/code>&lt;/pre>
&lt;p>&lt;code>MyString2&lt;/code>和&lt;code>string&lt;/code>就是两个不同的类型了。这里的&lt;code>MyString2&lt;/code>是一个新的类型，不同于其他任何类型。&lt;/p>
&lt;p>这种方式也可以被叫做对类型的再定义。我们刚刚把&lt;code>string&lt;/code>类型再定义成了另外一个类型&lt;code>MyString2&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/4f/f2/4f113b74b564ad3b4b4877abca7b6bf2.png" alt="">&lt;br>
（别名类型、类型再定义与潜在类型）&lt;/p>
&lt;p>对于这里的类型再定义来说，&lt;code>string&lt;/code>可以被称为&lt;code>MyString2&lt;/code>的潜在类型。潜在类型的含义是，某个类型在本质上是哪个类型。&lt;/p>
&lt;p>潜在类型相同的不同类型的值之间是可以进行类型转换的。因此，&lt;code>MyString2&lt;/code>类型的值与&lt;code>string&lt;/code>类型的值可以使用类型转换表达式进行互转。&lt;/p>
&lt;p>但对于集合类的类型&lt;code>[]MyString2&lt;/code>与&lt;code>[]string&lt;/code>来说这样做却是不合法的，因为&lt;code>[]MyString2&lt;/code>与&lt;code>[]string&lt;/code>的潜在类型不同，分别是&lt;code>[]MyString2&lt;/code>和&lt;code>[]string&lt;/code>。另外，即使两个不同类型的潜在类型相同，它们的值之间也不能进行判等或比较，它们的变量之间也不能赋值。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>在本篇文章中，我们聚焦于类型。Go 语言中的每个变量都是有类型的，我们可以使用类型断言表达式判断变量是哪个类型的。&lt;/p>
&lt;p>正确使用该表达式需要一些小技巧，比如总是应该把结果赋给两个变量。另外还要保证被判断的变量是接口类型的，这可能会用到类型转换表达式。&lt;/p>
&lt;p>我们在使用类型转换表达式对变量的类型进行转换的时候，会受到一套规则的严格约束。&lt;/p>
&lt;p>我们必须关注这套规则中的一些细节，尤其是那些 Go 语言命令不会帮你检查的细节，否则就会踩进所谓的&amp;quot;陷阱&amp;quot;中。&lt;/p>
&lt;p>此外，你还应该搞清楚别名类型声明与类型再定义之间的区别，以及由此带来的它们的值在类型转换、判等、比较和赋值操作方面的不同。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>本篇文章的思考题有两个。&lt;/p>
&lt;ol>
&lt;li>除了上述提及的那些，你还认为类型转换规则中有哪些值得注意的地方？&lt;/li>
&lt;li>你能具体说说别名类型在代码重构过程中可以起到哪些作用吗？&lt;/li>
&lt;/ol>
&lt;p>这些问题的答案都在文中提到的官方文档之中。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 07丨数组和切片</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/07%E4%B8%A8%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/07%E4%B8%A8%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87/</guid><description>
&lt;p>从本篇文章开始，我们正式进入了模块 2 的学习。在这之前，我们已经聊了很多的 Go 语言和编程方面的基础知识，相信你已经对 Go 语言的开发环境配置、常用源码文件写法，以及程序实体（尤其是变量）及其相关的各种概念和编程技巧（比如类型推断、变量重声明、可重名变量、类型断言、类型转换、别名类型和潜在类型等）都有了一定的理解。&lt;/p>
&lt;p>它们都是我认为的 Go 语言编程基础中比较重要的部分，同时也是后续文章的基石。如果你在后面的学习过程中感觉有些吃力，那可能是基础仍未牢固，可以再回去复习一下。&lt;/p>
&lt;hr>
&lt;p>我们这次主要讨论 Go 语言的数组（array）类型和切片（slice）类型。数组和切片有时候会让初学者感到困惑。&lt;/p>
&lt;p>它们的共同点是都属于集合类的类型，并且，它们的值也都可以用来存储某一种类型的值（或者说元素）。&lt;/p>
&lt;p>不过，它们最重要的不同是：&lt;strong>数组类型的值（以下简称数组）的长度是固定的，而切片类型的值（以下简称切片）是可变长的。&lt;/strong>&lt;/p>
&lt;p>数组的长度在声明它的时候就必须给定，并且之后不会再改变。可以说，数组的长度是其类型的一部分。比如，&lt;code>[1]string&lt;/code>和&lt;code>[2]string&lt;/code>就是两个不同的数组类型。&lt;/p>
&lt;p>而切片的类型字面量中只有元素的类型，而没有长度。切片的长度可以自动地随着其中元素数量的增长而增长，但不会随着元素数量的减少而减小。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/ed/6c/edb5acaf595673e083cdcf1ea7bb966c.png" alt="">&lt;/p>
&lt;p>（数组与切片的字面量）&lt;/p>
&lt;p>我们其实可以把切片看做是对数组的一层简单的封装，因为在每个切片的底层数据结构中，一定会包含一个数组。数组可以被叫做切片的底层数组，而切片也可以被看作是对数组的某个连续片段的引用。&lt;/p>
&lt;blockquote>
&lt;p>也正因为如此，Go 语言的切片类型属于引用类型，同属引用类型的还有字典类型、通道类型、函数类型等；而 Go 语言的数组类型则属于值类型，同属值类型的有基础数据类型以及结构体类型。&lt;/p>
&lt;p>注意，Go 语言里不存在像 Java 等编程语言中令人困惑的&amp;quot;传值或传引用&amp;quot;问题。在 Go 语言中，我们判断所谓的&amp;quot;传值&amp;quot;或者&amp;quot;传引用&amp;quot;只要看被传递的值的类型就好了。&lt;/p>
&lt;p>如果传递的值是引用类型的，那么就是&amp;quot;传引用&amp;quot;。如果传递的值是值类型的，那么就是&amp;quot;传值&amp;quot;。从传递成本的角度讲，引用类型的值往往要比值类型的值低很多。&lt;/p>
&lt;p>我们在数组和切片之上都可以应用索引表达式，得到的都会是某个元素。我们在它们之上也都可以应用切片表达式，也都会得到一个新的切片。&lt;/p>
&lt;/blockquote>
&lt;p>我们通过调用内建函数&lt;code>len&lt;/code>，得到数组和切片的长度。通过调用内建函数&lt;code>cap&lt;/code>，我们可以得到它们的容量。&lt;/p>
&lt;p>但要注意，数组的容量永远等于其长度，都是不可变的。切片的容量却不是这样，并且它的变化是有规律可寻的。&lt;/p>
&lt;p>下面我们就通过一道题来了解一下。&lt;strong>我们今天的问题就是：怎样正确估算切片的长度和容量？&lt;/strong>&lt;/p>
&lt;p>为此，我编写了一个简单的命令源码文件 demo15.go。&lt;/p>
&lt;pre>&lt;code>package main
import &amp;quot;fmt&amp;quot;
func main() {
// 示例 1。
s1 := make([]int, 5)
fmt.Printf(&amp;quot;The length of s1: %d\n&amp;quot;, len(s1))
fmt.Printf(&amp;quot;The capacity of s1: %d\n&amp;quot;, cap(s1))
fmt.Printf(&amp;quot;The value of s1: %d\n&amp;quot;, s1)
s2 := make([]int, 5, 8)
fmt.Printf(&amp;quot;The length of s2: %d\n&amp;quot;, len(s2))
fmt.Printf(&amp;quot;The capacity of s2: %d\n&amp;quot;, cap(s2))
fmt.Printf(&amp;quot;The value of s2: %d\n&amp;quot;, s2)
}
&lt;/code>&lt;/pre>
&lt;p>我描述一下它所做的事情。&lt;/p>
&lt;p>首先，我用内建函数&lt;code>make&lt;/code>声明了一个&lt;code>[]int&lt;/code>类型的变量&lt;code>s1&lt;/code>。我传给&lt;code>make&lt;/code>函数的第二个参数是&lt;code>5&lt;/code>，从而指明了该切片的长度。我用几乎同样的方式声明了切片&lt;code>s2&lt;/code>，只不过多传入了一个参数&lt;code>8&lt;/code>以指明该切片的容量。&lt;/p>
&lt;p>现在，具体的问题是：切片&lt;code>s1&lt;/code>和&lt;code>s2&lt;/code>的容量都是多少？&lt;/p>
&lt;p>这道题的典型回答：切片&lt;code>s1&lt;/code>和&lt;code>s2&lt;/code>的容量分别是&lt;code>5&lt;/code>和&lt;code>8&lt;/code>。&lt;/p>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>解析一下这道题。&lt;code>s1&lt;/code>的容量为什么是&lt;code>5&lt;/code>呢？因为我在声明&lt;code>s1&lt;/code>的时候把它的长度设置成了&lt;code>5&lt;/code>。当我们用&lt;code>make&lt;/code>函数初始化切片时，如果不指明其容量，那么它就会和长度一致。如果在初始化时指明了容量，那么切片的实际容量也就是它了。这也正是&lt;code>s2&lt;/code>的容量是&lt;code>8&lt;/code>的原因。&lt;/p>
&lt;p>我们顺便通过&lt;code>s2&lt;/code>再来明确下长度、容量以及它们的关系。我在初始化&lt;code>s2&lt;/code>代表的切片时，同时也指定了它的长度和容量。&lt;/p>
&lt;p>我在刚才说过，可以把切片看做是对数组的一层简单的封装，因为在每个切片的底层数据结构中，一定会包含一个数组。数组可以被叫做切片的底层数组，而切片也可以被看作是对数组的某个连续片段的引用。&lt;/p>
&lt;p>在这种情况下，切片的容量实际上代表了它的底层数组的长度，这里是&lt;code>8&lt;/code>。（注意，切片的底层数组等同于我们前面讲到的数组，其长度不可变。）&lt;/p>
&lt;p>现在你需要跟着我一起想象：&lt;strong>有一个窗口，你可以通过这个窗口看到一个数组，但是不一定能看到该数组中的所有元素，有时候只能看到连续的一部分元素。&lt;/strong>&lt;/p>
&lt;p>现在，这个数组就是切片&lt;code>s2&lt;/code>的底层数组，而这个窗口就是切片&lt;code>s2&lt;/code>本身。&lt;code>s2&lt;/code>的长度实际上指明的就是这个窗口的宽度，决定了你透过&lt;code>s2&lt;/code>，可以看到其底层数组中的哪几个连续的元素。&lt;/p>
&lt;p>由于&lt;code>s2&lt;/code>的长度是&lt;code>5&lt;/code>，所以你可以看到底层数组中的第 1 个元素到第 5 个元素，对应的底层数组的索引范围是 [0, 4]。&lt;/p>
&lt;p>切片代表的窗口也会被划分成一个一个的小格子，就像我们家里的窗户那样。每个小格子都对应着其底层数组中的某一个元素。&lt;/p>
&lt;p>我们继续拿&lt;code>s2&lt;/code>为例，这个窗口最左边的那个小格子对应的正好是其底层数组中的第一个元素，即索引为&lt;code>0&lt;/code>的那个元素。因此可以说，&lt;code>s2&lt;/code>中的索引从&lt;code>0&lt;/code>到&lt;code>4&lt;/code>所指向的元素恰恰就是其底层数组中索引从&lt;code>0&lt;/code>到&lt;code>4&lt;/code>代表的那 5 个元素。&lt;/p>
&lt;p>请记住，当我们用&lt;code>make&lt;/code>函数或切片值字面量（比如&lt;code>[]int{1, 2, 3}&lt;/code>）初始化一个切片时，该窗口最左边的那个小格子总是会对应其底层数组中的第 1 个元素。&lt;/p>
&lt;p>但是当我们通过切片表达式基于某个数组或切片生成新切片的时候，情况就变得复杂起来了。&lt;/p>
&lt;p>&lt;strong>我们再来看一个例子：&lt;/strong>&lt;/p>
&lt;pre>&lt;code>s3 := []int{1, 2, 3, 4, 5, 6, 7, 8}
s4 := s3[3:6]
fmt.Printf(&amp;quot;The length of s4: %d\n&amp;quot;, len(s4))
fmt.Printf(&amp;quot;The capacity of s4: %d\n&amp;quot;, cap(s4))
fmt.Printf(&amp;quot;The value of s4: %d\n&amp;quot;, s4)
&lt;/code>&lt;/pre>
&lt;p>切片&lt;code>s3&lt;/code>中有 8 个元素，分别是从&lt;code>1&lt;/code>到&lt;code>8&lt;/code>的整数。&lt;code>s3&lt;/code>的长度和容量都是&lt;code>8&lt;/code>。然后，我用切片表达式&lt;code>s3[3:6]&lt;/code>初始化了切片&lt;code>s4&lt;/code>。问题是，这个&lt;code>s4&lt;/code>的长度和容量分别是多少？&lt;/p>
&lt;p>这并不难，用减法就可以搞定。首先你要知道，切片表达式中的方括号里的那两个整数都代表什么。我换一种表达方式你也许就清楚了，即：[3, 6)。&lt;/p>
&lt;p>这是数学中的区间表示法，常用于表示取值范围，我其实已经在本专栏用过好几次了。由此可知，&lt;code>[3:6]&lt;/code>要表达的就是透过新窗口能看到的&lt;code>s3&lt;/code>中元素的索引范围是从&lt;code>3&lt;/code>到&lt;code>5&lt;/code>（注意，不包括&lt;code>6&lt;/code>）。&lt;/p>
&lt;p>这里的&lt;code>3&lt;/code>可被称为起始索引，&lt;code>6&lt;/code>可被称为结束索引。那么&lt;code>s4&lt;/code>的长度就是&lt;code>6&lt;/code>减去&lt;code>3&lt;/code>，即&lt;code>3&lt;/code>。因此可以说，&lt;code>s4&lt;/code>中的索引从&lt;code>0&lt;/code>到&lt;code>2&lt;/code>指向的元素对应的是&lt;code>s3&lt;/code>及其底层数组中索引从&lt;code>3&lt;/code>到&lt;code>5&lt;/code>的那 3 个元素。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/96/55/96e2c7129793ee5e73a574ef8f3ad755.png" alt="">&lt;/p>
&lt;p>（切片与数组的关系）&lt;/p>
&lt;p>再来看容量。我在前面说过，切片的容量代表了它的底层数组的长度，但这仅限于使用&lt;code>make&lt;/code>函数或者切片值字面量初始化切片的情况。&lt;/p>
&lt;p>更通用的规则是：一个切片的容量可以被看作是透过这个窗口最多可以看到的底层数组中元素的个数。&lt;/p>
&lt;p>由于&lt;code>s4&lt;/code>是通过在&lt;code>s3&lt;/code>上施加切片操作得来的，所以&lt;code>s3&lt;/code>的底层数组就是&lt;code>s4&lt;/code>的底层数组。&lt;/p>
&lt;p>又因为，在底层数组不变的情况下，切片代表的窗口可以向右扩展，直至其底层数组的末尾。&lt;/p>
&lt;p>所以，&lt;code>s4&lt;/code>的容量就是其底层数组的长度&lt;code>8&lt;/code>, 减去上述切片表达式中的那个起始索引&lt;code>3&lt;/code>，即&lt;code>5&lt;/code>。&lt;/p>
&lt;p>注意，切片代表的窗口是无法向左扩展的。也就是说，我们永远无法透过&lt;code>s4&lt;/code>看到&lt;code>s3&lt;/code>中最左边的那 3 个元素。&lt;/p>
&lt;p>最后，顺便提一下把切片的窗口向右扩展到最大的方法。对于&lt;code>s4&lt;/code>来说，切片表达式&lt;code>s4[0:cap(s4)]&lt;/code>就可以做到。我想你应该能看懂。该表达式的结果值（即一个新的切片）会是&lt;code>[]int{4, 5, 6, 7, 8}&lt;/code>，其长度和容量都是&lt;code>5&lt;/code>。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;p>&lt;strong>问题 1：怎样估算切片容量的增长？&lt;/strong>&lt;/p>
&lt;p>一旦一个切片无法容纳更多的元素，Go 语言就会想办法扩容。但它并不会改变原来的切片，而是会生成一个容量更大的切片，然后将把原有的元素和新元素一并拷贝到新切片中。在一般的情况下，你可以简单地认为新切片的容量（以下简称新容量）将会是原切片容量（以下简称原容量）的 2 倍。&lt;/p>
&lt;p>但是，当原切片的长度（以下简称原长度）大于或等于&lt;code>1024&lt;/code>时，Go 语言将会以原容量的&lt;code>1.25&lt;/code>倍作为新容量的基准（以下新容量基准）。新容量基准会被调整（不断地与&lt;code>1.25&lt;/code>相乘），直到结果不小于原长度与要追加的元素数量之和（以下简称新长度）。最终，新容量往往会比新长度大一些，当然，相等也是可能的。&lt;/p>
&lt;p>另外，如果我们一次追加的元素过多，以至于使新长度比原容量的 2 倍还要大，那么新容量就会以新长度为基准。注意，与前面那种情况一样，最终的新容量在很多时候都要比新容量基准更大一些。更多细节可参见&lt;code>runtime&lt;/code>包中 slice.go 文件里的&lt;code>growslice&lt;/code>及相关函数的具体实现。&lt;/p>
&lt;p>我把展示上述扩容策略的一些例子都放到了 demo16.go 文件中。你可以去试运行看看。&lt;/p>
&lt;p>&lt;strong>问题 2：切片的底层数组什么时候会被替换？&lt;/strong>&lt;/p>
&lt;p>确切地说，一个切片的底层数组永远不会被替换。为什么？虽然在扩容的时候 Go 语言一定会生成新的底层数组，但是它也同时生成了新的切片。&lt;/p>
&lt;p>它只是把新的切片作为了新底层数组的窗口，而没有对原切片，及其底层数组做任何改动。&lt;/p>
&lt;p>请记住，在无需扩容时，&lt;code>append&lt;/code>函数返回的是指向原底层数组的新切片，而在需要扩容时，&lt;code>append&lt;/code>函数返回的是指向新底层数组的新切片。所以，严格来讲，&amp;ldquo;扩容&amp;quot;这个词用在这里虽然形象但并不合适。不过鉴于这种称呼已经用得很广泛了，我们也没必要另找新词了。&lt;/p>
&lt;p>顺便说一下，只要新长度不会超过切片的原容量，那么使用&lt;code>append&lt;/code>函数对其追加元素的时候就不会引起扩容。这只会使紧邻切片窗口右边的（底层数组中的）元素被新的元素替换掉。你可以运行 demo17.go 文件以增强对这些知识的理解。&lt;/p>
&lt;p>&lt;strong>总结&lt;/strong>&lt;/p>
&lt;p>总结一下，我们今天一起探讨了数组和切片以及它们之间的关系。切片是基于数组的，可变长的，并且非常轻快。一个切片的容量总是固定的，而且一个切片也只会与某一个底层数组绑定在一起。&lt;/p>
&lt;p>此外，切片的容量总会是在切片长度和底层数组长度之间的某一个值，并且还与切片窗口最左边对应的元素在底层数组中的位置有关系。那两个分别用减法计算切片长度和容量的方法你一定要记住。&lt;/p>
&lt;p>另外，&lt;code>append&lt;/code>函数总会返回新的切片，而且如果新切片的容量比原切片的容量更大那么就意味着底层数组也是新的了。还有，你其实不必太在意切片&amp;quot;扩容&amp;quot;策略中的一些细节，只要能够理解它的基本规律并可以进行近似的估算就可以了。&lt;/p>
&lt;p>&lt;strong>思考题&lt;/strong>&lt;/p>
&lt;p>这里仍然是聚焦于切片的问题。&lt;/p>
&lt;ol>
&lt;li>如果有多个切片指向了同一个底层数组，那么你认为应该注意些什么？&lt;/li>
&lt;li>怎样沿用&amp;quot;扩容&amp;quot;的思想对切片进行&amp;quot;缩容&amp;rdquo;？请写出代码。&lt;/li>
&lt;/ol>
&lt;p>这两个问题都是开放性的，你需要认真思考一下。最好在动脑的同时动动手。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 08丨container包中的那些容器</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/08%E4%B8%A8container%E5%8C%85%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E5%AE%B9%E5%99%A8/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/08%E4%B8%A8container%E5%8C%85%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E5%AE%B9%E5%99%A8/</guid><description>
&lt;p>我们在上次讨论了数组和切片，当我们提到数组的时候，往往会想起链表。那么 Go 语言的链表是什么样的呢？&lt;/p>
&lt;p>Go 语言的链表实现在标准库的&lt;code>container/list&lt;/code>代码包中。这个代码包中有两个公开的程序实体&amp;mdash;&amp;mdash;&lt;code>List&lt;/code>和&lt;code>Element&lt;/code>，List 实现了一个双向链表（以下简称链表），而 Element 则代表了链表中元素的结构。&lt;/p>
&lt;p>&lt;strong>那么，我今天的问题是：可以把自己生成的&lt;code>Element&lt;/code>类型值传给链表吗？&lt;/strong>&lt;/p>
&lt;p>我们在这里用到了&lt;code>List&lt;/code>的四种方法。&lt;/p>
&lt;p>&lt;code>MoveBefore&lt;/code>方法和&lt;code>MoveAfter&lt;/code>方法，它们分别用于把给定的元素移动到另一个元素的前面和后面。&lt;/p>
&lt;p>&lt;code>MoveToFront&lt;/code>方法和&lt;code>MoveToBack&lt;/code>方法，分别用于把给定的元素移动到链表的最前端和最后端。&lt;/p>
&lt;p>在这些方法中，&amp;ldquo;给定的元素&amp;quot;都是&lt;code>*Element&lt;/code>类型的，&lt;code>*Element&lt;/code>类型是&lt;code>Element&lt;/code>类型的指针类型，&lt;code>*Element&lt;/code>的值就是元素的指针。&lt;/p>
&lt;pre>&lt;code>func (l *List) MoveBefore(e, mark *Element)
func (l *List) MoveAfter(e, mark *Element)
func (l *List) MoveToFront(e *Element)
func (l *List) MoveToBack(e *Element)
&lt;/code>&lt;/pre>
&lt;p>具体问题是，如果我们自己生成这样的值，然后把它作为&amp;quot;给定的元素&amp;quot;传给链表的方法，那么会发生什么？链表会接受它吗？&lt;/p>
&lt;p>这里，给出一个&lt;strong>典型回答&lt;/strong> ：不会接受，这些方法将不会对链表做出任何改动。因为我们自己生成的&lt;code>Element&lt;/code>值并不在链表中，所以也就谈不上&amp;quot;在链表中移动元素&amp;rdquo;。更何况链表不允许我们把自己生成的&lt;code>Element&lt;/code>值插入其中。&lt;/p>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>在&lt;code>List&lt;/code>包含的方法中，用于插入新元素的那些方法都只接受&lt;code>interface{}&lt;/code>类型的值。这些方法在内部会使用&lt;code>Element&lt;/code>值，包装接收到的新元素。&lt;/p>
&lt;p>这样做正是为了避免直接使用我们自己生成的元素，主要原因是避免链表的内部关联，遭到外界破坏，这对于链表本身以及我们这些使用者来说都是有益的。&lt;/p>
&lt;p>&lt;code>List&lt;/code>的方法还有下面这几种：&lt;/p>
&lt;p>&lt;code>Front&lt;/code>和&lt;code>Back&lt;/code>方法分别用于获取链表中最前端和最后端的元素，&lt;br>
&lt;code>InsertBefore&lt;/code>和&lt;code>InsertAfter&lt;/code>方法分别用于在指定的元素之前和之后插入新元素，&lt;code>PushFront&lt;/code>和&lt;code>PushBack&lt;/code>方法则分别用于在链表的最前端和最后端插入新元素。&lt;/p>
&lt;pre>&lt;code>func (l *List) Front() *Element
func (l *List) Back() *Element
func (l *List) InsertBefore(v interface{}, mark *Element) *Element
func (l *List) InsertAfter(v interface{}, mark *Element) *Element
func (l *List) PushFront(v interface{}) *Element
func (l *List) PushBack(v interface{}) *Element
&lt;/code>&lt;/pre>
&lt;p>这些方法都会把一个&lt;code>Element&lt;/code>值的指针作为结果返回，它们就是链表留给我们的安全&amp;quot;接口&amp;quot;。拿到这些内部元素的指针，我们就可以去调用前面提到的用于移动元素的方法了。&lt;/p>
&lt;p>&lt;strong>知识扩展&lt;/strong>&lt;/p>
&lt;p>&lt;strong>1. 问题：为什么链表可以做到开箱即用？&lt;/strong>&lt;/p>
&lt;p>&lt;code>List&lt;/code>和&lt;code>Element&lt;/code>都是结构体类型。结构体类型有一个特点，那就是它们的零值都会是拥有特定结构，但是没有任何定制化内容的值，相当于一个空壳。值中的字段也都会被分别赋予各自类型的零值。&lt;/p>
&lt;blockquote>
&lt;p>广义来讲，所谓的零值就是只做了声明，但还未做初始化的变量被给予的缺省值。每个类型的零值都会依据该类型的特性而被设定。&lt;/p>
&lt;p>比如，经过语句&lt;code>var a [2]int&lt;/code>声明的变量&lt;code>a&lt;/code>的值，将会是一个包含了两个&lt;code>0&lt;/code>的整数数组。又比如，经过语句&lt;code>var s []int&lt;/code>声明的变量&lt;code>s&lt;/code>的值将会是一个&lt;code>[]int&lt;/code>类型的、值为&lt;code>nil&lt;/code>的切片。&lt;/p>
&lt;/blockquote>
&lt;p>那么经过语句&lt;code>var l list.List&lt;/code>声明的变量&lt;code>l&lt;/code>的值将会是什么呢？[1] 这个零值将会是一个长度为&lt;code>0&lt;/code>的链表。这个链表持有的根元素也将会是一个空壳，其中只会包含缺省的内容。那这样的链表我们可以直接拿来使用吗？&lt;/p>
&lt;p>答案是，可以的。这被称为&amp;quot;开箱即用&amp;quot;。Go 语言标准库中很多结构体类型的程序实体都做到了开箱即用。这也是在编写可供别人使用的代码包（或者说程序库）时，我们推荐遵循的最佳实践之一。那么，语句&lt;code>var l list.List&lt;/code>声明的链表&lt;code>l&lt;/code>可以直接使用，这是怎么做到的呢？&lt;/p>
&lt;p>关键在于它的&amp;quot;延迟初始化&amp;quot;机制。&lt;/p>
&lt;p>所谓的&lt;strong>延迟初始化&lt;/strong>，你可以理解为把初始化操作延后，仅在实际需要的时候才进行。延迟初始化的优点在于&amp;quot;延后&amp;quot;，它可以分散初始化操作带来的计算量和存储空间消耗。&lt;/p>
&lt;p>例如，如果我们需要集中声明非常多的大容量切片的话，那么那时的 CPU 和内存空间的使用量肯定都会一个激增，并且只有设法让其中的切片及其底层数组被回收，内存使用量才会有所降低。&lt;/p>
&lt;p>如果数组是可以被延迟初始化的，那么计算量和存储空间的压力就可以被分散到实际使用它们的时候。这些数组被实际使用的时间越分散，延迟初始化带来的优势就会越明显。&lt;/p>
&lt;blockquote>
&lt;p>实际上，Go 语言的切片就起到了延迟初始化其底层数组的作用，你可以想一想为什么会这么说的理由。&lt;/p>
&lt;p>延迟初始化的缺点恰恰也在于&amp;quot;延后&amp;quot;。你可以想象一下，如果我在调用链表的每个方法的时候，它们都需要先去判断链表是否已经被初始化，那这也会是一个计算量上的浪费。在这些方法被非常频繁地调用的情况下，这种浪费的影响就开始显现了，程序的性能将会降低。&lt;/p>
&lt;/blockquote>
&lt;p>在这里的链表实现中，一些方法是无需对是否初始化做判断的。比如&lt;code>Front&lt;/code>方法和&lt;code>Back&lt;/code>方法，一旦发现链表的长度为&lt;code>0&lt;/code>, 直接返回&lt;code>nil&lt;/code>就好了。&lt;/p>
&lt;p>又比如，在用于删除元素、移动元素，以及一些用于插入元素的方法中，只要判断一下传入的元素中指向所属链表的指针，是否与当前链表的指针相等就可以了。&lt;/p>
&lt;p>如果不相等，就一定说明传入的元素不是这个链表中的，后续的操作就不用做了。反之，就一定说明这个链表已经被初始化了。&lt;/p>
&lt;p>原因在于，链表的&lt;code>PushFront&lt;/code>方法、&lt;code>PushBack&lt;/code>方法、&lt;code>PushBackList&lt;/code>方法以及&lt;code>PushFrontList&lt;/code>方法总会先判断链表的状态，并在必要时进行初始化，这就是延迟初始化。&lt;/p>
&lt;p>而且，我们在向一个空的链表中添加新元素的时候，肯定会调用这四个方法中的一个，这时新元素中指向所属链表的指针，一定会被设定为当前链表的指针。所以，指针相等是链表已经初始化的充分必要条件。&lt;/p>
&lt;p>明白了吗？&lt;code>List&lt;/code>利用了自身以及&lt;code>Element&lt;/code>在结构上的特点，巧妙地平衡了延迟初始化的优缺点，使得链表可以开箱即用，并且在性能上可以达到最优。&lt;/p>
&lt;p>&lt;strong>问题 2：&lt;code>Ring&lt;/code>与&lt;code>List&lt;/code>的区别在哪儿？&lt;/strong>&lt;/p>
&lt;p>&lt;code>container/ring&lt;/code>包中的&lt;code>Ring&lt;/code>类型实现的是一个循环链表，也就是我们俗称的环。其实&lt;code>List&lt;/code>在内部就是一个循环链表。它的根元素永远不会持有任何实际的元素值，而该元素的存在就是为了连接这个循环链表的首尾两端。&lt;/p>
&lt;p>所以也可以说，&lt;code>List&lt;/code>的零值是一个只包含了根元素，但不包含任何实际元素值的空链表。那么，既然&lt;code>Ring&lt;/code>和&lt;code>List&lt;/code>在本质上都是循环链表，那它们到底有什么不同呢？&lt;/p>
&lt;p>最主要的不同有下面几种。&lt;/p>
&lt;ol>
&lt;li>&lt;code>Ring&lt;/code>类型的数据结构仅由它自身即可代表，而&lt;code>List&lt;/code>类型则需要由它以及&lt;code>Element&lt;/code>类型联合表示。这是表示方式上的不同，也是结构复杂度上的不同。&lt;/li>
&lt;li>一个&lt;code>Ring&lt;/code>类型的值严格来讲，只代表了其所属的循环链表中的一个元素，而一个&lt;code>List&lt;/code>类型的值则代表了一个完整的链表。这是表示维度上的不同。&lt;/li>
&lt;li>在创建并初始化一个&lt;code>Ring&lt;/code>值的时候，我们可以指定它包含的元素的数量，但是对于一个&lt;code>List&lt;/code>值来说却不能这样做（也没有必要这样做）。循环链表一旦被创建，其长度是不可变的。这是两个代码包中的&lt;code>New&lt;/code>函数在功能上的不同，也是两个类型在初始化值方面的第一个不同。&lt;/li>
&lt;li>仅通过&lt;code>var r ring.Ring&lt;/code>语句声明的&lt;code>r&lt;/code>将会是一个长度为&lt;code>1&lt;/code>的循环链表，而&lt;code>List&lt;/code>类型的零值则是一个长度为&lt;code>0&lt;/code>的链表。别忘了&lt;code>List&lt;/code>中的根元素不会持有实际元素值，因此计算长度时不会包含它。这是两个类型在初始化值方面的第二个不同。&lt;/li>
&lt;li>&lt;code>Ring&lt;/code>值的&lt;code>Len&lt;/code>方法的算法复杂度是 O(N) 的，而&lt;code>List&lt;/code>值的&lt;code>Len&lt;/code>方法的算法复杂度则是 O(1) 的。这是两者在性能方面最显而易见的差别。&lt;/li>
&lt;/ol>
&lt;p>其他的不同基本上都是方法方面的了。比如，循环链表也有用于插入、移动或删除元素的方法，不过用起来都显得更抽象一些，等等。&lt;/p>
&lt;p>&lt;strong>总结&lt;/strong>&lt;/p>
&lt;p>我们今天主要讨论了&lt;code>container/list&lt;/code>包中的链表实现。我们详细讲解了链表的一些主要的使用技巧和实现特点。由于此链表实现在内部就是一个循环链表，所以我们还把它与&lt;code>container/ring&lt;/code>包中的循环链表实现做了一番比较，包括结构、初始化以及性能方面。&lt;/p>
&lt;p>&lt;strong>思考题&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;code>container/ring&lt;/code>包中的循环链表的适用场景都有哪些？&lt;/li>
&lt;li>你使用过&lt;code>container/heap&lt;/code>包中的堆吗？它的适用场景又有哪些呢？&lt;/li>
&lt;/ol>
&lt;p>在这里，我们先不求对它们的实现了如指掌，能用对、用好才是我们进阶之前的第一步。好了，感谢你的收听，我们下次再见。&lt;/p>
&lt;hr>
&lt;p>[1]：&lt;code>List&lt;/code>这个结构体类型有两个字段，一个是&lt;code>Element&lt;/code>类型的字段&lt;code>root&lt;/code>，另一个是&lt;code>int&lt;/code>类型的字段&lt;code>len&lt;/code>。顾名思义，前者代表的就是那个根元素，而后者用于存储链表的长度。注意，它们都是包级私有的，也就是说使用者无法查看和修改它们。&lt;/p>
&lt;p>像前面那样声明的&lt;code>l&lt;/code>，其字段&lt;code>root&lt;/code>和&lt;code>len&lt;/code>都会被赋予相应的零值。&lt;code>len&lt;/code>的零值是&lt;code>0&lt;/code>，正好可以表明该链表还未包含任何元素。由于&lt;code>root&lt;/code>是&lt;code>Element&lt;/code>类型的，所以它的零值就是该类型的空壳，用字面量表示的话就是&lt;code>Element{}&lt;/code>。&lt;/p>
&lt;p>&lt;code>Element&lt;/code>类型包含了几个包级私有的字段，分别用于存储前一个元素、后一个元素以及所属链表的指针值。另外还有一个名叫&lt;code>Value&lt;/code>的公开的字段，该字段的作用就是持有元素的实际值，它是&lt;code>interface{}&lt;/code>类型的。在&lt;code>Element&lt;/code>类型的零值中，这些字段的值都会是&lt;code>nil&lt;/code>。&lt;/p>
&lt;h2 id="参考阅读">参考阅读&lt;/h2>
&lt;h3 id="切片与数组的比较">切片与数组的比较&lt;/h3>
&lt;p>切片本身有着占用内存少和创建便捷等特点，但它的本质上还是数组。切片的一大好处是可以让我们通过窗口快速地定位并获取，或者修改底层数组中的元素。&lt;/p>
&lt;p>不过，当我们想删除切片中的元素的时候就没那么简单了。元素复制一般是免不了的，就算只删除一个元素，有时也会造成大量元素的移动。这时还要注意空出的元素槽位的&amp;quot;清空&amp;quot;，否则很可能会造成内存泄漏。&lt;/p>
&lt;p>另一方面，在切片被频繁&amp;quot;扩容&amp;quot;的情况下，新的底层数组会不断产生，这时内存分配的量以及元素复制的次数可能就很可观了，这肯定会对程序的性能产生负面的影响。&lt;/p>
&lt;p>尤其是当我们没有一个合理、有效的&amp;quot;缩容&amp;quot;策略的时候，旧的底层数组无法被回收，新的底层数组中也会有大量无用的元素槽位。过度的内存浪费不但会降低程序的性能，还可能会使内存溢出并导致程序崩溃。&lt;/p>
&lt;p>由此可见，正确地使用切片是多么的重要。不过，一个更重要的事实是，任何数据结构都不是银弹。不是吗？数组的自身特点和适用场景都非常鲜明，切片也是一样。它们都是 Go 语言原生的数据结构，使用起来也都很方便. 不过，你的集合类工具箱中不应该只有它们。这就是我们使用链表的原因。&lt;/p>
&lt;p>不过，对比来看，一个链表所占用的内存空间，往往要比包含相同元素的数组所占内存大得多。这是由于链表的元素并不是连续存储的，所以相邻的元素之间需要互相保存对方的指针。不但如此，每个元素还要存有它所属链表的指针。&lt;/p>
&lt;p>有了这些关联，链表的结构反倒更简单了。它只持有头部元素（或称为根元素）基本上就可以了。当然了，为了防止不必要的遍历和计算，链表的长度记录在内也是必须的。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 09丨字典的操作和约束</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/09%E4%B8%A8%E5%AD%97%E5%85%B8%E7%9A%84%E6%93%8D%E4%BD%9C%E5%92%8C%E7%BA%A6%E6%9D%9F/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/09%E4%B8%A8%E5%AD%97%E5%85%B8%E7%9A%84%E6%93%8D%E4%BD%9C%E5%92%8C%E7%BA%A6%E6%9D%9F/</guid><description>
&lt;p>至今为止，我们讲过的集合类的高级数据类型都属于针对单一元素的容器。&lt;/p>
&lt;p>它们或用连续存储，或用互存指针的方式收纳元素，这里的每个元素都代表了一个从属某一类型的独立值。&lt;/p>
&lt;p>我们今天要讲的字典（map）却不同，它能存储的不是单一值的集合，而是键值对的集合。&lt;/p>
&lt;blockquote>
&lt;p>什么是键值对？它是从英文 key-value pair 直译过来的一个词。顾名思义，一个键值对就代表了一对键和值。&lt;/p>
&lt;p>注意，一个&amp;quot;键&amp;quot;和一个&amp;quot;值&amp;quot;分别代表了一个从属于某一类型的独立值，把它们两个捆绑在一起就是一个键值对了。&lt;/p>
&lt;/blockquote>
&lt;p>在 Go 语言规范中，应该是为了避免歧义，他们将键值对换了一种称呼，叫做：&amp;ldquo;键 - 元素对&amp;rdquo;。我们也沿用这个看起来更加清晰的词来讲解。&lt;/p>
&lt;h2 id="知识前导为什么字典的键类型会受到约束">知识前导：为什么字典的键类型会受到约束？&lt;/h2>
&lt;p>Go 语言的字典类型其实是一个哈希表（hash table）的特定实现，在这个实现中，键和元素的最大不同在于，键的类型是受限的，而元素却可以是任意类型的。&lt;/p>
&lt;p>如果要探究限制的原因，我们就先要了解哈希表中最重要的一个过程：映射。&lt;/p>
&lt;p>你可以把键理解为元素的一个索引，我们可以在哈希表中通过键查找与它成对的那个元素。&lt;/p>
&lt;p>键和元素的这种对应关系，在数学里就被称为&amp;quot;映射&amp;quot;，这也是&amp;quot;map&amp;quot;这个词的本意，哈希表的映射过程就存在于对键 - 元素对的增、删、改、查的操作之中。&lt;/p>
&lt;pre>&lt;code>aMap := map[string]int{
&amp;quot;one&amp;quot;: 1,
&amp;quot;two&amp;quot;: 2,
&amp;quot;three&amp;quot;: 3,
}
k := &amp;quot;two&amp;quot;
v, ok := aMap[k]
if ok {
fmt.Printf(&amp;quot;The element of key %q: %d\n&amp;quot;, k, v)
} else {
fmt.Println(&amp;quot;Not found!&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;p>比如，我们要在哈希表中查找与某个键值对应的那个元素值，那么我们需要先把键值作为参数传给这个哈希表。&lt;/p>
&lt;p>哈希表会先用哈希函数（hash function）把键值转换为哈希值。哈希值通常是一个无符号的整数。一个哈希表会持有一定数量的桶（bucket），我们也可以叫它哈希桶，这些哈希桶会均匀地储存其所属哈希表收纳的键 - 元素对。&lt;/p>
&lt;p>因此，哈希表会先用这个键哈希值的低几位去定位到一个哈希桶，然后再去这个哈希桶中，查找这个键。&lt;/p>
&lt;p>由于键 - 元素对总是被捆绑在一起存储的，所以一旦找到了键，就一定能找到对应的元素值。随后，哈希表就会把相应的元素值作为结果返回。&lt;/p>
&lt;p>只要这个键 - 元素对存在哈希表中就一定会被查找到，因为哈希表增、改、删键 - 元素对时的映射过程，与前文所述如出一辙。&lt;/p>
&lt;p>&lt;strong>现在我们知道了，映射过程的第一步就是：把键值转换为哈希值。&lt;/strong>&lt;/p>
&lt;p>在 Go 语言的字典中，每一个键值都是由它的哈希值代表的。也就是说，字典不会独立存储任何键的值，但会独立存储它们的哈希值。&lt;/p>
&lt;p>你是不是隐约感觉到了什么？我们接着往下看。&lt;/p>
&lt;p>&lt;strong>我们今天的问题是：字典的键类型不能是哪些类型？&lt;/strong>&lt;/p>
&lt;p>这个问题你可以在 Go 语言规范中找到答案，但却没那么简单。它的典型回答是：Go 语言字典的键类型不可以是函数类型、字典类型和切片类型。&lt;/p>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>我们来解析一下这个问题。&lt;/p>
&lt;p>Go 语言规范规定，在键类型的值之间必须可以施加操作符&lt;code>==&lt;/code>和&lt;code>!=&lt;/code>。换句话说，键类型的值必须要支持判等操作。由于函数类型、字典类型和切片类型的值并不支持判等操作，所以字典的键类型不能是这些类型。&lt;/p>
&lt;p>另外，如果键的类型是接口类型的，那么键值的实际类型也不能是上述三种类型，否则在程序运行过程中会引发 panic（即运行时恐慌）。&lt;/p>
&lt;p>我们举个例子：&lt;/p>
&lt;pre>&lt;code>var badMap2 = map[interface{}]int{
&amp;quot;1&amp;quot;: 1,
[]int{2}: 2, // 这里会引发 panic。
3: 3,
}
&lt;/code>&lt;/pre>
&lt;p>这里的变量&lt;code>badMap2&lt;/code>的类型是键类型为&lt;code>interface{}&lt;/code>、值类型为&lt;code>int&lt;/code>的字典类型。这样声明并不会引起什么错误。或者说，我通过这样的声明躲过了 Go 语言编译器的检查。&lt;/p>
&lt;p>注意，我用字面量在声明该字典的同时对它进行了初始化，使它包含了三个键 - 元素对。其中第二个键 - 元素对的键值是&lt;code>[]int{2}&lt;/code>，元素值是&lt;code>2&lt;/code>。这样的键值也不会让 Go 语言编译器报错，因为从语法上说，这样做是可以的。&lt;/p>
&lt;p>但是，当我们运行这段代码的时候，Go 语言的运行时（runtime）系统就会发现这里的问题，它会抛出一个 panic，并把根源指向字面量中定义第二个键 - 元素对的那一行。我们越晚发现问题，修正问题的成本就会越高，所以最好不要把字典的键类型设定为任何接口类型。如果非要这么做，请一定确保代码在可控的范围之内。&lt;/p>
&lt;p>还要注意，如果键的类型是数组类型，那么还要确保该类型的元素类型不是函数类型、字典类型或切片类型。&lt;/p>
&lt;p>比如，由于类型&lt;code>[1][]string&lt;/code>的元素类型是&lt;code>[]string&lt;/code>，所以它就不能作为字典类型的键类型。另外，如果键的类型是结构体类型，那么还要保证其中字段的类型的合法性。无论不合法的类型被埋藏得有多深，比如&lt;code>map[[1][2][3][]string]int&lt;/code>，Go 语言编译器都会把它揪出来。&lt;/p>
&lt;p>你可能会有疑问，为什么键类型的值必须支持判等操作？我在前面说过，Go 语言一旦定位到了某一个哈希桶，那么就会试图在这个桶中查找键值。具体是怎么找的呢？&lt;/p>
&lt;p>首先，每个哈希桶都会把自己包含的所有键的哈希值存起来。Go 语言会用被查找键的哈希值与这些哈希值逐个对比，看看是否有相等的。如果一个相等的都没有，那么就说明这个桶中没有要查找的键值，这时 Go 语言就会立刻返回结果了。&lt;/p>
&lt;p>如果有相等的，那就再用键值本身去对比一次。为什么还要对比？原因是，不同值的哈希值是可能相同的。这有个术语，叫做&amp;quot;哈希碰撞&amp;quot;。&lt;/p>
&lt;p>所以，即使哈希值一样，键值也不一定一样。如果键类型的值之间无法判断相等，那么此时这个映射的过程就没办法继续下去了。最后，只有键的哈希值和键值都相等，才能说明查找到了匹配的键 - 元素对。&lt;/p>
&lt;p>以上内容涉及的示例都在 demo18.go 中。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;p>&lt;strong>问题 1：应该优先考虑哪些类型作为字典的键类型？&lt;/strong>&lt;/p>
&lt;p>你现在已经清楚了，在 Go 语言中，有些类型的值是支持判等的，有些是不支持的。那么在这些值支持判等的类型当中，哪些更适合作为字典的键类型呢？&lt;/p>
&lt;p>这里先抛开我们使用字典时的上下文，只从性能的角度看。在前文所述的映射过程中，&amp;ldquo;把键值转换为哈希值&amp;quot;以及&amp;quot;把要查找的键值与哈希桶中的键值做对比&amp;rdquo;， 明显是两个重要且比较耗时的操作。&lt;/p>
&lt;p>因此，可以说，&lt;strong>求哈希和判等操作的速度越快，对应的类型就越适合作为键类型。&lt;/strong>&lt;/p>
&lt;p>对于所有的基本类型、指针类型，以及数组类型、结构体类型和接口类型，Go 语言都有一套算法与之对应。这套算法中就包含了哈希和判等。以求哈希的操作为例，宽度越小的类型速度通常越快。对于布尔类型、整数类型、浮点数类型、复数类型和指针类型来说都是如此。对于字符串类型，由于它的宽度是不定的，所以要看它的值的具体长度，长度越短求哈希越快。&lt;/p>
&lt;p>类型的宽度是指它的单个值需要占用的字节数。比如，&lt;code>bool&lt;/code>、&lt;code>int8&lt;/code>和&lt;code>uint8&lt;/code>类型的一个值需要占用的字节数都是&lt;code>1&lt;/code>，因此这些类型的宽度就都是&lt;code>1&lt;/code>。&lt;/p>
&lt;p>以上说的都是基本类型，再来看高级类型。对数组类型的值求哈希实际上是依次求得它的每个元素的哈希值并进行合并，所以速度就取决于它的元素类型以及它的长度。细则同上。&lt;/p>
&lt;p>与之类似，对结构体类型的值求哈希实际上就是对它的所有字段值求哈希并进行合并，所以关键在于它的各个字段的类型以及字段的数量。而对于接口类型，具体的哈希算法，则由值的实际类型决定。&lt;/p>
&lt;p>我不建议你使用这些高级数据类型作为字典的键类型，不仅仅是因为对它们的值求哈希，以及判等的速度较慢，更是因为在它们的值中存在变数。&lt;/p>
&lt;p>比如，对一个数组来说，我可以任意改变其中的元素值，但在变化前后，它却代表了两个不同的键值。&lt;/p>
&lt;p>对于结构体类型的值情况可能会好一些，因为如果我可以控制其中各字段的访问权限的话，就可以阻止外界修改它了。把接口类型作为字典的键类型最危险。&lt;/p>
&lt;p>还记得吗？如果在这种情况下 Go 运行时系统发现某个键值不支持判等操作，那么就会立即抛出一个 panic。在最坏的情况下，这足以使程序崩溃。&lt;/p>
&lt;p>那么，在那些基本类型中应该优先选择哪一个？答案是，优先选用数值类型和指针类型，通常情况下类型的宽度越小越好。如果非要选择字符串类型的话，最好对键值的长度进行额外的约束。&lt;/p>
&lt;p>那什么是不通常的情况？笼统地说，Go 语言有时会对字典的增、删、改、查操作做一些优化。&lt;/p>
&lt;p>比如，在字典的键类型为字符串类型的情况下；又比如，在字典的键类型为宽度为&lt;code>4&lt;/code>或&lt;code>8&lt;/code>的整数类型的情况下。&lt;/p>
&lt;p>&lt;strong>问题 2：在值为&lt;code>nil&lt;/code>的字典上执行读操作会成功吗，那写操作呢？&lt;/strong>&lt;/p>
&lt;p>好了，为了避免烧脑太久，我们再来说一个简单些的问题。由于字典是引用类型，所以当我们仅声明而不初始化一个字典类型的变量的时候，它的值会是&lt;code>nil&lt;/code>。&lt;/p>
&lt;p>在这样一个变量上试图通过键值获取对应的元素值，或者添加键 - 元素对，会成功吗？这个问题虽然简单，但却是我们必须铭记于心的，因为这涉及程序运行时的稳定性。&lt;/p>
&lt;p>我来说一下答案。除了添加键 - 元素对，我们在一个值为&lt;code>nil&lt;/code>的字典上做任何操作都不会引起错误。当我们试图在一个值为&lt;code>nil&lt;/code>的字典中添加键 - 元素对的时候，Go 语言的运行时系统就会立即抛出一个 panic。你可以运行一下 demo19.go 文件试试看。&lt;/p>
&lt;p>&lt;strong>总结&lt;/strong>&lt;/p>
&lt;p>我们这次主要讨论了与字典类型有关的，一些容易让人困惑的问题。比如，为什么字典的键类型会受到约束？又比如，我们通常应该选取什么样的类型作为字典的键类型。&lt;/p>
&lt;p>我以 Go 语言规范为起始，并以 Go 语言源码为依据回答了这些问题。认真看了这篇文章之后，你应该对字典中的映射过程有了一定的理解。&lt;/p>
&lt;p>另外，对于 Go 语言在那些合法的键类型上所做的求哈希和判等的操作，你也应该有所了解了。&lt;/p>
&lt;p>再次强调，永远要注意那些可能引发 panic 的操作，比如像一个值为&lt;code>nil&lt;/code>的字典添加键 - 元素对。&lt;/p>
&lt;p>&lt;strong>思考题&lt;/strong>&lt;/p>
&lt;p>今天的思考题是关于并发安全性的。更具体地说，在同一时间段内但在不同的 goroutine（或者说 go 程）中对同一个值进行操作是否是安全的。这里的安全是指，该值不会因这些操作而产生混乱，或其它不可预知的问题。&lt;/p>
&lt;p>具体的思考题是：字典类型的值是并发安全的吗？如果不是，那么在我们只在字典上添加或删除键 - 元素对的情况下，依然不安全吗？感谢你的收听，我们下期再见。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 10丨通道的基本操作</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/10%E4%B8%A8%E9%80%9A%E9%81%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/10%E4%B8%A8%E9%80%9A%E9%81%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid><description>
&lt;p>作为 Go 语言最有特色的数据类型，通道（channel）完全可以与 goroutine（也可称为 go 程）并驾齐驱，共同代表 Go 语言独有的并发编程模式和编程哲学。&lt;/p>
&lt;blockquote>
&lt;p>Don&amp;rsquo;t communicate by sharing memory; share memory by communicating. （不要通过共享内存来通信，而应该通过通信来共享内存。）&lt;/p>
&lt;/blockquote>
&lt;p>这是作为 Go 语言的主要创造者之一的 Rob Pike 的至理名言，这也充分体现了 Go 语言最重要的编程理念。而通道类型恰恰是后半句话的完美实现，我们可以利用通道在多个 goroutine 之间传递数据。&lt;/p>
&lt;h2 id="前导内容通道的基础知识">前导内容：通道的基础知识&lt;/h2>
&lt;p>通道类型的值本身就是并发安全的，这也是 Go 语言自带的、唯一一个可以满足并发安全性的类型。它使用起来十分简单，并不会徒增我们的心智负担。&lt;/p>
&lt;p>在声明并初始化一个通道的时候，我们需要用到 Go 语言的内建函数&lt;code>make&lt;/code>。就像用&lt;code>make&lt;/code>初始化切片那样，我们传给这个函数的第一个参数应该是代表了通道的具体类型的类型字面量。&lt;/p>
&lt;p>在声明一个通道类型变量的时候，我们首先要确定该通道类型的元素类型，这决定了我们可以通过这个通道传递什么类型的数据。&lt;/p>
&lt;p>比如，类型字面量&lt;code>chan int&lt;/code>，其中的&lt;code>chan&lt;/code>是表示通道类型的关键字，而&lt;code>int&lt;/code>则说明了该通道类型的元素类型。又比如，&lt;code>chan string&lt;/code>代表了一个元素类型为&lt;code>string&lt;/code>的通道类型。&lt;/p>
&lt;p>在初始化通道的时候，&lt;code>make&lt;/code>函数除了必须接收这样的类型字面量作为参数，还可以接收一个&lt;code>int&lt;/code>类型的参数。&lt;/p>
&lt;p>后者是可选的，用于表示该通道的容量。所谓通道的容量，就是指通道最多可以缓存多少个元素值。由此，虽然这个参数是&lt;code>int&lt;/code>类型的，但是它是不能小于&lt;code>0&lt;/code>的。&lt;/p>
&lt;p>当容量为&lt;code>0&lt;/code>时，我们可以称通道为非缓冲通道，也就是不带缓冲的通道。而当容量大于&lt;code>0&lt;/code>时，我们可以称为缓冲通道，也就是带有缓冲的通道。非缓冲通道和缓冲通道有着不同的数据传递方式，这个我在后面会讲到。&lt;/p>
&lt;p>&lt;strong>一个通道相当于一个先进先出（FIFO）的队列。也就是说，通道中的各个元素值都是严格地按照发送的顺序排列的，先被发送通道的元素值一定会先被接收。元素值的发送和接收都需要用到操作符&lt;code>&amp;lt;-&lt;/code>。我们也可以叫它接送操作符。一个左尖括号紧接着一个减号形象地代表了元素值的传输方向。&lt;/strong>&lt;/p>
&lt;pre>&lt;code>package main
import &amp;quot;fmt&amp;quot;
func main() {
ch1 := make(chan int, 3)
ch1 &amp;lt;- 2
ch1 &amp;lt;- 1
ch1 &amp;lt;- 3
elem1 := &amp;lt;-ch1
fmt.Printf(&amp;quot;The first element received from channel ch1: %v\n&amp;quot;,
elem1)
}
&lt;/code>&lt;/pre>
&lt;p>在 demo20.go 文件中，我声明并初始化了一个元素类型为&lt;code>int&lt;/code>、容量为&lt;code>3&lt;/code>的通道&lt;code>ch1&lt;/code>，并用三条语句，向该通道先后发送了三个元素值&lt;code>2&lt;/code>、&lt;code>1&lt;/code>和&lt;code>3&lt;/code>。&lt;/p>
&lt;p>这里的语句需要这样写：依次敲入通道变量的名称（比如&lt;code>ch1&lt;/code>）、接送操作符&lt;code>&amp;lt;-&lt;/code>以及想要发送的元素值（比如&lt;code>2&lt;/code>），并且这三者之间最好用空格进行分割。&lt;/p>
&lt;p>这显然表达了&amp;quot;这个元素值将被发送该通道&amp;quot;这个语义。由于该通道的容量为 3，所以，我可以在通道不包含任何元素值的时候，连续地向该通道发送三个值，此时这三个值都会被缓存在通道之中。&lt;/p>
&lt;p>当我们需要从通道接收元素值的时候，同样要用接送操作符&lt;code>&amp;lt;-&lt;/code>，只不过，这时需要把它写在变量名的左边，用于表达&amp;quot;要从该通道接收一个元素值&amp;quot;的语义。&lt;/p>
&lt;p>比如：&lt;code>&amp;lt;-ch1&lt;/code>，这也可以被叫做接收表达式。在一般情况下，接收表达式的结果将会是通道中的一个元素值。&lt;/p>
&lt;p>如果我们需要把如此得来的元素值存起来，那么在接收表达式的左边就需要依次添加赋值符号（&lt;code>=&lt;/code>或&lt;code>:=&lt;/code>）和用于存值的变量的名字。因此，语句&lt;code>elem1 := &amp;lt;-ch1&lt;/code>会将最先进入&lt;code>ch1&lt;/code>的元素&lt;code>2&lt;/code>接收来并存入变量&lt;code>elem1&lt;/code>。&lt;/p>
&lt;p>现在我们来看一道与此有关的题目。&lt;strong>今天的问题是：对通道的发送和接收操作都有哪些基本的特性？&lt;/strong>&lt;/p>
&lt;p>这个问题的背后隐藏着很多的知识点，&lt;strong>我们来看一下典型回答&lt;/strong>。&lt;/p>
&lt;p>它们的基本特性如下。&lt;/p>
&lt;ol>
&lt;li>对于同一个通道，发送操作之间是互斥的，接收操作之间也是互斥的。&lt;/li>
&lt;li>发送操作和接收操作中对元素值的处理都是不可分割的。&lt;/li>
&lt;li>发送操作在完全完成之前会被阻塞。接收操作也是如此。&lt;/li>
&lt;/ol>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>&lt;strong>我们先来看第一个基本特性。&lt;/strong> 在同一时刻，Go 语言的运行时系统（以下简称运行时系统）只会执行对同一个通道的任意个发送操作中的某一个。&lt;/p>
&lt;p>直到这个元素值被完全复制进该通道之后，其他针对该通道的发送操作才可能被执行。&lt;/p>
&lt;p>类似的，在同一时刻，运行时系统也只会执行，对同一个通道的任意个接收操作中的某一个。&lt;/p>
&lt;p>直到这个元素值完全被移出该通道之后，其他针对该通道的接收操作才可能被执行。即使这些操作是并发执行的也是如此。&lt;/p>
&lt;p>这里所谓的并发执行，你可以这样认为，多个代码块分别在不同的 goroutine 之中，并有机会在同一个时间段内被执行。&lt;/p>
&lt;p>另外，对于通道中的同一个元素值来说，发送操作和接收操作之间也是互斥的。例如，虽然会出现，正在被复制进通道但还未复制完成的元素值，但是这时它绝不会被想接收它的一方看到和取走。&lt;/p>
&lt;p>&lt;strong>这里要注意的一个细节是，元素值从外界进入通道时会被复制。更具体地说，进入通道的并不是在接收操作符右边的那个元素值，而是它的副本。&lt;/strong>&lt;/p>
&lt;p>另一方面，元素值从通道进入外界时会被移动。这个移动操作实际上包含了两步，第一步是生成正在通道中的这个元素值的副本，并准备给到接收方，第二步是删除在通道中的这个元素值。&lt;/p>
&lt;p>&lt;strong>顺着这个细节再来看第二个基本特性。&lt;/strong> 这里的&amp;quot;不可分割&amp;quot;的意思是，它们处理元素值时都是一气呵成的，绝不会被打断。&lt;/p>
&lt;p>例如，发送操作要么还没复制元素值，要么已经复制完毕，绝不会出现只复制了一部分的情况。&lt;/p>
&lt;p>又例如，接收操作在准备好元素值的副本之后，一定会删除掉通道中的原值，绝不会出现通道中仍有残留的情况。&lt;/p>
&lt;p>这既是为了保证通道中元素值的完整性，也是为了保证通道操作的唯一性。对于通道中的同一个元素值来说，它只可能是某一个发送操作放入的，同时也只可能被某一个接收操作取出。&lt;/p>
&lt;p>&lt;strong>再来说第三个基本特性。&lt;/strong> 一般情况下，发送操作包括了&amp;quot;复制元素值&amp;quot;和&amp;quot;放置副本到通道内部&amp;quot;这两个步骤。&lt;/p>
&lt;p>在这两个步骤完全完成之前，发起这个发送操作的那句代码会一直阻塞在那里。也就是说，在它之后的代码不会有执行的机会，直到这句代码的阻塞解除。&lt;/p>
&lt;p>更细致地说，在通道完成发送操作之后，运行时系统会通知这句代码所在的 goroutine，以使它去争取继续运行代码的机会。&lt;/p>
&lt;p>另外，接收操作通常包含了&amp;quot;复制通道内的元素值&amp;quot;&amp;ldquo;放置副本到接收方&amp;quot;&amp;ldquo;删掉原值&amp;quot;三个步骤。&lt;/p>
&lt;p>在所有这些步骤完全完成之前，发起该操作的代码也会一直阻塞，直到该代码所在的 goroutine 收到了运行时系统的通知并重新获得运行机会为止。&lt;/p>
&lt;p>说到这里，你可能已经感觉到，&lt;strong>如此阻塞代码其实就是为了实现操作的互斥和元素值的完整。&lt;/strong>&lt;/p>
&lt;p>下面我来说一个关于通道操作阻塞的问题。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;p>&lt;strong>问题 1：发送操作和接收操作在什么时候可能被长时间的阻塞？&lt;/strong>&lt;/p>
&lt;p>先说针对&lt;strong>缓冲通道&lt;/strong>的情况。如果通道已满，那么对它的所有发送操作都会被阻塞，直到通道中有元素值被接收走。&lt;/p>
&lt;p>这时，通道会优先通知最早因此而等待的、那个发送操作所在的 goroutine，后者会再次执行发送操作。&lt;/p>
&lt;p>由于发送操作在这种情况下被阻塞后，它们所在的 goroutine 会顺序地进入通道内部的发送等待队列，所以通知的顺序总是公平的。&lt;/p>
&lt;p>相对的，如果通道已空，那么对它的所有接收操作都会被阻塞，直到通道中有新的元素值出现。这时，通道会通知最早等待的那个接收操作所在的 goroutine，并使它再次执行接收操作。&lt;/p>
&lt;p>因此而等待的、所有接收操作所在的 goroutine，都会按照先后顺序被放入通道内部的接收等待队列。&lt;/p>
&lt;p>对于&lt;strong>非缓冲通道&lt;/strong>，情况要简单一些。无论是发送操作还是接收操作，一开始执行就会被阻塞，直到配对的操作也开始执行，才会继续传递。由此可见，非缓冲通道是在用同步的方式传递数据。也就是说，只有收发双方对接上了，数据才会被传递。&lt;/p>
&lt;p>并且，数据是直接从发送方复制到接收方的，中间并不会用非缓冲通道做中转。相比之下，缓冲通道则在用异步的方式传递数据。&lt;/p>
&lt;p>在大多数情况下，缓冲通道会作为收发双方的中间件。正如前文所述，元素值会先从发送方复制到缓冲通道，之后再由缓冲通道复制给接收方。&lt;/p>
&lt;p>但是，当发送操作在执行的时候发现空的通道中，正好有等待的接收操作，那么它会直接把元素值复制给接收方。&lt;/p>
&lt;p>以上说的都是在正确使用通道的前提下会发生的事情。下面我特别说明一下，由于错误使用通道而造成的阻塞。&lt;/p>
&lt;p>对于值为&lt;code>nil&lt;/code>的通道，不论它的具体类型是什么，对它的发送操作和接收操作都会永久地处于阻塞状态。它们所属的 goroutine 中的任何代码，都不再会被执行。&lt;/p>
&lt;p>注意，由于通道类型是引用类型，所以它的零值就是&lt;code>nil&lt;/code>。换句话说，当我们只声明该类型的变量但没有用&lt;code>make&lt;/code>函数对它进行初始化时，该变量的值就会是&lt;code>nil&lt;/code>。我们一定不要忘记初始化通道！&lt;/p>
&lt;p>你可以去看一下 demo21.go，我在里面用代码罗列了一下会造成阻塞的几种情况。&lt;/p>
&lt;p>&lt;strong>问题 2：发送操作和接收操作在什么时候会引发 panic？&lt;/strong>&lt;/p>
&lt;p>对于一个已初始化，但并未关闭的通道来说，收发操作一定不会引发 panic。但是通道一旦关闭，再对它进行发送操作，就会引发 panic。&lt;/p>
&lt;p>另外，如果我们试图关闭一个已经关闭了的通道，也会引发 panic。注意，接收操作是可以感知到通道的关闭的，并能够安全退出。&lt;/p>
&lt;p>更具体地说，当我们把接收表达式的结果同时赋给两个变量时，第二个变量的类型就是一定&lt;code>bool&lt;/code>类型。它的值如果为&lt;code>false&lt;/code>就说明通道已经关闭，并且再没有元素值可取了。&lt;/p>
&lt;p>注意，如果通道关闭时，里面还有元素值未被取出，那么接收表达式的第一个结果，仍会是通道中的某一个元素值，而第二个结果值一定会是&lt;code>true&lt;/code>。&lt;/p>
&lt;p>因此，通过接收表达式的第二个结果值，来判断通道是否关闭是可能有延时的。&lt;/p>
&lt;p>由于通道的收发操作有上述特性，所以除非有特殊的保障措施，我们千万不要让接收方关闭通道，而应当让发送方做这件事。这在 demo22.go 中有一个简单的模式可供参考。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>今天我们讲到了通道的一些常规操作，包括初始化、发送、接收和关闭。通道类型是 Go 语言特有的，所以你一开始肯定会感到陌生，其中的一些规则和奥妙还需要你铭记于心，并细心体会。&lt;/p>
&lt;p>首先是在初始化通道时设定其容量的意义，这有时会让通道拥有不同的行为模式。对通道的发送操作和接收操作都有哪些基本特性，也是我们必须清楚的。&lt;/p>
&lt;p>这涉及了它们什么时候会互斥，什么时候会造成阻塞，什么时候会引起 panic，以及它们收发元素值的顺序是怎样的，它们是怎样保证元素值的完整性的，元素值通常会被复制几次，等等。&lt;/p>
&lt;p>最后别忘了，通道也是 Go 语言的并发编程模式中重要的一员。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>我希望你能通过试验获得下述问题的答案。&lt;/p>
&lt;ol>
&lt;li>通道的长度代表着什么？它在什么时候会通道的容量相同？&lt;/li>
&lt;li>元素值在经过通道传递时会被复制，那么这个复制是浅表复制还是深层复制呢？&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 11丨通道的高级玩法</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/11%E4%B8%A8%E9%80%9A%E9%81%93%E7%9A%84%E9%AB%98%E7%BA%A7%E7%8E%A9%E6%B3%95/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/11%E4%B8%A8%E9%80%9A%E9%81%93%E7%9A%84%E9%AB%98%E7%BA%A7%E7%8E%A9%E6%B3%95/</guid><description>
&lt;p>我们已经讨论过了通道的基本操作以及背后的规则。今天，我再来讲讲通道的高级玩法。&lt;/p>
&lt;p>首先来说说单向通道。我们在说&amp;quot;通道&amp;quot;的时候指的都是双向通道，即：既可以发也可以收的通道。&lt;/p>
&lt;p>所谓单向通道就是，只能发不能收，或者只能收不能发的通道。一个通道是双向的，还是单向的是由它的类型字面量体现的。&lt;/p>
&lt;p>还记得我们在上篇文章中说过的接收操作符&lt;code>&amp;lt;-&lt;/code>吗？如果我们把它用在通道的类型字面量中，那么它代表的就不是&amp;quot;发送&amp;quot;或&amp;quot;接收&amp;quot;的动作了，而是表示通道的方向。&lt;/p>
&lt;p>比如：&lt;/p>
&lt;pre>&lt;code>var uselessChan = make(chan&amp;lt;- int, 1)
&lt;/code>&lt;/pre>
&lt;p>我声明并初始化了一个名叫&lt;code>uselessChan&lt;/code>的变量。这个变量的类型是&lt;code>chan&amp;lt;- int&lt;/code>，容量是&lt;code>1&lt;/code>。&lt;/p>
&lt;p>请注意紧挨在关键字&lt;code>chan&lt;/code>右边的那个&lt;code>&amp;lt;-&lt;/code>，这表示了这个通道是单向的，并且只能发而不能收。&lt;/p>
&lt;p>类似的，如果这个操作符紧挨在&lt;code>chan&lt;/code>的左边，那么就说明该通道只能收不能发。所以，前者可以被简称为发送通道，后者可以被简称为接收通道。&lt;/p>
&lt;p>注意，与发送操作和接收操作对应，这里的&amp;quot;发&amp;quot;和&amp;quot;收&amp;quot;都是站在操作通道的代码的角度上说的。&lt;/p>
&lt;p>从上述变量的名字上你也能猜到，这样的通道是没用的。通道就是为了传递数据而存在的，声明一个只有一端（发送端或者接收端）能用的通道没有任何意义。那么，单向通道的用途究竟在哪儿呢？&lt;/p>
&lt;p>&lt;strong>问题：单向通道有什么应用价值？&lt;/strong>&lt;/p>
&lt;p>你可以先自己想想，然后再接着往下看。&lt;/p>
&lt;p>&lt;strong>典型回答&lt;/strong>&lt;/p>
&lt;p>概括地说，单向通道最主要的用途就是约束其他代码的行为。&lt;/p>
&lt;p>&lt;strong>问题解析&lt;/strong>&lt;/p>
&lt;p>这需要从两个方面讲，都跟函数的声明有些关系。先来看下面的代码：&lt;/p>
&lt;pre>&lt;code>func SendInt(ch chan&amp;lt;- int) {
ch &amp;lt;- rand.Intn(1000)
}
&lt;/code>&lt;/pre>
&lt;p>我用&lt;code>func&lt;/code>关键字声明了一个叫做&lt;code>SendInt&lt;/code>的函数。这个函数只接受一个&lt;code>chan&amp;lt;- int&lt;/code>类型的参数。在这个函数中的代码只能向参数&lt;code>ch&lt;/code>发送元素值，而不能从它那里接收元素值。这就起到了约束函数行为的作用。&lt;/p>
&lt;p>你可能会问，我自己写的函数自己肯定能确定操作通道的方式，为什么还要再约束？好吧，这个例子可能过于简单了。在实际场景中，这种约束一般会出现在接口类型声明中的某个方法定义上。请看这个叫&lt;code>Notifier&lt;/code>的接口类型声明：&lt;/p>
&lt;pre>&lt;code>type Notifier interface {
SendInt(ch chan&amp;lt;- int)
}
&lt;/code>&lt;/pre>
&lt;p>在接口类型声明的花括号中，每一行都代表着一个方法的定义。接口中的方法定义与函数声明很类似，但是只包含了方法名称、参数列表和结果列表。&lt;/p>
&lt;p>一个类型如果想成为一个接口类型的实现类型，那么就必须实现这个接口中定义的所有方法。因此，如果我们在某个方法的定义中使用了单向通道类型，那么就相当于在对它的所有实现做出约束。&lt;/p>
&lt;p>在这里，&lt;code>Notifier&lt;/code>接口中的&lt;code>SendInt&lt;/code>方法只会接受一个发送通道作为参数，所以，在该接口的所有实现类型中的&lt;code>SendInt&lt;/code>方法都会受到限制。这种约束方式还是很有用的，尤其是在我们编写模板代码或者可扩展的程序库的时候。&lt;/p>
&lt;p>顺便说一下，我们在调用&lt;code>SendInt&lt;/code>函数的时候，只需要把一个元素类型匹配的双向通道传给它就行了，没必要用发送通道，因为 Go 语言在这种情况下会自动地把双向通道转换为函数所需的单向通道。&lt;/p>
&lt;pre>&lt;code>intChan1 := make(chan int, 3)
SendInt(intChan1)
&lt;/code>&lt;/pre>
&lt;p>在另一个方面，我们还可以在函数声明的结果列表中使用单向通道。如下所示：&lt;/p>
&lt;pre>&lt;code>func getIntChan() &amp;lt;-chan int {
num := 5
ch := make(chan int, num)
for i := 0; i &amp;lt; num; i++ {
ch &amp;lt;- i
}
close(ch)
return ch
}
&lt;/code>&lt;/pre>
&lt;p>函数&lt;code>getIntChan&lt;/code>会返回一个&lt;code>&amp;lt;-chan int&lt;/code>类型的通道，这就意味着得到该通道的程序，只能从通道中接收元素值。这实际上就是对函数调用方的一种约束了。&lt;/p>
&lt;p>另外，我们在 Go 语言中还可以声明函数类型，如果我们在函数类型中使用了单向通道，那么就相等于在约束所有实现了这个函数类型的函数。&lt;/p>
&lt;p>我们再顺便看一下调用&lt;code>getIntChan&lt;/code>的代码：&lt;/p>
&lt;pre>&lt;code>intChan2 := getIntChan()
for elem := range intChan2 {
fmt.Printf(&amp;quot;The element in intChan2: %v\n&amp;quot;, elem)
}
&lt;/code>&lt;/pre>
&lt;p>我把调用&lt;code>getIntChan&lt;/code>得到的结果值赋给了变量&lt;code>intChan2&lt;/code>，然后用&lt;code>for&lt;/code>语句循环地取出了该通道中的所有元素值，并打印出来。&lt;/p>
&lt;p>这里的&lt;code>for&lt;/code>语句也可以被称为带有&lt;code>range&lt;/code>子句的&lt;code>for&lt;/code>语句。它的用法我在后面讲&lt;code>for&lt;/code>语句的时候专门说明。现在你只需要知道关于它的三件事。&lt;/p>
&lt;ul>
&lt;li>一、这样一条&lt;code>for&lt;/code>语句会不断地尝试从&lt;code>intChan2&lt;/code>种取出元素值，即使&lt;code>intChan2&lt;/code>被关闭，它也会在取出所有剩余的元素值之后再结束执行。&lt;/li>
&lt;li>二、当&lt;code>intChan2&lt;/code>中没有元素值时，它会被阻塞在有&lt;code>for&lt;/code>关键字的那一行，直到有新的元素值可取。&lt;/li>
&lt;li>三、假设&lt;code>intChan2&lt;/code>的值为&lt;code>nil&lt;/code>，那么它会被永远阻塞在有&lt;code>for&lt;/code>关键字的那一行。&lt;/li>
&lt;/ul>
&lt;p>这就是带&lt;code>range&lt;/code>子句的&lt;code>for&lt;/code>语句与通道的联用方式。不过，它是一种用途比较广泛的语句，还可以被用来从其他一些类型的值中获取元素。除此之外，Go 语言还有一种专门为了操作通道而存在的语句：&lt;code>select&lt;/code>语句。&lt;/p>
&lt;p>&lt;strong>知识扩展&lt;/strong>&lt;/p>
&lt;p>&lt;strong>问题 1：&lt;code>select&lt;/code>语句与通道怎样联用，应该注意些什么？&lt;/strong>&lt;/p>
&lt;p>&lt;code>select&lt;/code>语句只能与通道联用，它一般由若干个分支组成。每次执行这种语句的时候，一般只有一个分支中的代码会被运行。&lt;/p>
&lt;p>&lt;code>select&lt;/code>语句的分支分为两种，一种叫做候选分支，另一种叫做默认分支。候选分支总是以关键字&lt;code>case&lt;/code>开头，后跟一个&lt;code>case&lt;/code>表达式和一个冒号，然后我们可以从下一行开始写入当分支被选中时需要执行的语句。&lt;/p>
&lt;p>默认分支其实就是 default case，因为，当且仅当没有候选分支被选中时它才会被执行，所以它以关键字&lt;code>default&lt;/code>开头并直接后跟一个冒号。同样的，我们可以在&lt;code>default:&lt;/code>的下一行写入要执行的语句。&lt;/p>
&lt;p>由于&lt;code>select&lt;/code>语句是专为通道而设计的，所以每个&lt;code>case&lt;/code>表达式中都只能包含操作通道的表达式，比如接收表达式。&lt;/p>
&lt;p>当然，如果我们需要把接收表达式的结果赋给变量的话，还可以把这里写成赋值语句或者短变量声明。下面展示一个简单的例子。&lt;/p>
&lt;pre>&lt;code>// 准备好几个通道。
intChannels := [3]chan int{
make(chan int, 1),
make(chan int, 1),
make(chan int, 1),
}
// 随机选择一个通道，并向它发送元素值。
index := rand.Intn(3)
fmt.Printf(&amp;quot;The index: %d\n&amp;quot;, index)
intChannels[index] &amp;lt;- index
// 哪一个通道中有可取的元素值，哪个对应的分支就会被执行。
select {
case &amp;lt;-intChannels[0]:
fmt.Println(&amp;quot;The first candidate case is selected.&amp;quot;)
case &amp;lt;-intChannels[1]:
fmt.Println(&amp;quot;The second candidate case is selected.&amp;quot;)
case elem := &amp;lt;-intChannels[2]:
fmt.Printf(&amp;quot;The third candidate case is selected, the element is %d.\n&amp;quot;, elem)
default:
fmt.Println(&amp;quot;No candidate case is selected!&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;p>我先准备好了三个类型为&lt;code>chan int&lt;/code>、容量为&lt;code>1&lt;/code>的通道，并把它们存入了一个叫做&lt;code>intChannels&lt;/code>的数组。&lt;/p>
&lt;p>然后，我随机选择一个范围在 [0, 2] 的整数，把它作为索引在上述数组中选择一个通道，并向其中发送一个元素值。&lt;/p>
&lt;p>最后，我用一个包含了三个候选分支的&lt;code>select&lt;/code>语句，分别尝试从上述三个通道中接收元素值，哪一个通道中有值，哪一个对应的候选分支就会被执行。后面还有一个默认分支，不过在这里它是不可能被选中的。&lt;/p>
&lt;p>在使用&lt;code>select&lt;/code>语句的时候，我们首先需要注意下面几个事情。&lt;/p>
&lt;ol>
&lt;li>如果像上述示例那样加入了默认分支，那么无论涉及通道操作的表达式是否有阻塞，&lt;code>select&lt;/code>语句都不会被阻塞。如果那几个表达式都阻塞了，或者说都没有满足求值的条件，那么默认分支就会被选中并执行。&lt;/li>
&lt;li>如果没有加入默认分支，那么一旦所有的&lt;code>case&lt;/code>表达式都没有满足求值条件，那么&lt;code>select&lt;/code>语句就会被阻塞。直到至少有一个&lt;code>case&lt;/code>表达式满足条件为止。&lt;/li>
&lt;li>还记得吗？我们可能会因为通道关闭了，而直接从通道接收到一个其元素类型的零值。所以，在很多时候，我们需要通过接收表达式的第二个结果值来判断通道是否已经关闭。一旦发现某个通道关闭了，我们就应该及时地屏蔽掉对应的分支或者采取其他措施。这对于程序逻辑和程序性能都是有好处的。&lt;/li>
&lt;li>&lt;code>select&lt;/code>语句只能对其中的每一个&lt;code>case&lt;/code>表达式各求值一次。所以，如果我们想连续或定时地操作其中的通道的话，就往往需要通过在&lt;code>for&lt;/code>语句中嵌入&lt;code>select&lt;/code>语句的方式实现。但这时要注意，简单地在&lt;code>select&lt;/code>语句的分支中使用&lt;code>break&lt;/code>语句，只能结束当前的&lt;code>select&lt;/code>语句的执行，而并不会对外层的&lt;code>for&lt;/code>语句产生作用。这种错误的用法可能会让这个&lt;code>for&lt;/code>语句无休止地运行下去。&lt;/li>
&lt;/ol>
&lt;p>下面是一个简单的示例。&lt;/p>
&lt;pre>&lt;code>intChan := make(chan int, 1)
// 一秒后关闭通道。
time.AfterFunc(time.Second, func() {
close(intChan)
})
select {
case _, ok := &amp;lt;-intChan:
if !ok {
fmt.Println(&amp;quot;The candidate case is closed.&amp;quot;)
break
}
fmt.Println(&amp;quot;The candidate case is selected.&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;p>我先声明并初始化了一个叫做&lt;code>intChan&lt;/code>的通道，然后通过&lt;code>time&lt;/code>包中的&lt;code>AfterFunc&lt;/code>函数约定在一秒钟之后关闭该通道。&lt;/p>
&lt;p>后面的&lt;code>select&lt;/code>语句只有一个候选分支，我在其中利用接收表达式的第二个结果值对&lt;code>intChan&lt;/code>通道是否已关闭做了判断，并在得到肯定结果后，通过&lt;code>break&lt;/code>语句立即结束当前&lt;code>select&lt;/code>语句的执行。&lt;/p>
&lt;p>这个例子以及前面那个例子都可以在 demo24.go 文件中被找到。你应该运行下，看看结果如何。&lt;/p>
&lt;p>上面这些注意事项中的一部分涉及到了&lt;code>select&lt;/code>语句的分支选择规则。我觉得很有必要再专门整理和总结一下这些规则。&lt;/p>
&lt;p>&lt;strong>问题 2：&lt;code>select&lt;/code>语句的分支选择规则都有哪些？&lt;/strong>&lt;/p>
&lt;p>规则如下面所示。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>对于每一个&lt;code>case&lt;/code>表达式，都至少会包含一个代表发送操作的发送表达式或者一个代表接收操作的接收表达式，同时也可能会包含其他的表达式。比如，如果&lt;code>case&lt;/code>表达式是包含了接收表达式的短变量声明时，那么在赋值符号左边的就可以是一个或两个表达式，不过此处的表达式的结果必须是可以被赋值的。当这样的&lt;code>case&lt;/code>表达式被求值时，它包含的多个表达式总会以从左到右的顺序被求值。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>select&lt;/code>语句包含的候选分支中的&lt;code>case&lt;/code>表达式都会在该语句执行开始时先被求值，并且求值的顺序是依从代码编写的顺序从上到下的。结合上一条规则，在&lt;code>select&lt;/code>语句开始执行时，排在最上边的候选分支中最左边的表达式会最先被求值，然后是它右边的表达式。仅当最上边的候选分支中的所有表达式都被求值完毕后，从上边数第二个候选分支中的表达式才会被求值，顺序同样是从左到右，然后是第三个候选分支、第四个候选分支，以此类推。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于每一个&lt;code>case&lt;/code>表达式，如果其中的发送表达式或者接收表达式在被求值时，相应的操作正处于阻塞状态，那么对该&lt;code>case&lt;/code>表达式的求值就是不成功的。在这种情况下，我们可以说，这个&lt;code>case&lt;/code>表达式所在的候选分支是不满足选择条件的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>仅当&lt;code>select&lt;/code>语句中的所有&lt;code>case&lt;/code>表达式都被求值完毕后，它才会开始选择候选分支。这时候，它只会挑选满足选择条件的候选分支执行。如果所有的候选分支都不满足选择条件，那么默认分支就会被执行。如果这时没有默认分支，那么&lt;code>select&lt;/code>语句就会立即进入阻塞状态，直到至少有一个候选分支满足选择条件为止。一旦有一个候选分支满足选择条件，&lt;code>select&lt;/code>语句（或者说它所在的 goroutine）就会被唤醒，这个候选分支就会被执行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果&lt;code>select&lt;/code>语句发现同时有多个候选分支满足选择条件，那么它就会用一种伪随机的算法在这些分支中选择一个并执行。注意，即使&lt;code>select&lt;/code>语句是在被唤醒时发现的这种情况，也会这样做。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一条&lt;code>select&lt;/code>语句中只能够有一个默认分支。并且，默认分支只在无候选分支可选时才会被执行，这与它的编写位置无关。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>select&lt;/code>语句的每次执行，包括&lt;code>case&lt;/code>表达式求值和分支选择，都是独立的。不过，至于它的执行是否是并发安全的，就要看其中的&lt;code>case&lt;/code>表达式以及分支中，是否包含并发不安全的代码了。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>我把与以上规则相关的示例放在 demo25.go 文件中了。你一定要去试运行一下，然后尝试用上面的规则去解释它的输出内容。&lt;/p>
&lt;p>&lt;strong>总结&lt;/strong>&lt;/p>
&lt;p>今天，我们先讲了单向通道的表示方法，操作符&amp;quot;&lt;code>&amp;lt;-&lt;/code>&amp;ldquo;仍然是关键。如果只用一个词来概括单向通道存在的意义的话，那就是&amp;quot;约束&amp;rdquo;，也就是对代码的约束。&lt;/p>
&lt;p>我们可以使用带&lt;code>range&lt;/code>子句的&lt;code>for&lt;/code>语句从通道中获取数据，也可以通过&lt;code>select&lt;/code>语句操纵通道。&lt;/p>
&lt;p>&lt;code>select&lt;/code>语句是专门为通道而设计的，它可以包含若干个候选分支，每个分支中的&lt;code>case&lt;/code>表达式都会包含针对某个通道的发送或接收操作。&lt;/p>
&lt;p>当&lt;code>select&lt;/code>语句被执行时，它会根据一套&lt;strong>分支选择规则&lt;/strong>选中某一个分支并执行其中的代码。如果所有的候选分支都没有被选中，那么默认分支（如果有的话）就会被执行。注意，发送和接收操作的阻塞是分支选择规则的一个很重要的依据。&lt;/p>
&lt;p>&lt;strong>思考题&lt;/strong>&lt;/p>
&lt;p>今天的思考题都由上述内容中的线索延伸而来。&lt;/p>
&lt;ol>
&lt;li>如果在&lt;code>select&lt;/code>语句中发现某个通道已关闭，那么应该怎样屏蔽掉它所在的分支？&lt;/li>
&lt;li>在&lt;code>select&lt;/code>语句与&lt;code>for&lt;/code>语句联用时，怎样直接退出外层的&lt;code>for&lt;/code>语句？&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 12丨使用函数的正确姿势</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/12%E4%B8%A8%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/12%E4%B8%A8%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</guid><description>
&lt;p>在前几期文章中，我们分了几次，把 Go 语言自身提供的，所有集合类的数据类型都讲了一遍，额外还讲了标准库的&lt;code>container&lt;/code>包中的几个类型。&lt;/p>
&lt;p>在几乎所有主流的编程语言中，集合类的数据类型都是最常用和最重要的。我希望通过这几次的讨论，能让你对它们的运用更上一层楼。&lt;/p>
&lt;p>从今天开始，我会开始向你介绍使用 Go 语言进行模块化编程时，必须了解的知识，这包括几个重要的数据类型以及一些模块化编程的技巧。首先我们需要了解的是 Go 语言的函数以及函数类型。&lt;/p>
&lt;hr>
&lt;h3 id="前导内容函数是一等的公民">前导内容：函数是一等的公民&lt;/h3>
&lt;p>在 Go 语言中，函数可是一等的（first-class）公民，函数类型也是一等的数据类型。这是什么意思呢？&lt;/p>
&lt;p>简单来说，这意味着函数不但可以用于封装代码、分割功能、解耦逻辑，还可以化身为普通的值，在其他函数间传递、赋予变量、做类型判断和转换等等，就像切片和字典的值那样。&lt;/p>
&lt;p>而更深层次的含义就是：函数值可以由此成为能够被随意传播的独立逻辑组件（或者说功能模块）。&lt;/p>
&lt;p>对于函数类型来说，它是一种对一组输入、输出进行模板化的重要工具，它比接口类型更加轻巧、灵活，它的值也借此变成了可被热替换的逻辑组件。比如，我在 demo26.go 文件中是这样写的：&lt;/p>
&lt;pre>&lt;code>package main
import &amp;quot;fmt&amp;quot;
type Printer func(contents string) (n int, err error)
func printToStd(contents string) (bytesNum int, err error) {
return fmt.Println(contents)
}
func main() {
var p Printer
p = printToStd
p(&amp;quot;something&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;p>这里，我先声明了一个函数类型，名叫&lt;code>Printer&lt;/code>。&lt;/p>
&lt;p>注意这里的写法，在类型声明的名称右边的是&lt;code>func&lt;/code>关键字，我们由此就可知道这是一个函数类型的声明。&lt;/p>
&lt;p>在&lt;code>func&lt;/code>右边的就是这个函数类型的参数列表和结果列表。其中，参数列表必须由圆括号包裹，而只要结果列表中只有一个结果声明，并且没有为它命名，我们就可以省略掉外围的圆括号。&lt;/p>
&lt;p>书写函数签名的方式与函数声明的是一致的。只是紧挨在参数列表左边的不是函数名称，而是关键字&lt;code>func&lt;/code>。这里函数名称和&lt;code>func&lt;/code>互换了一下位置而已。&lt;/p>
&lt;blockquote>
&lt;p>函数的签名其实就是函数的参数列表和结果列表的统称，它定义了可用来鉴别不同函数的那些特征，同时也定义了我们与函数交互的方式。&lt;/p>
&lt;/blockquote>
&lt;p>注意，各个参数和结果的名称不能算作函数签名的一部分，甚至对于结果声明来说，没有名称都可以。&lt;/p>
&lt;p>只要两个函数的参数列表和结果列表中的元素顺序及其类型是一致的，我们就可以说它们是一样的函数，或者说是实现了同一个函数类型的函数。&lt;/p>
&lt;p>严格来说，函数的名称也不能算作函数签名的一部分，它只是我们在调用函数时，需要给定的标识符而已。&lt;/p>
&lt;p>我在下面声明的函数&lt;code>printToStd&lt;/code>的签名与&lt;code>Printer&lt;/code>的是一致的，因此前者是后者的一个实现，即使它们的名称以及有的结果名称是不同的。&lt;/p>
&lt;p>通过&lt;code>main&lt;/code>函数中的代码，我们就可以证实这两者的关系了，我顺利地把&lt;code>printToStd&lt;/code>函数赋给了&lt;code>Printer&lt;/code>类型的变量&lt;code>p&lt;/code>，并且成功地调用了它。&lt;/p>
&lt;p>总之，&amp;ldquo;函数是一等的公民&amp;quot;是函数式编程（functional programming）的重要特征。Go 语言在语言层面支持了函数式编程。我们下面的问题就与此有关。&lt;/p>
&lt;p>&lt;strong>今天的问题是：怎样编写高阶函数？&lt;/strong>&lt;/p>
&lt;p>先来说说什么是高阶函数？简单地说，高阶函数可以满足下面的两个条件：&lt;/p>
&lt;p>&lt;strong>1. 接受其他的函数作为参数传入；&lt;/strong>&lt;br>
&lt;strong>2. 把其他的函数作为结果返回。&lt;/strong>&lt;/p>
&lt;p>只要满足了其中任意一个特点，我们就可以说这个函数是一个高阶函数。高阶函数也是函数式编程中的重要概念和特征。&lt;/p>
&lt;p>具体的问题是，我想通过编写&lt;code>calculate&lt;/code>函数来实现两个整数间的加减乘除运算，但是希望两个整数和具体的操作都由该函数的调用方给出，那么，这样一个函数应该怎样编写呢。&lt;/p>
&lt;p>&lt;strong>典型回答&lt;/strong>&lt;/p>
&lt;p>首先，我们来声明一个名叫&lt;code>operate&lt;/code>的函数类型，它有两个参数和一个结果，都是&lt;code>int&lt;/code>类型的。&lt;/p>
&lt;pre>&lt;code>type operate func(x, y int) int
&lt;/code>&lt;/pre>
&lt;p>然后，我们编写&lt;code>calculate&lt;/code>函数的签名部分。这个函数除了需要两个&lt;code>int&lt;/code>类型的参数之外，还应该有一个&lt;code>operate&lt;/code>类型的参数。&lt;/p>
&lt;p>该函数的结果应该有两个，一个是&lt;code>int&lt;/code>类型的，代表真正的操作结果，另一个应该是&lt;code>error&lt;/code>类型的，因为如果那个&lt;code>operate&lt;/code>类型的参数值为&lt;code>nil&lt;/code>，那么就应该直接返回一个错误。&lt;/p>
&lt;blockquote>
&lt;p>顺便说一下，函数类型属于引用类型，它的值可以为&lt;code>nil&lt;/code>，而这种类型的零值恰恰就是&lt;code>nil&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code>func calculate(x int, y int, op operate) (int, error) {
if op == nil {
return 0, errors.New(&amp;quot;invalid operation&amp;quot;)
}
return op(x, y), nil
}
&lt;/code>&lt;/pre>
&lt;p>&lt;code>calculate&lt;/code>函数实现起来就很简单了。我们需要先用卫述语句检查一下参数，如果&lt;code>operate&lt;/code>类型的参数&lt;code>op&lt;/code>为&lt;code>nil&lt;/code>，那么就直接返回&lt;code>0&lt;/code>和一个代表了具体错误的&lt;code>error&lt;/code>类型值。&lt;/p>
&lt;blockquote>
&lt;p>卫述语句是指被用来检查关键的先决条件的合法性，并在检查未通过的情况下立即终止当前代码块执行的语句。在 Go 语言中，if 语句常被作为卫述语句。&lt;/p>
&lt;/blockquote>
&lt;p>如果检查无误，那么就调用&lt;code>op&lt;/code>并把那两个操作数传给它，最后返回&lt;code>op&lt;/code>返回的结果和代表没有错误发生的&lt;code>nil&lt;/code>。&lt;/p>
&lt;p>&lt;strong>问题解析&lt;/strong>&lt;/p>
&lt;p>其实只要你搞懂了&amp;quot;函数是一等的公民&amp;quot;这句话背后的含义，这道题就会很简单。我在上面已经讲过了，希望你已经清楚了。我在上一个例子中展示了其中一点，即：把函数作为一个普通的值赋给一个变量。&lt;/p>
&lt;p>在这道题中，我问的其实是怎样实现另一点，即：让函数在其他函数间传递。&lt;/p>
&lt;p>在答案中，&lt;code>calculate&lt;/code>函数的其中一个参数是&lt;code>operate&lt;/code>类型的，而且后者就是一个函数类型。在调用&lt;code>calculate&lt;/code>函数的时候，我们需要传入一个&lt;code>operate&lt;/code>类型的函数值。这个函数值应该怎么写？&lt;/p>
&lt;p>只要它的签名与&lt;code>operate&lt;/code>类型的签名一致，并且实现得当就可以了。我们可以像上一个例子那样先声明好一个函数，再把它赋给一个变量，也可以直接编写一个实现了&lt;code>operate&lt;/code>类型的匿名函数。&lt;/p>
&lt;pre>&lt;code>op := func(x, y int) int {
return x + y
}
&lt;/code>&lt;/pre>
&lt;p>&lt;code>calculate&lt;/code>函数就是一个高阶函数。但是我们说高阶函数的特点有两个，而该函数只展示了其中&lt;strong>一个特点，即：接受其他的函数作为参数传入。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>那另一个特点，把其他的函数作为结果返回。&lt;/strong> 这又是怎么玩的呢？你可以看看我在 demo27.go 文件中声明的函数类型&lt;code>calculateFunc&lt;/code>和函数&lt;code>genCalculator&lt;/code>。其中，&lt;code>genCalculator&lt;/code>函数的唯一结果的类型就是&lt;code>calculateFunc&lt;/code>。&lt;/p>
&lt;p>这里先给出使用它们的代码。&lt;/p>
&lt;pre>&lt;code>x, y = 56, 78
add := genCalculator(op)
result, err = add(x, y)
fmt.Printf(&amp;quot;The result: %d (error: %v)\n&amp;quot;, result, err)
&lt;/code>&lt;/pre>
&lt;p>你可以自己写出&lt;code>calculateFunc&lt;/code>类型和&lt;code>genCalculator&lt;/code>函数的实现吗？你可以动手试一试&lt;/p>
&lt;p>&lt;strong>知识扩展&lt;/strong>&lt;/p>
&lt;p>&lt;strong>问题 1：如何实现闭包？&lt;/strong>&lt;/p>
&lt;p>闭包又是什么？你可以想象一下，在一个函数中存在对外来标识符的引用。所谓的外来标识符，既不代表当前函数的任何参数或结果，也不是函数内部声明的，它是直接从外边拿过来的。&lt;/p>
&lt;p>还有个专门的术语称呼它，叫自由变量，可见它代表的肯定是个变量。实际上，如果它是个常量，那也就形成不了闭包了，因为常量是不可变的程序实体，而闭包体现的却是由&amp;quot;不确定&amp;quot;变为&amp;quot;确定&amp;quot;的一个过程。&lt;/p>
&lt;p>我们说的这个函数（以下简称闭包函数）就是因为引用了自由变量，而呈现出了一种&amp;quot;不确定&amp;quot;的状态，也叫&amp;quot;开放&amp;quot;状态。&lt;/p>
&lt;p>也就是说，它的内部逻辑并不是完整的，有一部分逻辑需要这个自由变量参与完成，而后者到底代表了什么在闭包函数被定义的时候却是未知的。&lt;/p>
&lt;p>即使对于像 Go 语言这种静态类型的编程语言而言，我们在定义闭包函数的时候最多也只能知道自由变量的类型。&lt;/p>
&lt;p>在我们刚刚提到的&lt;code>genCalculator&lt;/code>函数内部，实际上就实现了一个闭包，而&lt;code>genCalculator&lt;/code>函数也是一个高阶函数。&lt;/p>
&lt;pre>&lt;code>func genCalculator(op operate) calculateFunc {
return func(x int, y int) (int, error) {
if op == nil {
return 0, errors.New(&amp;quot;invalid operation&amp;quot;)
}
return op(x, y), nil
}
}
&lt;/code>&lt;/pre>
&lt;p>&lt;code>genCalculator&lt;/code>函数只做了一件事，那就是定义一个匿名的、&lt;code>calculateFunc&lt;/code>类型的函数并把它作为结果值返回。&lt;/p>
&lt;p>而这个匿名的函数就是一个闭包函数。它里面使用的变量&lt;code>op&lt;/code>既不代表它的任何参数或结果也不是它自己声明的，而是定义它的&lt;code>genCalculator&lt;/code>函数的参数，所以是一个自由变量。&lt;/p>
&lt;p>这个自由变量究竟代表了什么，这一点并不是在定义这个闭包函数的时候确定的，而是在&lt;code>genCalculator&lt;/code>函数被调用的时候确定的。&lt;/p>
&lt;p>只有给定了该函数的参数&lt;code>op&lt;/code>，我们才能知道它返回给我们的闭包函数可以用于什么运算。&lt;/p>
&lt;p>看到&lt;code>if op == nil {&lt;/code>那一行了吗？Go 语言编译器读到这里时会试图去寻找&lt;code>op&lt;/code>所代表的东西，它会发现&lt;code>op&lt;/code>代表的是&lt;code>genCalculator&lt;/code>函数的参数，然后，它会把这两者联系起来。这时可以说，自由变量&lt;code>op&lt;/code>被&amp;quot;捕获&amp;quot;了。&lt;/p>
&lt;p>当程序运行到这里的时候，&lt;code>op&lt;/code>就是那个参数值了。如此一来，这个闭包函数的状态就由&amp;quot;不确定&amp;quot;变为了&amp;quot;确定&amp;rdquo;，或者说转到了&amp;quot;闭合&amp;quot;状态，至此也就真正地形成了一个闭包。&lt;/p>
&lt;p>看出来了吗？我们在用高阶函数实现闭包。这也是高阶函数的一大功用。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/61/08/61f3689a0023e83407ccae081cdd8108.png" alt="">&lt;/p>
&lt;p>（高阶函数与闭包）&lt;/p>
&lt;p>那么，实现闭包的意义又在哪里呢？表面上看，我们只是延迟实现了一部分程序逻辑或功能而已，但实际上，我们是在动态地生成那部分程序逻辑。&lt;/p>
&lt;p>我们可以借此在程序运行的过程中，根据需要生成功能不同的函数，继而影响后续的程序行为。这与 GoF 设计模式中的&amp;quot;模板方法&amp;quot;模式有着异曲同工之妙，不是吗？&lt;/p>
&lt;p>&lt;strong>问题 2：传入函数的那些参数值后来怎么样了？&lt;/strong>&lt;/p>
&lt;p>让我们把目光再次聚焦到函数本身。我们先看一个示例。&lt;/p>
&lt;pre>&lt;code>package main
import &amp;quot;fmt&amp;quot;
func main() {
array1 := [3]string{&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;}
fmt.Printf(&amp;quot;The array: %v\n&amp;quot;, array1)
array2 := modifyArray(array1)
fmt.Printf(&amp;quot;The modified array: %v\n&amp;quot;, array2)
fmt.Printf(&amp;quot;The original array: %v\n&amp;quot;, array1)
}
func modifyArray(a [3]string) [3]string {
a[1] = &amp;quot;x&amp;quot;
return a
}
&lt;/code>&lt;/pre>
&lt;p>这个命令源码文件（也就是 demo28.go）在运行之后会输出什么？这是我常出的一道考题。&lt;/p>
&lt;p>我在&lt;code>main&lt;/code>函数中声明了一个数组&lt;code>array1&lt;/code>，然后把它传给了函数&lt;code>modify&lt;/code>，&lt;code>modify&lt;/code>对参数值稍作修改后将其作为结果值返回。&lt;code>main&lt;/code>函数中的代码拿到这个结果之后打印了它（即&lt;code>array2&lt;/code>），以及原来的数组&lt;code>array1&lt;/code>。关键问题是，原数组会因&lt;code>modify&lt;/code>函数对参数值的修改而改变吗？&lt;/p>
&lt;p>答案是：原数组不会改变。为什么呢？原因是，所有传给函数的参数值都会被复制，函数在其内部使用的并不是参数值的原值，而是它的副本。&lt;/p>
&lt;p>由于数组是值类型，所以每一次复制都会拷贝它，以及它的所有元素值。我在&lt;code>modify&lt;/code>函数中修改的只是原数组的副本而已，并不会对原数组造成任何影响。&lt;/p>
&lt;p>注意，对于引用类型，比如：切片、字典、通道，像上面那样复制它们的值，只会拷贝它们本身而已，并不会拷贝它们引用的底层数据。也就是说，这时只是浅表复制，而不是深层复制。&lt;/p>
&lt;p>以切片值为例，如此复制的时候，只是拷贝了它指向底层数组中某一个元素的指针，以及它的长度值和容量值，而它的底层数组并不会被拷贝。&lt;/p>
&lt;p>另外还要注意，就算我们传入函数的是一个值类型的参数值，但如果这个参数值中的某个元素是引用类型的，那么我们仍然要小心。&lt;/p>
&lt;p>比如：&lt;/p>
&lt;pre>&lt;code>complexArray1 := [3][]string{
[]string{&amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;f&amp;quot;},
[]string{&amp;quot;g&amp;quot;, &amp;quot;h&amp;quot;, &amp;quot;i&amp;quot;},
[]string{&amp;quot;j&amp;quot;, &amp;quot;k&amp;quot;, &amp;quot;l&amp;quot;},
}
&lt;/code>&lt;/pre>
&lt;p>变量&lt;code>complexArray1&lt;/code>是&lt;code>[3][]string&lt;/code>类型的，也就是说，虽然它是一个数组，但是其中的每个元素又都是一个切片。这样一个值被传入函数的话，函数中对该参数值的修改会影响到&lt;code>complexArray1&lt;/code>本身吗？我想，这可以留作今天的思考题。&lt;/p>
&lt;p>&lt;strong>总结&lt;/strong>&lt;/p>
&lt;p>我们今天主要聚焦于函数的使用手法。在 Go 语言中，函数可是一等的（first-class）公民。它既可以被独立声明，也可以被作为普通的值来传递或赋予变量。除此之外，我们还可以在其他函数的内部声明匿名函数并把它直接赋给变量。&lt;/p>
&lt;p>你需要记住 Go 语言是怎样鉴别一个函数的，函数的签名在这里起到了至关重要的作用。&lt;/p>
&lt;p>函数是 Go 语言支持函数式编程的主要体现。我们可以通过&amp;quot;把函数传给函数&amp;quot;以及&amp;quot;让函数返回函数&amp;quot;来编写高阶函数，也可以用高阶函数来实现闭包，并以此做到部分程序逻辑的动态生成。&lt;/p>
&lt;p>我们在最后还说了一下关于函数传参的一个注意事项，这很重要，可能会关系到程序的稳定和安全。&lt;/p>
&lt;p>一个相关的原则是：既不要把你程序的细节暴露给外界，也尽量不要让外界的变动影响到你的程序。你可以想想这个原则在这里可以起到怎样的指导作用。&lt;/p>
&lt;p>&lt;strong>思考题&lt;/strong>&lt;/p>
&lt;p>今天我给你留下两道思考题。&lt;/p>
&lt;ol>
&lt;li>&lt;code>complexArray1&lt;/code>被传入函数的话，这个函数中对该参数值的修改会影响到它的原值吗？&lt;/li>
&lt;li>函数真正拿到的参数值其实只是它们的副本，那么函数返回给调用方的结果值也会被复制吗？&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 13丨结构体及其方法的使用法门</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/13%E4%B8%A8%E7%BB%93%E6%9E%84%E4%BD%93%E5%8F%8A%E5%85%B6%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%E6%B3%95%E9%97%A8/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/13%E4%B8%A8%E7%BB%93%E6%9E%84%E4%BD%93%E5%8F%8A%E5%85%B6%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%E6%B3%95%E9%97%A8/</guid><description>
&lt;p>我们都知道，结构体类型表示的是实实在在的数据结构。一个结构体类型可以包含若干个字段，每个字段通常都需要有确切的名字和类型。&lt;/p>
&lt;h2 id="前导内容结构体类型基础知识">前导内容：结构体类型基础知识&lt;/h2>
&lt;p>当然了，结构体类型也可以不包含任何字段，这样并不是没有意义的，因为我们还可以为类型关联上一些方法，这里你可以把方法看做是函数的特殊版本。&lt;/p>
&lt;p>函数是独立的程序实体。我们可以声明有名字的函数，也可以声明没名字的函数，还可以把它们当做普通的值传来传去。我们能把具有相同签名的函数抽象成独立的函数类型，以作为一组输入、输出（或者说一类逻辑组件）的代表。&lt;/p>
&lt;p>方法却不同，它需要有名字，不能被当作值来看待，最重要的是，它必须隶属于某一个类型。方法所属的类型会通过其声明中的接收者（receiver）声明体现出来。&lt;/p>
&lt;p>接收者声明就是在关键字&lt;code>func&lt;/code>和方法名称之间的圆括号包裹起来的内容，其中必须包含确切的名称和类型字面量。&lt;/p>
&lt;p>&lt;strong>接收者的类型其实就是当前方法所属的类型，而接收者的名称，则用于在当前方法中引用它所属的类型的当前值。&lt;/strong>&lt;/p>
&lt;p>我们举个例子来看一下。&lt;/p>
&lt;pre>&lt;code>// AnimalCategory 代表动物分类学中的基本分类法。
type AnimalCategory struct {
kingdom string // 界。
phylum string // 门。
class string // 纲。
order string // 目。
family string // 科。
genus string // 属。
species string // 种。
}
func (ac AnimalCategory) String() string {
return fmt.Sprintf(&amp;quot;%s%s%s%s%s%s%s&amp;quot;,
ac.kingdom, ac.phylum, ac.class, ac.order,
ac.family, ac.genus, ac.species)
}
&lt;/code>&lt;/pre>
&lt;p>结构体类型&lt;code>AnimalCategory&lt;/code>代表了动物的基本分类法，其中有 7 个&lt;code>string&lt;/code>类型的字段，分别表示各个等级的分类。&lt;/p>
&lt;p>下边有个名叫&lt;code>String&lt;/code>的方法，从它的接收者声明可以看出它隶属于&lt;code>AnimalCategory&lt;/code>类型。&lt;/p>
&lt;p>通过该方法的接收者名称&lt;code>ac&lt;/code>，我们可以在其中引用到当前值的任何一个字段，或者调用到当前值的任何一个方法（也包括&lt;code>String&lt;/code>方法自己）。&lt;/p>
&lt;p>这个&lt;code>String&lt;/code>方法的功能是提供当前值的字符串表示形式，其中的各个等级分类会按照从大到小的顺序排列。使用时，我们可以这样表示：&lt;/p>
&lt;pre>&lt;code>category := AnimalCategory{species: &amp;quot;cat&amp;quot;}
fmt.Printf(&amp;quot;The animal category: %s\n&amp;quot;, category)
&lt;/code>&lt;/pre>
&lt;p>这里，我用字面量初始化了一个&lt;code>AnimalCategory&lt;/code>类型的值，并把它赋给了变量&lt;code>category&lt;/code>。为了不喧宾夺主，我只为其中的&lt;code>species&lt;/code>字段指定了字符串值&lt;code>&amp;quot;cat&amp;quot;&lt;/code>，该字段代表最末级分类&amp;quot;种&amp;quot;。&lt;/p>
&lt;p>在 Go 语言中，我们可以通过为一个类型编写名为&lt;code>String&lt;/code>的方法，来自定义该类型的字符串表示形式。这个&lt;code>String&lt;/code>方法不需要任何参数声明，但需要有一个&lt;code>string&lt;/code>类型的结果声明。&lt;/p>
&lt;p>正因为如此，我在调用&lt;code>fmt.Printf&lt;/code>函数时，使用占位符&lt;code>%s&lt;/code>和&lt;code>category&lt;/code>值本身就可以打印出后者的字符串表示形式，而无需显式地调用它的&lt;code>String&lt;/code>方法。&lt;/p>
&lt;p>&lt;code>fmt.Printf&lt;/code>函数会自己去寻找它。此时的打印内容会是&lt;code>The animal category: cat&lt;/code>。显而易见，&lt;code>category&lt;/code>的&lt;code>String&lt;/code>方法成功地引用了当前值的所有字段。&lt;/p>
&lt;blockquote>
&lt;p>方法隶属的类型其实并不局限于结构体类型，但必须是某个自定义的数据类型，并且不能是任何接口类型。&lt;/p>
&lt;p>一个数据类型关联的所有方法，共同组成了该类型的方法集合。同一个方法集合中的方法不能出现重名。并且，如果它们所属的是一个结构体类型，那么它们的名称与该类型中任何字段的名称也不能重复。&lt;/p>
&lt;p>我们可以把结构体类型中的一个字段看作是它的一个属性或者一项数据，再把隶属于它的一个方法看作是附加在其中数据之上的一个能力或者一项操作。将属性及其能力（或者说数据及其操作）封装在一起，是面向对象编程（object-oriented programming）的一个主要原则。&lt;/p>
&lt;p>Go 语言摄取了面向对象编程中的很多优秀特性，同时也推荐这种封装的做法。从这方面看，Go 语言其实是支持面向对象编程的，但它选择摒弃了一些在实际运用过程中容易引起程序开发者困惑的特性和规则。&lt;/p>
&lt;/blockquote>
&lt;p>现在，让我们再把目光放到结构体类型的字段声明上。我们来看下面的代码：&lt;/p>
&lt;pre>&lt;code>type Animal struct {
scientificName string // 学名。
AnimalCategory // 动物基本分类。
}
&lt;/code>&lt;/pre>
&lt;p>我声明了一个结构体类型，名叫&lt;code>Animal&lt;/code>。它有两个字段。一个是&lt;code>string&lt;/code>类型的字段&lt;code>scientificName&lt;/code>，代表了动物的学名。而另一个字段声明中只有&lt;code>AnimalCategory&lt;/code>，它正是我在前面编写的那个结构体类型的名字。这是什么意思呢？&lt;/p>
&lt;p>&lt;strong>那么，我们今天的问题是：&lt;code>Animal&lt;/code>类型中的字段声明&lt;code>AnimalCategory&lt;/code>代表了什么？&lt;/strong>&lt;/p>
&lt;p>更宽泛地讲，如果结构体类型的某个字段声明中只有一个类型名，那么该字段代表了什么？&lt;/p>
&lt;p>&lt;strong>这个问题的典型回答是&lt;/strong> ：字段声明&lt;code>AnimalCategory&lt;/code>代表了&lt;code>Animal&lt;/code>类型的一个嵌入字段。Go 语言规范规定，如果一个字段的声明中只有字段的类型名而没有字段的名称，那么它就是一个嵌入字段，也可以被称为匿名字段。我们可以通过此类型变量的名称后跟&amp;quot;.&amp;quot;，再后跟嵌入字段类型的方式引用到该字段。也就是说，嵌入字段的类型既是类型也是名称。&lt;/p>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>说到引用结构体的嵌入字段，&lt;code>Animal&lt;/code>类型有个方法叫&lt;code>Category&lt;/code>，它是这么写的：&lt;/p>
&lt;pre>&lt;code>func (a Animal) Category() string {
return a.AnimalCategory.String()
}
&lt;/code>&lt;/pre>
&lt;p>&lt;code>Category&lt;/code>方法的接收者类型是&lt;code>Animal&lt;/code>，接收者名称是&lt;code>a&lt;/code>。在该方法中，我通过表达式&lt;code>a.AnimalCategory&lt;/code>选择到了&lt;code>a&lt;/code>的这个嵌入字段，然后又选择了该字段的&lt;code>String&lt;/code>方法并调用了它。&lt;/p>
&lt;p>顺便提一下，在某个代表变量的标识符的右边加&amp;quot;.&amp;quot;，再加上字段名或方法名的表达式被称为选择表达式，它用来表示选择了该变量的某个字段或者方法。&lt;/p>
&lt;p>这是 Go 语言规范中的说法，与&amp;quot;引用结构体的某某字段&amp;quot;或&amp;quot;调用结构体的某某方法&amp;quot;的说法是相通的。我在以后会混用这两种说法。&lt;/p>
&lt;p>实际上，把一个结构体类型嵌入到另一个结构体类型中的意义不止如此。嵌入字段的方法集合会被无条件地合并进被嵌入类型的方法集合中。例如下面这种：&lt;/p>
&lt;pre>&lt;code>animal := Animal{
scientificName: &amp;quot;American Shorthair&amp;quot;,
AnimalCategory: category,
}
fmt.Printf(&amp;quot;The animal: %s\n&amp;quot;, animal)
&lt;/code>&lt;/pre>
&lt;p>我声明了一个&lt;code>Animal&lt;/code>类型的变量&lt;code>animal&lt;/code>并对它进行初始化。我把字符串值&lt;code>&amp;quot;American Shorthair&amp;quot;&lt;/code>赋给它的字段&lt;code>scientificName&lt;/code>，并把前面声明过的变量&lt;code>category&lt;/code>赋给它的嵌入字段&lt;code>AnimalCategory&lt;/code>。&lt;/p>
&lt;p>我在后面使用&lt;code>fmt.Printf&lt;/code>函数和&lt;code>%s&lt;/code>占位符试图打印&lt;code>animal&lt;/code>的字符串表示形式，相当于调用&lt;code>animal&lt;/code>的&lt;code>String&lt;/code>方法。虽然我们还没有为&lt;code>Animal&lt;/code>类型编写&lt;code>String&lt;/code>方法，但这样做是没问题的。因为在这里，嵌入字段&lt;code>AnimalCategory&lt;/code>的&lt;code>String&lt;/code>方法会被当做&lt;code>animal&lt;/code>的方法调用。&lt;/p>
&lt;p>&lt;strong>那如果我也为&lt;code>Animal&lt;/code>类型编写一个&lt;code>String&lt;/code>方法呢？这里会调用哪一个呢？&lt;/strong>&lt;/p>
&lt;p>答案是，&lt;code>animal&lt;/code>的&lt;code>String&lt;/code>方法会被调用。这时，我们说，嵌入字段&lt;code>AnimalCategory&lt;/code>的&lt;code>String&lt;/code>方法被&amp;quot;屏蔽&amp;quot;了。注意，只要名称相同，无论这两个方法的签名是否一致，被嵌入类型的方法都会&amp;quot;屏蔽&amp;quot;掉嵌入字段的同名方法。&lt;/p>
&lt;p>类似的，由于我们同样可以像访问被嵌入类型的字段那样，直接访问嵌入字段的字段，所以如果这两个结构体类型里存在同名的字段，那么嵌入字段中的那个字段一定会被&amp;quot;屏蔽&amp;quot;。这与我们在前面讲过的，可重名变量之间可能存在的&amp;quot;屏蔽&amp;quot;现象很相似。&lt;/p>
&lt;p>正因为嵌入字段的字段和方法都可以&amp;quot;嫁接&amp;quot;到被嵌入类型上，所以即使在两个同名的成员一个是字段，另一个是方法的情况下，这种&amp;quot;屏蔽&amp;quot;现象依然会存在。&lt;/p>
&lt;p>不过，即使被屏蔽了，我们仍然可以通过链式的选择表达式，选择到嵌入字段的字段或方法，就像我在&lt;code>Category&lt;/code>方法中所做的那样。这种&amp;quot;屏蔽&amp;quot;其实还带来了一些好处。我们看看下面这个&lt;code>Animal&lt;/code>类型的&lt;code>String&lt;/code>方法的实现：&lt;/p>
&lt;pre>&lt;code>func (a Animal) String() string {
return fmt.Sprintf(&amp;quot;%s (category: %s)&amp;quot;,
a.scientificName, a.AnimalCategory)
}
&lt;/code>&lt;/pre>
&lt;p>在这里，我们把对嵌入字段的&lt;code>String&lt;/code>方法的调用结果融入到了&lt;code>Animal&lt;/code>类型的同名方法的结果中。这种将同名方法的结果逐层&amp;quot;包装&amp;quot;的手法是很常见和有用的，也算是一种惯用法了。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/47/b2/471b42767d0c82af8acd22c13dfd33b2.png" alt="">&lt;br>
（结构体类型中的嵌入字段）&lt;/p>
&lt;p>&lt;strong>最后，我还要提一下多层嵌入的问题。&lt;/strong> 也就是说，嵌入字段本身也有嵌入字段的情况。请看我声明的&lt;code>Cat&lt;/code>类型：&lt;/p>
&lt;pre>&lt;code>type Cat struct {
name string
Animal
}
func (cat Cat) String() string {
return fmt.Sprintf(&amp;quot;%s (category: %s, name: %q)&amp;quot;,
cat.scientificName, cat.Animal.AnimalCategory, cat.name)
}
&lt;/code>&lt;/pre>
&lt;p>结构体类型&lt;code>Cat&lt;/code>中有一个嵌入字段&lt;code>Animal&lt;/code>，而&lt;code>Animal&lt;/code>类型还有一个嵌入字段&lt;code>AnimalCategory&lt;/code>。&lt;/p>
&lt;p>在这种情况下，&amp;ldquo;屏蔽&amp;quot;现象会以嵌入的层级为依据，嵌入层级越深的字段或方法越可能被&amp;quot;屏蔽&amp;rdquo;。&lt;/p>
&lt;p>例如，当我们调用&lt;code>Cat&lt;/code>类型值的&lt;code>String&lt;/code>方法时，如果该类型确有&lt;code>String&lt;/code>方法，那么嵌入字段&lt;code>Animal&lt;/code>和&lt;code>AnimalCategory&lt;/code>的&lt;code>String&lt;/code>方法都会被&amp;quot;屏蔽&amp;quot;。&lt;/p>
&lt;p>如果该类型没有&lt;code>String&lt;/code>方法，那么嵌入字段&lt;code>Animal&lt;/code>的&lt;code>String&lt;/code>方法会被调用，而它的嵌入字段&lt;code>AnimalCategory&lt;/code>的&lt;code>String&lt;/code>方法仍然会被屏蔽。&lt;/p>
&lt;p>只有当&lt;code>Cat&lt;/code>类型和&lt;code>Animal&lt;/code>类型都没有&lt;code>String&lt;/code>方法的时候，&lt;code>AnimalCategory&lt;/code>的&lt;code>String&lt;/code>方法菜会被调用。&lt;/p>
&lt;p>最后的最后，如果处于同一个层级的多个嵌入字段拥有同名的字段或方法，那么从被嵌入类型的值那里，选择此名称的时候就会引发一个编译错误，因为编译器无法确定被选择的成员到底是哪一个。&lt;/p>
&lt;p>以上关于嵌入字段的所有示例都在 demo29.go 中，希望能对你有所帮助。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;p>&lt;strong>问题 1：Go 语言是用嵌入字段实现了继承吗？&lt;/strong>&lt;/p>
&lt;p>这里强调一下，Go 语言中根本没有继承的概念，它所做的是通过嵌入字段的方式实现了类型之间的组合。这样做的具体原因和理念请见 Go 语言官网的 FAQ 中的&lt;a href="https://golang.org/doc/faq#inheritance">Why is there no type inheritance?&lt;/a>。&lt;/p>
&lt;p>简单来说，面向对象编程中的继承，其实是通过牺牲一定的代码简洁性来换取可扩展性，而且这种可扩展性是通过侵入的方式来实现的。&lt;/p>
&lt;p>类型之间的组合采用的是非声明的方式，我们不需要显式地声明某个类型实现了某个接口，或者一个类型继承了另一个类型。&lt;/p>
&lt;p>同时，类型组合也是非侵入式的，它不会破坏类型的封装或加重类型之间的耦合。&lt;/p>
&lt;p>我们要做的只是把类型当做字段嵌入进来，然后坐享其成地使用嵌入字段所拥有的一切。如果嵌入字段有哪里不合心意，我们还可以用&amp;quot;包装&amp;quot;或&amp;quot;屏蔽&amp;quot;的方式去调整和优化。&lt;/p>
&lt;p>另外，类型间的组合也是灵活的，我们总是可以通过嵌入字段的方式把一个类型的属性和能力&amp;quot;嫁接&amp;quot;给另一个类型。&lt;/p>
&lt;p>这时候，被嵌入类型也就自然而然地实现了嵌入字段所实现的接口。再者，组合要比继承更加简洁和清晰，Go 语言可以轻而易举地通过嵌入多个字段来实现功能强大的类型，却不会有多重继承那样复杂的层次结构和可观的管理成本。&lt;/p>
&lt;p>接口类型之间也可以组合。在 Go 语言中，接口类型之间的组合甚至更加常见，我们常常以此来扩展接口定义的行为或者标记接口的特征。与此有关的内容我在下一篇文章中再讲。&lt;/p>
&lt;p>在我面试过的众多 Go 工程师中，有很多人都在说&amp;quot;Go 语言用嵌入字段实现了继承&amp;quot;，而且深信不疑。&lt;/p>
&lt;p>要么是他们还在用其他编程语言的视角和理念来看待 Go 语言，要么就是受到了某些所谓的&amp;quot;Go 语言教程&amp;quot;的误导。每当这时，我都忍不住当场纠正他们，并建议他们去看看官网上的解答。&lt;/p>
&lt;p>&lt;strong>问题 2：值方法和指针方法都是什么意思，有什么区别？&lt;/strong>&lt;/p>
&lt;p>我们都知道，方法的接收者类型必须是某个自定义的数据类型，而且不能是接口类型或接口的指针类型。所谓的值方法，就是接收者类型是非指针的自定义数据类型的方法。&lt;/p>
&lt;p>比如，我们在前面为&lt;code>AnimalCategory&lt;/code>、&lt;code>Animal&lt;/code>以及&lt;code>Cat&lt;/code>类型声明的那些方法都是值方法。就拿&lt;code>Cat&lt;/code>来说，它的&lt;code>String&lt;/code>方法的接收者类型就是&lt;code>Cat&lt;/code>，一个非指针类型。那什么叫指针类型呢？请看这个方法：&lt;/p>
&lt;pre>&lt;code>func (cat *Cat) SetName(name string) {
cat.name = name
}
&lt;/code>&lt;/pre>
&lt;p>方法&lt;code>SetName&lt;/code>的接收者类型是&lt;code>*Cat&lt;/code>。&lt;code>Cat&lt;/code>左边再加个&lt;code>*&lt;/code>代表的就是&lt;code>Cat&lt;/code>类型的指针类型。&lt;/p>
&lt;p>这时，&lt;code>Cat&lt;/code>可以被叫做&lt;code>*Cat&lt;/code>的基本类型。你可以认为这种指针类型的值表示的是指向某个基本类型值的指针。&lt;/p>
&lt;p>我们可以通过把取值操作符&lt;code>*&lt;/code>放在这样一个指针值的左边来组成一个取值表达式，以获取该指针值指向的基本类型值，也可以通过把取址操作符&lt;code>&amp;amp;&lt;/code>放在一个可寻址的基本类型值的左边来组成一个取址表达式，以获取该基本类型值的指针值。&lt;/p>
&lt;p>所谓的指针方法，就是接收者类型是上述指针类型的方法。&lt;/p>
&lt;p>那么值方法和指针方法之间有什么不同点呢？它们的不同如下所示。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>值方法的接收者是该方法所属的那个类型值的一个副本。我们在该方法内对该副本的修改一般都不会体现在原值上，除非这个类型本身是某个引用类型（比如切片或字典）的别名类型。&lt;/p>
&lt;p>而指针方法的接收者，是该方法所属的那个基本类型值的指针值的一个副本。我们在这样的方法内对该副本指向的值进行修改，却一定会体现在原值上。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个自定义数据类型的方法集合中仅会包含它的所有值方法，而该类型的指针类型的方法集合却囊括了前者的所有方法，包括所有值方法和所有指针方法。&lt;/p>
&lt;p>严格来讲，我们在这样的基本类型的值上只能调用到它的值方法。但是，Go 语言会适时地为我们进行自动地转译，使得我们在这样的值上也能调用到它的指针方法。&lt;/p>
&lt;p>比如，在&lt;code>Cat&lt;/code>类型的变量&lt;code>cat&lt;/code>之上，之所以我们可以通过&lt;code>cat.SetName(&amp;quot;monster&amp;quot;)&lt;/code>修改猫的名字，是因为 Go 语言把它自动转译为了&lt;code>(&amp;amp;cat).SetName(&amp;quot;monster&amp;quot;)&lt;/code>，即：先取&lt;code>cat&lt;/code>的指针值，然后在该指针值上调用&lt;code>SetName&lt;/code>方法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在后边你会了解到，一个类型的方法集合中有哪些方法与它能实现哪些接口类型是息息相关的。如果一个基本类型和它的指针类型的方法集合是不同的，那么它们具体实现的接口类型的数量就也会有差异，除非这两个数量都是零。&lt;/p>
&lt;p>比如，一个指针类型实现了某某接口类型，但它的基本类型却不一定能够作为该接口的实现类型。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>能够体现值方法和指针方法之间差异的小例子我放在 demo30.go 文件里了，你可以参照一下。&lt;/p>
&lt;p>&lt;strong>总结&lt;/strong>&lt;/p>
&lt;p>结构体类型的嵌入字段比较容易让 Go 语言新手们迷惑，所以我在本篇文章着重解释了它的编写方法、基本的特性和规则以及更深层次的含义。在理解了结构体类型及其方法的组成方式和构造套路之后，这些知识应该是你重点掌握的。&lt;/p>
&lt;p>嵌入字段是其声明中只有类型而没有名称的字段，它可以以一种很自然的方式为被嵌入的类型带来新的属性和能力。在一般情况下，我们用简单的选择表达式就可以直接引用到它们的字段和方法。&lt;/p>
&lt;p>不过，我们需要小心可能产生&amp;quot;屏蔽&amp;quot;现象的地方，尤其是当存在多个嵌入字段或者多层嵌入的时候。&amp;ldquo;屏蔽&amp;quot;现象可能会让你的实际引用与你的预期不符。&lt;/p>
&lt;p>另外，你一定要梳理清楚值方法和指针方法的不同之处，包括这两种方法各自能做什么、不能做什么以及会影响到其所属类型的哪些方面。这涉及值的修改、方法集合和接口实现。&lt;/p>
&lt;p>最后，再次强调，嵌入字段是实现类型间组合的一种方式，这与继承没有半点儿关系。Go 语言虽然支持面向对象编程，但是根本就没有&amp;quot;继承&amp;quot;这个概念。&lt;/p>
&lt;p>&lt;strong>思考题&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>我们可以在结构体类型中嵌入某个类型的指针类型吗？如果可以，有哪些注意事项？&lt;/li>
&lt;li>字面量&lt;code>struct{}&lt;/code>代表了什么？又有什么用处？&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 14丨接口类型的合理运用</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/14%E4%B8%A8%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%90%88%E7%90%86%E8%BF%90%E7%94%A8/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/14%E4%B8%A8%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%90%88%E7%90%86%E8%BF%90%E7%94%A8/</guid><description>
&lt;p>你好，我是郝林，今天我们来聊聊接口的相关内容。&lt;/p>
&lt;h2 id="前导内容正确使用接口的基础知识">前导内容：正确使用接口的基础知识&lt;/h2>
&lt;p>在 Go 语言的语境中，当我们在谈论&amp;quot;接口&amp;quot;的时候，一定指的是接口类型。因为接口类型与其他数据类型不同，它是没法被实例化的。&lt;/p>
&lt;p>更具体地说，我们既不能通过调用&lt;code>new&lt;/code>函数或&lt;code>make&lt;/code>函数创建出一个接口类型的值，也无法用字面量来表示一个接口类型的值。&lt;/p>
&lt;p>对于某一个接口类型来说，如果没有任何数据类型可以作为它的实现，那么该接口的值就不可能存在。&lt;/p>
&lt;p>我已经在前面展示过，通过关键字&lt;code>type&lt;/code>和&lt;code>interface&lt;/code>，我们可以声明出接口类型。&lt;/p>
&lt;p>接口类型的类型字面量与结构体类型的看起来有些相似，它们都用花括号包裹一些核心信息。只不过，结构体类型包裹的是它的字段声明，而接口类型包裹的是它的方法定义。&lt;/p>
&lt;p>这里你要注意的是：接口类型声明中的这些方法所代表的就是该接口的方法集合。一个接口的方法集合就是它的全部特征。&lt;/p>
&lt;p>对于任何数据类型，只要它的方法集合中完全包含了一个接口的全部特征（即全部的方法），那么它就一定是这个接口的实现类型。比如下面这样：&lt;/p>
&lt;pre>&lt;code>type Pet interface {
SetName(name string)
Name() string
Category() string
}
&lt;/code>&lt;/pre>
&lt;p>我声明了一个接口类型&lt;code>Pet&lt;/code>，它包含了 3 个方法定义，方法名称分别为&lt;code>SetName&lt;/code>、&lt;code>Name&lt;/code>和&lt;code>Category&lt;/code>。这 3 个方法共同组成了接口类型&lt;code>Pet&lt;/code>的方法集合。&lt;/p>
&lt;p>只要一个数据类型的方法集合中有这 3 个方法，那么它就一定是&lt;code>Pet&lt;/code>接口的实现类型。这是一种无侵入式的接口实现方式。这种方式还有一个专有名词，叫&amp;quot;Duck typing&amp;quot;，中文常译作&amp;quot;鸭子类型&amp;quot;。你可以到百度的&lt;a href="https://baike.baidu.com/item/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B">百科页面&lt;/a>上去了解一下详情。&lt;/p>
&lt;p>顺便说一句，&lt;strong>怎样判定一个数据类型的某一个方法实现的就是某个接口类型中的某个方法呢？&lt;/strong>&lt;/p>
&lt;p>这有两个充分必要条件，一个是&amp;quot;两个方法的签名需要完全一致&amp;quot;，另一个是&amp;quot;两个方法的名称要一模一样&amp;quot;。显然，这比判断一个函数是否实现了某个函数类型要更加严格一些。&lt;/p>
&lt;p>如果你查阅了上篇文章附带的最后一个示例的话，那么就一定会知道，虽然结构体类型&lt;code>Cat&lt;/code>不是&lt;code>Pet&lt;/code>接口的实现类型，但它的指针类型&lt;code>*Cat&lt;/code>却是这个的实现类型。&lt;/p>
&lt;p>如果你还不知道原因，那么请跟着我一起来看。我已经把&lt;code>Cat&lt;/code>类型的声明搬到了 demo31.go 文件中，并进行了一些简化，以便你看得更清楚。对了，由于&lt;code>Cat&lt;/code>和&lt;code>Pet&lt;/code>的发音过于相似，我还把&lt;code>Cat&lt;/code>重命名为了&lt;code>Dog&lt;/code>。&lt;/p>
&lt;p>我声明的类型&lt;code>Dog&lt;/code>附带了 3 个方法。其中有 2 个值方法，分别是&lt;code>Name&lt;/code>和&lt;code>Category&lt;/code>，另外还有一个指针方法&lt;code>SetName&lt;/code>。&lt;/p>
&lt;p>这就意味着，&lt;code>Dog&lt;/code>类型本身的方法集合中只包含了 2 个方法，也就是所有的值方法。而它的指针类型&lt;code>*Dog&lt;/code>方法集合却包含了 3 个方法，&lt;/p>
&lt;p>也就是说，它拥有&lt;code>Dog&lt;/code>类型附带的所有值方法和指针方法。又由于这 3 个方法恰恰分别是&lt;code>Pet&lt;/code>接口中某个方法的实现，所以&lt;code>*Dog&lt;/code>类型就成为了&lt;code>Pet&lt;/code>接口的实现类型。&lt;/p>
&lt;pre>&lt;code>dog := Dog{&amp;quot;little pig&amp;quot;}
var pet Pet = &amp;amp;dog
&lt;/code>&lt;/pre>
&lt;p>正因为如此，我可以声明并初始化一个&lt;code>Dog&lt;/code>类型的变量&lt;code>dog&lt;/code>，然后把它的指针值赋给类型为&lt;code>Pet&lt;/code>的变量&lt;code>pet&lt;/code>。&lt;/p>
&lt;p>这里有几个名词需要你先记住。对于一个接口类型的变量来说，例如上面的变量&lt;code>pet&lt;/code>，我们赋给它的值可以被叫做它的实际值（也称&lt;strong>动态值&lt;/strong> ），而该值的类型可以被叫做这个变量的实际类型（也称&lt;strong>动态类型&lt;/strong>）。&lt;/p>
&lt;p>比如，我们把取址表达式&lt;code>&amp;amp;dog&lt;/code>的结果值赋给了变量&lt;code>pet&lt;/code>，这时这个结果值就是变量&lt;code>pet&lt;/code>的动态值，而此结果值的类型&lt;code>*Dog&lt;/code>就是该变量的动态类型。&lt;/p>
&lt;p>动态类型这个叫法是相对于&lt;strong>静态类型&lt;/strong> 而言的。对于变量&lt;code>pet&lt;/code>来讲，它的&lt;strong>静态类型&lt;/strong> 就是&lt;code>Pet&lt;/code>，并且永远是&lt;code>Pet&lt;/code>，但是它的动态类型却会随着我们赋给它的动态值而变化。&lt;/p>
&lt;p>比如，只有我把一个&lt;code>*Dog&lt;/code>类型的值赋给变量&lt;code>pet&lt;/code>之后，该变量的动态类型才会是&lt;code>*Dog&lt;/code>。如果还有一个&lt;code>Pet&lt;/code>接口的实现类型&lt;code>*Fish&lt;/code>，并且我又把一个此类型的值赋给了&lt;code>pet&lt;/code>，那么它的动态类型就会变为&lt;code>*Fish&lt;/code>。&lt;/p>
&lt;p>还有，在我们给一个接口类型的变量赋予实际的值之前，它的动态类型是不存在的。&lt;/p>
&lt;p>你需要想办法搞清楚接口类型的变量（以下简称接口变量）的动态值、动态类型和静态类型都是什么意思。因为我会在后面基于这些概念讲解更深层次的知识。&lt;/p>
&lt;p>好了，我下面会就&amp;quot;怎样用好 Go 语言的接口&amp;quot;这个话题提出一系列问题，也请你跟着我一起思考这些问题。&lt;/p>
&lt;p>&lt;strong>那么今天的问题是：当我们为一个接口变量赋值时会发生什么？&lt;/strong>&lt;/p>
&lt;p>为了突出问题，我把&lt;code>Pet&lt;/code>接口的声明简化了一下。&lt;/p>
&lt;pre>&lt;code>type Pet interface {
Name() string
Category() string
}
&lt;/code>&lt;/pre>
&lt;p>我从中去掉了&lt;code>Pet&lt;/code>接口的那个名为&lt;code>SetName&lt;/code>的方法。这样一来，&lt;code>Dog&lt;/code>类型也就变成&lt;code>Pet&lt;/code>接口的实现类型了。你可以在 demo32.go 文件中找到本问题的代码。&lt;/p>
&lt;p>现在，我先声明并初始化了一个&lt;code>Dog&lt;/code>类型的变量&lt;code>dog&lt;/code>，这时它的&lt;code>name&lt;/code>字段的值是&lt;code>&amp;quot;little pig&amp;quot;&lt;/code>。然后，我把该变量赋给了一个&lt;code>Pet&lt;/code>类型的变量&lt;code>pet&lt;/code>。最后我通过调用&lt;code>dog&lt;/code>的方法&lt;code>SetName&lt;/code>把它的&lt;code>name&lt;/code>字段的值改成了&lt;code>&amp;quot;monster&amp;quot;&lt;/code>。&lt;/p>
&lt;pre>&lt;code>dog := Dog{&amp;quot;little pig&amp;quot;}
var pet Pet = dog
dog.SetName(&amp;quot;monster&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>所以，我要问的具体问题是：在以上代码执行后，&lt;code>pet&lt;/code>变量的字段&lt;code>name&lt;/code>的值会是什么？&lt;/p>
&lt;p>&lt;strong>这个题目的典型回答是&lt;/strong> ：&lt;code>pet&lt;/code>变量的字段&lt;code>name&lt;/code>的值依然是&lt;code>&amp;quot;little pig&amp;quot;&lt;/code>。&lt;/p>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>首先，由于&lt;code>dog&lt;/code>的&lt;code>SetName&lt;/code>方法是指针方法，所以该方法持有的接收者就是指向&lt;code>dog&lt;/code>的指针值的副本，因而其中对接收者的&lt;code>name&lt;/code>字段的设置就是对变量&lt;code>dog&lt;/code>的改动。那么当&lt;code>dog.SetName(&amp;quot;monster&amp;quot;)&lt;/code>执行之后，&lt;code>dog&lt;/code>的&lt;code>name&lt;/code>字段的值就一定是&lt;code>&amp;quot;monster&amp;quot;&lt;/code>。如果你理解到了这一层，那么请小心前方的陷阱。&lt;/p>
&lt;p>为什么&lt;code>dog&lt;/code>的&lt;code>name&lt;/code>字段值变了，而&lt;code>pet&lt;/code>的却没有呢？这里有一条通用的规则需要你知晓：如果我们使用一个变量给另外一个变量赋值，那么真正赋给后者的，并不是前者持有的那个值，而是该值的一个副本。&lt;/p>
&lt;p>例如，我声明并初始化了一个&lt;code>Dog&lt;/code>类型的变量&lt;code>dog1&lt;/code>，这时它的&lt;code>name&lt;/code>是&lt;code>&amp;quot;little pig&amp;quot;&lt;/code>。然后，我在把&lt;code>dog1&lt;/code>赋给变量&lt;code>dog2&lt;/code>之后，修改了&lt;code>dog1&lt;/code>的&lt;code>name&lt;/code>字段的值。这时，&lt;code>dog2&lt;/code>的&lt;code>name&lt;/code>字段的值是什么？&lt;/p>
&lt;pre>&lt;code>dog1 := Dog{&amp;quot;little pig&amp;quot;}
dog2 := dog1
dog1.name = &amp;quot;monster&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>这个问题与前面那道题几乎一样，只不过这里没有涉及接口类型。这时的&lt;code>dog2&lt;/code>的&lt;code>name&lt;/code>仍然会是&lt;code>&amp;quot;little pig&amp;quot;&lt;/code>。这就是我刚刚告诉你的那条通用规则的又一个体现。&lt;/p>
&lt;p>当你知道了这条通用规则之后，确实可以把前面那道题做对。不过，如果当我问你为什么的时候你只说出了这一个原因，那么，我只能说你仅仅答对了一半。&lt;/p>
&lt;p>那么另一半是什么？这就需要从接口类型值的存储方式和结构说起了。我在前面说过，接口类型本身是无法被值化的。在我们赋予它实际的值之前，它的值一定会是&lt;code>nil&lt;/code>，这也是它的零值。&lt;/p>
&lt;p>反过来讲，一旦它被赋予了某个实现类型的值，它的值就不再是&lt;code>nil&lt;/code>了。不过要注意，即使我们像前面那样把&lt;code>dog&lt;/code>的值赋给了&lt;code>pet&lt;/code>，&lt;code>pet&lt;/code>的值与&lt;code>dog&lt;/code>的值也是不同的。这不仅仅是副本与原值的那种不同。&lt;/p>
&lt;p>当我们给一个接口变量赋值的时候，该变量的动态类型会与它的动态值一起被存储在一个专用的数据结构中。&lt;/p>
&lt;p>严格来讲，这样一个变量的值其实是这个专用数据结构的一个实例，而不是我们赋给该变量的那个实际的值。所以我才说，&lt;code>pet&lt;/code>的值与&lt;code>dog&lt;/code>的值肯定是不同的，无论是从它们存储的内容，还是存储的结构上来看都是如此。不过，我们可以认为，这时&lt;code>pet&lt;/code>的值中包含了&lt;code>dog&lt;/code>值的副本。&lt;/p>
&lt;p>我们就把这个专用的数据结构叫做&lt;code>iface&lt;/code>吧，在 Go 语言的&lt;code>runtime&lt;/code>包中它其实就叫这个名字。&lt;/p>
&lt;p>&lt;code>iface&lt;/code>的实例会包含两个指针，一个是指向类型信息的指针，另一个是指向动态值的指针。这里的类型信息是由另一个专用数据结构的实例承载的，其中包含了动态值的类型，以及使它实现了接口的方法和调用它们的途径，等等。&lt;/p>
&lt;p>总之，接口变量被赋予动态值的时候，存储的是包含了这个动态值的副本的一个结构更加复杂的值。你明白了吗？&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;p>&lt;strong>问题 1：接口变量的值在什么情况下才真正为&lt;code>nil&lt;/code>？&lt;/strong>&lt;/p>
&lt;p>这个问题初看起来就不是个问题。对于一个引用类型的变量，它的值是否为&lt;code>nil&lt;/code>完全取决于我们赋给它了什么，是这样吗？我们先来看一段代码：&lt;/p>
&lt;pre>&lt;code>var dog1 *Dog
fmt.Println(&amp;quot;The first dog is nil. [wrap1]&amp;quot;)
dog2 := dog1
fmt.Println(&amp;quot;The second dog is nil. [wrap1]&amp;quot;)
var pet Pet = dog2
if pet == nil {
fmt.Println(&amp;quot;The pet is nil. [wrap1]&amp;quot;)
} else {
fmt.Println(&amp;quot;The pet is not nil. [wrap1]&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;p>在 demo33.go 文件的这段代码中，我先声明了一个&lt;code>*Dog&lt;/code>类型的变量&lt;code>dog1&lt;/code>，并且没有对它进行初始化。这时该变量的值是什么？显然是&lt;code>nil&lt;/code>。然后我把该变量赋给了&lt;code>dog2&lt;/code>，后者的值此时也必定是&lt;code>nil&lt;/code>，对吗？&lt;/p>
&lt;p>现在问题来了：当我把&lt;code>dog2&lt;/code>赋给&lt;code>Pet&lt;/code>类型的变量&lt;code>pet&lt;/code>之后，变量&lt;code>pet&lt;/code>的值会是什么？答案是&lt;code>nil&lt;/code>吗？&lt;/p>
&lt;p>如果你真正理解了我在上一个问题的解析中讲到的知识，尤其是接口变量赋值及其值的数据结构那部分，那么这道题就不难回答。你可以先思考一下，然后再接着往下看。&lt;/p>
&lt;p>当我们把&lt;code>dog2&lt;/code>的值赋给变量&lt;code>pet&lt;/code>的时候，&lt;code>dog2&lt;/code>的值会先被复制，不过由于在这里它的值是&lt;code>nil&lt;/code>，所以就没必要复制了。&lt;/p>
&lt;p>然后，Go 语言会用我上面提到的那个专用数据结构&lt;code>iface&lt;/code>的实例包装这个&lt;code>dog2&lt;/code>的值的副本，这里是&lt;code>nil&lt;/code>。&lt;/p>
&lt;p>虽然被包装的动态值是&lt;code>nil&lt;/code>，但是&lt;code>pet&lt;/code>的值却不会是&lt;code>nil&lt;/code>，因为这个动态值只是&lt;code>pet&lt;/code>值的一部分而已。&lt;/p>
&lt;p>顺便说一句，这时的&lt;code>pet&lt;/code>的动态类型就存在了，是&lt;code>*Dog&lt;/code>。我们可以通过&lt;code>fmt.Printf&lt;/code>函数和占位符&lt;code>%T&lt;/code>来验证这一点，另外&lt;code>reflect&lt;/code>包的&lt;code>TypeOf&lt;/code>函数也可以起到类似的作用。&lt;/p>
&lt;p>换个角度来看。我们把&lt;code>nil&lt;/code>赋给了&lt;code>pet&lt;/code>，但是&lt;code>pet&lt;/code>的值却不是&lt;code>nil&lt;/code>。&lt;/p>
&lt;p>这很奇怪对吗？其实不然。在 Go 语言中，我们把由字面量&lt;code>nil&lt;/code>表示的值叫做无类型的&lt;code>nil&lt;/code>。这是真正的&lt;code>nil&lt;/code>，因为它的类型也是&lt;code>nil&lt;/code>的。虽然&lt;code>dog2&lt;/code>的值是真正的&lt;code>nil&lt;/code>，但是当我们把这个变量赋给&lt;code>pet&lt;/code>的时候，Go 语言会把它的类型和值放在一起考虑。&lt;/p>
&lt;p>也就是说，这时 Go 语言会识别出赋予&lt;code>pet&lt;/code>的值是一个&lt;code>*Dog&lt;/code>类型的&lt;code>nil&lt;/code>。然后，Go 语言就会用一个&lt;code>iface&lt;/code>的实例包装它，包装后的产物肯定就不是&lt;code>nil&lt;/code>了。&lt;/p>
&lt;p>只要我们把一个有类型的&lt;code>nil&lt;/code>赋给接口变量，那么这个变量的值就一定不会是那个真正的&lt;code>nil&lt;/code>。因此，当我们使用判等符号&lt;code>==&lt;/code>判断&lt;code>pet&lt;/code>是否与字面量&lt;code>nil&lt;/code>相等的时候，答案一定会是&lt;code>false&lt;/code>。&lt;/p>
&lt;p>那么，怎样才能让一个接口变量的值真正为&lt;code>nil&lt;/code>呢？要么只声明它但不做初始化，要么直接把字面量&lt;code>nil&lt;/code>赋给它。&lt;/p>
&lt;p>&lt;strong>问题 2：怎样实现接口之间的组合？&lt;/strong>&lt;/p>
&lt;p>接口类型间的嵌入也被称为接口的组合。我在前面讲过结构体类型的嵌入字段，这其实就是在说结构体类型间的嵌入。&lt;/p>
&lt;p>接口类型间的嵌入要更简单一些，因为它不会涉及方法间的&amp;quot;屏蔽&amp;quot;。只要组合的接口之间有同名的方法就会产生冲突，从而无法通过编译，即使同名方法的签名彼此不同也会是如此。因此，接口的组合根本不可能导致&amp;quot;屏蔽&amp;quot;现象的出现。&lt;/p>
&lt;p>与结构体类型间的嵌入很相似，我们只要把一个接口类型的名称直接写到另一个接口类型的成员列表中就可以了。比如：&lt;/p>
&lt;pre>&lt;code>type Animal interface {
ScientificName() string
Category() string
}
type Pet interface {
Animal
Name() string
}
&lt;/code>&lt;/pre>
&lt;p>接口类型&lt;code>Pet&lt;/code>包含了两个成员，一个是代表了另一个接口类型的&lt;code>Animal&lt;/code>，一个是方法&lt;code>Name&lt;/code>的定义。它们都被包含在&lt;code>Pet&lt;/code>的类型声明的花括号中，并且都各自独占一行。此时，&lt;code>Animal&lt;/code>接口包含的所有方法也就成为了&lt;code>Pet&lt;/code>接口的方法。&lt;/p>
&lt;p>Go 语言团队鼓励我们声明体量较小的接口，并建议我们通过这种接口间的组合来扩展程序、增加程序的灵活性。&lt;/p>
&lt;p>这是因为相比于包含很多方法的大接口而言，小接口可以更加专注地表达某一种能力或某一类特征，同时也更容易被组合在一起。&lt;/p>
&lt;p>Go 语言标准库代码包&lt;code>io&lt;/code>中的&lt;code>ReadWriteCloser&lt;/code>接口和&lt;code>ReadWriter&lt;/code>接口就是这样的例子，它们都是由若干个小接口组合而成的。以&lt;code>io.ReadWriteCloser&lt;/code>接口为例，它是由&lt;code>io.Reader&lt;/code>、&lt;code>io.Writer&lt;/code>和&lt;code>io.Closer&lt;/code>这三个接口组成的。&lt;/p>
&lt;p>这三个接口都只包含了一个方法，是典型的小接口。它们中的每一个都只代表了一种能力，分别是读出、写入和关闭。我们编写这几个小接口的实现类型通常都会很容易。并且，一旦我们同时实现了它们，就等于实现了它们的组合接口&lt;code>io.ReadWriteCloser&lt;/code>。&lt;/p>
&lt;p>即使我们只实现了&lt;code>io.Reader&lt;/code>和&lt;code>io.Writer&lt;/code>，那么也等同于实现了&lt;code>io.ReadWriter&lt;/code>接口，因为后者就是前两个接口组成的。可以看到，这几个&lt;code>io&lt;/code>包中的接口共同组成了一个接口矩阵。它们既相互关联又独立存在。&lt;/p>
&lt;p>我在 demo34.go 文件中写了一个能够体现接口组合优势的小例子，你可以去参看一下。总之，善用接口组合和小接口可以让你的程序框架更加稳定和灵活。&lt;/p>
&lt;p>&lt;strong>总结&lt;/strong>&lt;/p>
&lt;p>好了，我们来简要总结一下。&lt;/p>
&lt;p>Go 语言的接口常用于代表某种能力或某类特征。首先，我们要弄清楚的是，接口变量的动态值、动态类型和静态类型都代表了什么。这些都是正确使用接口变量的基础。当我们给接口变量赋值时，接口变量会持有被赋予值的副本，而不是它本身。&lt;/p>
&lt;p>更重要的是，接口变量的值并不等同于这个可被称为动态值的副本。它会包含两个指针，一个指针指向动态值，一个指针指向类型信息。&lt;/p>
&lt;p>基于此，即使我们把一个值为&lt;code>nil&lt;/code>的某个实现类型的变量赋给了接口变量，后者的值也不可能是真正的&lt;code>nil&lt;/code>。虽然这时它的动态值会为&lt;code>nil&lt;/code>，但它的动态类型确是存在的。&lt;/p>
&lt;p>请记住，除非我们只声明而不初始化，或者显式地赋给它&lt;code>nil&lt;/code>，否则接口变量的值就不会为&lt;code>nil&lt;/code>。&lt;/p>
&lt;p>后面的一个问题相对轻松一些，它是关于程序设计方面的。用好小接口和接口组合总是有益的，我们可以以此形成接口矩阵，进而搭起灵活的程序框架。如果在实现接口时再配合运用结构体类型间的嵌入手法，那么接口组合就可以发挥更大的效用。&lt;/p>
&lt;p>&lt;strong>思考题&lt;/strong>&lt;/p>
&lt;p>如果我们把一个值为&lt;code>nil&lt;/code>的某个实现类型的变量赋给了接口变量，那么在这个接口变量上仍然可以调用该接口的方法吗？如果可以，有哪些注意事项？如果不可以，原因是什么？&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 15丨关于指针的有限操作</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/15%E4%B8%A8%E5%85%B3%E4%BA%8E%E6%8C%87%E9%92%88%E7%9A%84%E6%9C%89%E9%99%90%E6%93%8D%E4%BD%9C/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/15%E4%B8%A8%E5%85%B3%E4%BA%8E%E6%8C%87%E9%92%88%E7%9A%84%E6%9C%89%E9%99%90%E6%93%8D%E4%BD%9C/</guid><description>
&lt;p>在前面的文章中，我们已经提到过很多次&amp;quot;指针&amp;quot;了，你应该已经比较熟悉了。不过，我们那时大多指的是指针类型及其对应的指针值，今天我们讲的则是更为深入的内容。&lt;/p>
&lt;p>让我们先来复习一下。&lt;/p>
&lt;pre>&lt;code>type Dog struct {
name string
}
func (dog *Dog) SetName(name string) {
dog.name = name
}
&lt;/code>&lt;/pre>
&lt;p>对于基本类型&lt;code>Dog&lt;/code>来说，&lt;code>*Dog&lt;/code>就是它的指针类型。而对于一个&lt;code>Dog&lt;/code>类型，值不为&lt;code>nil&lt;/code>的变量&lt;code>dog&lt;/code>，取址表达式&lt;code>&amp;amp;dog&lt;/code>的结果就是该变量的值（也就是基本值）的指针值。&lt;/p>
&lt;p>如果一个方法的接收者是&lt;code>*Dog&lt;/code>类型的，那么该方法就是基本类型&lt;code>Dog&lt;/code>的一个指针方法。&lt;/p>
&lt;p>在这种情况下，这个方法的接收者实际上就是当前的基本值的指针值。我们可以通过指针值无缝地访问到基本值包含的任何字段，以及调用与之关联的任何方法。这应该就是我们在编写 Go 程序的过程中，用得最频繁的&amp;quot;指针&amp;quot;了。&lt;/p>
&lt;p>从传统意义上说，指针是一个指向某个确切的内存地址的值。这个内存地址可以是任何数据或代码的起始地址，比如，某个变量、某个字段或某个函数。&lt;/p>
&lt;p>我们刚刚只提到了其中的一种情况，在 Go 语言中还有其他几样东西可以代表&amp;quot;指针&amp;quot;。其中最贴近传统意义的当属&lt;code>uintptr&lt;/code>类型了。该类型实际上是一个数值类型，也是 Go 语言内建的数据类型之一。&lt;/p>
&lt;p>根据当前计算机的计算架构的不同，它可以存储 32 位或 64 位的无符号整数，可以代表任何指针的位（bit）模式，也就是原始的内存地址。&lt;/p>
&lt;p>再来看 Go 语言标准库中的&lt;code>unsafe&lt;/code>包。&lt;code>unsafe&lt;/code>包中有一个类型叫做&lt;code>Pointer&lt;/code>，也代表了&amp;quot;指针&amp;quot;。&lt;/p>
&lt;p>&lt;code>unsafe.Pointer&lt;/code>可以表示任何指向可寻址的值的指针，同时它也是前面提到的指针值和&lt;code>uintptr&lt;/code>值之间的桥梁。也就是说，通过它，我们可以在这两种值之上进行双向的转换。这里有一个很关键的词&amp;mdash;&amp;mdash;可寻址的（addressable）。在我们继续说&lt;code>unsafe.Pointer&lt;/code>之前，需要先要搞清楚这个词的确切含义。&lt;/p>
&lt;p>&lt;strong>今天的问题是：你能列举出 Go 语言中的哪些值是不可寻址的吗？&lt;/strong>&lt;/p>
&lt;p>&lt;strong>这道题的典型回答是&lt;/strong>以下列表中的值都是不可寻址的。&lt;/p>
&lt;ul>
&lt;li>常量的值。&lt;/li>
&lt;li>基本类型值的字面量。&lt;/li>
&lt;li>算术操作的结果值。&lt;/li>
&lt;li>对各种字面量的索引表达式和切片表达式的结果值。不过有一个例外，对切片字面量的索引结果值却是可寻址的。&lt;/li>
&lt;li>对字符串变量的索引表达式和切片表达式的结果值。&lt;/li>
&lt;li>对字典变量的索引表达式的结果值。&lt;/li>
&lt;li>函数字面量和方法字面量，以及对它们的调用表达式的结果值。&lt;/li>
&lt;li>结构体字面量的字段值，也就是对结构体字面量的选择表达式的结果值。&lt;/li>
&lt;li>类型转换表达式的结果值。&lt;/li>
&lt;li>类型断言表达式的结果值。&lt;/li>
&lt;li>接收表达式的结果值。&lt;/li>
&lt;/ul>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>初看答案中的这些不可寻址的值好像并没有什么规律。不过别急，我们一起来梳理一下。你可以对照着 demo35.go 文件中的代码来看，这样应该会让你理解起来更容易一些。&lt;/p>
&lt;p>常量的值总是会被存储到一个确切的内存区域中，并且这种值肯定是&lt;strong>不可变的&lt;/strong>。基本类型值的字面量也是一样，其实它们本就可以被视为常量，只不过没有任何标识符可以代表它们罢了。&lt;/p>
&lt;p>第一个关键词：不可变的。由于 Go 语言中的字符串值也是不可变的，所以对于一个字符串类型的变量来说，基于它的索引或切片的结果值也都是不可寻址的，因为即使拿到了这种值的内存地址也改变不了什么。&lt;/p>
&lt;p>算术操作的结果值属于一种&lt;strong>临时结果&lt;/strong>。在我们把这种结果值赋给任何变量或常量之前，即使能拿到它的内存地址也是没有任何意义的。&lt;/p>
&lt;p>第二个关键词：临时结果。这个关键词能被用来解释很多现象。我们可以把各种对值字面量施加的表达式的求值结果都看做是临时结果。&lt;/p>
&lt;p>我们都知道，Go 语言中的表达式有很多种，其中常用的包括以下几种。&lt;/p>
&lt;ul>
&lt;li>用于获得某个元素的索引表达式。&lt;/li>
&lt;li>用于获得某个切片（片段）的切片表达式。&lt;/li>
&lt;li>用于访问某个字段的选择表达式。&lt;/li>
&lt;li>用于调用某个函数或方法的调用表达式。&lt;/li>
&lt;li>用于转换值的类型的类型转换表达式。&lt;/li>
&lt;li>用于判断值的类型的类型断言表达式。&lt;/li>
&lt;li>向通道发送元素值或从通道那里接收元素值的接收表达式。&lt;/li>
&lt;/ul>
&lt;p>我们把以上这些表达式施加在某个值字面量上一般都会得到一个临时结果。比如，对数组字面量和字典字面量的索引结果值，又比如，对数组字面量和切片字面量的切片结果值。它们都属于临时结果，都是不可寻址的。&lt;/p>
&lt;p>一个需要特别注意的例外是，对切片字面量的索引结果值是可寻址的。因为不论怎样，每个切片值都会持有一个底层数组，而这个底层数组中的每个元素值都是有一个确切的内存地址的。&lt;/p>
&lt;p>你可能会问，那么对切片字面量的切片结果值为什么却是不可寻址的？这是因为切片表达式总会返回一个新的切片值，而这个新的切片值在被赋给变量之前属于临时结果。&lt;/p>
&lt;p>你可能已经注意到了，我一直在说针对数组值、切片值或字典值的&lt;strong>字面量&lt;/strong> 的表达式会产生临时结果。如果针对的是数组类型或切片类型的&lt;strong>变量&lt;/strong>，那么索引或切片的结果值就都不属于临时结果了，是可寻址的。&lt;/p>
&lt;p>这主要因为变量的值本身就不是&amp;quot;临时的&amp;quot;。对比而言，值字面量在还没有与任何变量（或者说任何标识符）绑定之前是没有落脚点的，我们无法以任何方式引用到它们。这样的值就是&amp;quot;临时的&amp;quot;。&lt;/p>
&lt;p>再说一个例外。我们通过对字典类型的变量施加索引表达式，得到的结果值不属于临时结果，可是，这样的值却是不可寻址的。原因是，字典中的每个键 - 元素对的存储位置都可能会变化，而且这种变化外界是无法感知的。&lt;/p>
&lt;p>我们都知道，字典中总会有若干个哈希桶用于均匀地储存键 - 元素对。当满足一定条件时，字典可能会改变哈希桶的数量，并适时地把其中的键 - 元素对搬运到对应的新的哈希桶中。&lt;/p>
&lt;p>在这种情况下，获取字典中任何元素值的指针都是无意义的，也是&lt;strong>不安全的&lt;/strong>。我们不知道什么时候那个元素值会被搬运到何处，也不知道原先的那个内存地址上还会被存放什么别的东西。所以，这样的值就应该是不可寻址的。&lt;/p>
&lt;p>第三个关键词：不安全的。&amp;ldquo;不安全的&amp;quot;操作很可能会破坏程序的一致性，引发不可预知的错误，从而严重影响程序的功能和稳定性。&lt;/p>
&lt;p>再来看函数。函数在 Go 语言中是一等公民，所以我们可以把代表函数或方法的字面量或标识符赋给某个变量、传给某个函数或者从某个函数传出。但是，这样的函数和方法都是不可寻址的。一个原因是函数就是代码，是不可变的。&lt;/p>
&lt;p>另一个原因是，拿到指向一段代码的指针是不安全的。此外，对函数或方法的调用结果值也是不可寻址的，这是因为它们都属于临时结果。&lt;/p>
&lt;p>至于典型回答中最后列出的那几种值，由于都是针对值字面量的某种表达式的结果值，所以都属于临时结果，都不可寻址。&lt;/p>
&lt;p>好了，说了这么多，希望你已经有所领悟了。我来总结一下。&lt;/p>
&lt;ol>
&lt;li>&lt;strong>不可变的&lt;/strong>值不可寻址。常量、基本类型的值字面量、字符串变量的值、函数以及方法的字面量都是如此。其实这样规定也有安全性方面的考虑。&lt;/li>
&lt;li>绝大多数被视为&lt;strong>临时结果&lt;/strong>的值都是不可寻址的。算术操作的结果值属于临时结果，针对值字面量的表达式结果值也属于临时结果。但有一个例外，对切片字面量的索引结果值虽然也属于临时结果，但却是可寻址的。&lt;/li>
&lt;li>若拿到某值的指针可能会破坏程序的一致性，那么就是&lt;strong>不安全的&lt;/strong>，该值就不可寻址。由于字典的内部机制，对字典的索引结果值的取址操作都是不安全的。另外，获取由字面量或标识符代表的函数或方法的地址显然也是不安全的。&lt;/li>
&lt;/ol>
&lt;p>最后说一句，如果我们把临时结果赋给一个变量，那么它就是可寻址的了。如此一来，取得的指针指向的就是这个变量持有的那个值了。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;p>&lt;strong>问题 1：不可寻址的值在使用上有哪些限制？&lt;/strong>&lt;/p>
&lt;p>首当其冲的当然是无法使用取址操作符&lt;code>&amp;amp;&lt;/code>获取它们的指针了。不过，对不可寻址的值施加取址操作都会使编译器报错，所以倒是不用太担心，你只要记住我在前面讲述的那几条规律，并在编码的时候提前注意一下就好了。&lt;/p>
&lt;p>我们来看下面这个小问题。我们依然以那个结构体类型&lt;code>Dog&lt;/code>为例。&lt;/p>
&lt;pre>&lt;code>func New(name string) Dog {
return Dog{name}
}
&lt;/code>&lt;/pre>
&lt;p>我们再为它编写一个函数&lt;code>New&lt;/code>。这个函数会接受一个名为&lt;code>name&lt;/code>的&lt;code>string&lt;/code>类型的参数，并会用这个参数初始化一个&lt;code>Dog&lt;/code>类型的值，最后返回该值。我现在要问的是：如果我调用该函数，并直接以链式的手法调用其结果值的指针方法&lt;code>SetName&lt;/code>，那么可以达到预期的效果吗？&lt;/p>
&lt;pre>&lt;code>New(&amp;quot;little pig&amp;quot;).SetName(&amp;quot;monster&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>如果你还记得我在前面讲述的内容，那么肯定会知道调用&lt;code>New&lt;/code>函数所得到的结果值属于临时结果，是不可寻址的。&lt;/p>
&lt;p>可是，那又怎样呢？别忘了，我在讲结构体类型及其方法的时候还说过，我们可以在一个基本类型的值上调用它的指针方法，这是因为 Go 语言会自动地帮我们转译。&lt;/p>
&lt;p>更具体地说，对于一个&lt;code>Dog&lt;/code>类型的变量&lt;code>dog&lt;/code>来说，调用表达式&lt;code>dog.SetName(&amp;quot;monster&amp;quot;)&lt;/code>会被自动地转译为&lt;code>(&amp;amp;dog).SetName(&amp;quot;monster&amp;quot;)&lt;/code>，即：先取&lt;code>dog&lt;/code>的指针值，再在该指针值上调用&lt;code>SetName&lt;/code>方法。&lt;/p>
&lt;p>发现问题了吗？由于&lt;code>New&lt;/code>函数的调用结果值是不可寻址的，所以无法对它进行取址操作。因此，上边这行链式调用会让编译器报告两个错误，一个是果，即：不能在&lt;code>New(&amp;quot;little pig&amp;quot;)&lt;/code>的结果值上调用指针方法。一个是因，即：不能取得&lt;code>New(&amp;quot;little pig&amp;quot;)&lt;/code>的地址。&lt;/p>
&lt;p>除此之外，我们都知道，Go 语言中的&lt;code>++&lt;/code>和&lt;code>--&lt;/code>并不属于操作符，而分别是自增语句和自减语句的重要组成部分。&lt;/p>
&lt;p>虽然 Go 语言规范中的语法定义是，只要在&lt;code>++&lt;/code>或&lt;code>--&lt;/code>的左边添加一个表达式，就可以组成一个自增语句或自减语句，但是，它还明确了一个很重要的限制，那就是这个表达式的结果值必须是可寻址的。这就使得针对值字面量的表达式几乎都无法被用在这里。&lt;/p>
&lt;p>不过这有一个例外，虽然对字典字面量和字典变量索引表达式的结果值都是不可寻址的，但是这样的表达式却可以被用在自增语句和自减语句中。&lt;/p>
&lt;p>与之类似的规则还有两个。一个是，在赋值语句中，赋值操作符左边的表达式的结果值必须可寻址的，但是对字典的索引结果值也是可以的。&lt;/p>
&lt;p>另一个是，在带有&lt;code>range&lt;/code>子句的&lt;code>for&lt;/code>语句中，在&lt;code>range&lt;/code>关键字左边的表达式的结果值也都必须是可寻址的，不过对字典的索引结果值同样可以被用在这里。以上这三条规则我们合并起来记忆就可以了。&lt;/p>
&lt;p>与这些定死的规则相比，我刚刚讲到的那个与指针方法有关的问题，你需要好好理解一下，它涉及了两个知识点的联合运用。起码在我面试的时候，它是一个可选择的考点。&lt;/p>
&lt;p>&lt;strong>问题 2：怎样通过&lt;code>unsafe.Pointer&lt;/code>操纵可寻址的值？&lt;/strong>&lt;/p>
&lt;p>前边的基础知识很重要。不过现在让我们再次关注指针的用法。我说过，&lt;code>unsafe.Pointer&lt;/code>是像&lt;code>*Dog&lt;/code>类型的值这样的指针值和&lt;code>uintptr&lt;/code>值之间的桥梁，那么我们怎样利用&lt;code>unsafe.Pointer&lt;/code>的中转和&lt;code>uintptr&lt;/code>的底层操作来操纵像&lt;code>dog&lt;/code>这样的值呢？&lt;/p>
&lt;p>首先说明，这是一项黑科技。它可以绕过 Go 语言的编译器和其他工具的重重检查，并达到潜入内存修改数据的目的。这并不是一种正常的编程手段，使用它会很危险，很有可能造成安全隐患。&lt;/p>
&lt;p>我们总是应该优先使用常规代码包中提供的 API 去编写程序，当然也可以把像&lt;code>reflect&lt;/code>以及&lt;code>go/ast&lt;/code>这样的代码包作为备选项。作为上层应用的开发者，请谨慎地使用&lt;code>unsafe&lt;/code>包中的任何程序实体。&lt;/p>
&lt;p>不过既然说到这里了，我们还是要来一探究竟的。请看下面的代码：&lt;/p>
&lt;pre>&lt;code>dog := Dog{&amp;quot;little pig&amp;quot;}
dogP := &amp;amp;dog
dogPtr := uintptr(unsafe.Pointer(dogP))
&lt;/code>&lt;/pre>
&lt;p>我先声明了一个&lt;code>Dog&lt;/code>类型的变量&lt;code>dog&lt;/code>，然后用取址操作符&lt;code>&amp;amp;&lt;/code>，取出了它的指针值，并把它赋给了变量&lt;code>dogP&lt;/code>。&lt;/p>
&lt;p>最后，我使用了两个类型转换，先把&lt;code>dogP&lt;/code>转换成了一个&lt;code>unsafe.Pointer&lt;/code>类型的值，然后紧接着又把后者转换成了一个&lt;code>uintptr&lt;/code>的值，并把它赋给了变量&lt;code>dogPtr&lt;/code>。这背后隐藏着一些转换规则，如下：&lt;/p>
&lt;ol>
&lt;li>一个指针值（比如&lt;code>*Dog&lt;/code>类型的值）可以被转换为一个&lt;code>unsafe.Pointer&lt;/code>类型的值，反之亦然。&lt;/li>
&lt;li>一个&lt;code>uintptr&lt;/code>类型的值也可以被转换为一个&lt;code>unsafe.Pointer&lt;/code>类型的值，反之亦然。&lt;/li>
&lt;li>一个指针值无法被直接转换成一个&lt;code>uintptr&lt;/code>类型的值，反过来也是如此。&lt;/li>
&lt;/ol>
&lt;p>所以，对于指针值和&lt;code>uintptr&lt;/code>类型值之间的转换，必须使用&lt;code>unsafe.Pointer&lt;/code>类型的值作为中转。那么，我们把指针值转换成&lt;code>uintptr&lt;/code>类型的值有什么意义吗？&lt;/p>
&lt;pre>&lt;code>namePtr := dogPtr + unsafe.Offsetof(dogP.name)
nameP := (*string)(unsafe.Pointer(namePtr))
&lt;/code>&lt;/pre>
&lt;p>这里需要与&lt;code>unsafe.Offsetof&lt;/code>函数搭配使用才能看出端倪。&lt;code>unsafe.Offsetof&lt;/code>函数用于获取两个值在内存中的起始存储地址之间的偏移量，以字节为单位。&lt;/p>
&lt;p>这两个值一个是某个字段的值，另一个是该字段值所属的那个结构体值。我们在调用这个函数的时候，需要把针对字段的选择表达式传给它，比如&lt;code>dogP.name&lt;/code>。&lt;/p>
&lt;p>有了这个偏移量，又有了结构体值在内存中的起始存储地址（这里由&lt;code>dogPtr&lt;/code>变量代表），把它们相加我们就可以得到&lt;code>dogP&lt;/code>的&lt;code>name&lt;/code>字段值的起始存储地址了。这个地址由变量&lt;code>namePtr&lt;/code>代表。&lt;/p>
&lt;p>此后，我们可以再通过两次类型转换把&lt;code>namePtr&lt;/code>的值转换成一个&lt;code>*string&lt;/code>类型的值，这样就得到了指向&lt;code>dogP&lt;/code>的&lt;code>name&lt;/code>字段值的指针值。&lt;/p>
&lt;p>你可能会问，我直接用取址表达式&lt;code>&amp;amp;(dogP.name)&lt;/code>不就能拿到这个指针值了吗？干嘛绕这么大一圈呢？你可以想象一下，如果我们根本就不知道这个结构体类型是什么，也拿不到&lt;code>dogP&lt;/code>这个变量，那么还能去访问它的&lt;code>name&lt;/code>字段吗？&lt;/p>
&lt;p>答案是，只要有&lt;code>namePtr&lt;/code>就可以。它就是一个无符号整数，但同时也是一个指向了程序内部数据的内存地址。它可能会给我们带来一些好处，比如可以直接修改埋藏得很深的内部数据。&lt;/p>
&lt;p>但是，一旦我们有意或无意地把这个内存地址泄露出去，那么其他人就能够肆意地改动&lt;code>dogP.name&lt;/code>的值，以及周围的内存地址上存储的任何数据了。&lt;/p>
&lt;p>即使他们不知道这些数据的结构也无所谓啊，改不好还改不坏吗？不正确地改动一定会给程序带来不可预知的问题，甚至造成程序崩溃。这可能还是最好的灾难性后果；所以我才说，使用这种非正常的编程手段会很危险。&lt;/p>
&lt;p>好了，现在你知道了这种手段，也知道了它的危险性，那就谨慎对待，防患于未然吧。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>我们今天集中说了说与指针有关的问题。基于基本类型的指针值应该是我们最常用到的，也是我们最需要关注的，比如&lt;code>*Dog&lt;/code>类型的值。怎样得到一个这样的指针值呢？这需要用到取址操作和操作符&lt;code>&amp;amp;&lt;/code>。&lt;/p>
&lt;p>不过这里还有个前提，那就是取址操作的操作对象必须是可寻址的。关于这方面你需要记住三个关键词：不可变的、临时结果和不安全的。只要一个值符合了这三个关键词中的任何一个，它就是不可寻址的。&lt;/p>
&lt;p>但有一个例外，对切片字面量的索引结果值是可寻址的。那么不可寻址的值在使用上有哪些限制呢？一个最重要的限制是关于指针方法的，即：无法调用一个不可寻址值的指针方法。这涉及了两个知识点的联合运用。&lt;/p>
&lt;p>相比于刚说到的这些，&lt;code>unsafe.Pointer&lt;/code>类型和&lt;code>uintptr&lt;/code>类型的重要性好像就没那么高了。它们的值同样可以代表指针，并且比前面说的指针值更贴近于底层和内存。&lt;/p>
&lt;p>虽然我们可以利用它们去访问或修改一些内部数据，而且就灵活性而言，这种要比通用的方式高很多，但是这往往也会带来不容小觑的安全隐患。&lt;/p>
&lt;p>因此，在很多时候，使用它们操纵数据是弊大于利的。不过，对于硬币的背面，我们也总是有必要去了解的。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>今天的思考题是：引用类型的值的指针值是有意义的吗？如果没有意义，为什么？如果有意义，意义在哪里？&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 16丨go语句及其执行规则（上）</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/16%E4%B8%A8go%E8%AF%AD%E5%8F%A5%E5%8F%8A%E5%85%B6%E6%89%A7%E8%A1%8C%E8%A7%84%E5%88%99%E4%B8%8A/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/16%E4%B8%A8go%E8%AF%AD%E5%8F%A5%E5%8F%8A%E5%85%B6%E6%89%A7%E8%A1%8C%E8%A7%84%E5%88%99%E4%B8%8A/</guid><description>
&lt;p>你很棒，已经学完了关于 Go 语言数据类型的全部内容。我相信你不但已经知晓了怎样高效地使用 Go 语言内建的那些数据类型，还明白了怎样正确地创造自己的数据类型。&lt;/p>
&lt;p>对于 Go 语言的编程知识，你确实已经知道了不少了。不过，如果你真想玩转 Go 语言还需要知道它的一些特色流程和语法。&lt;/p>
&lt;p>尤其是我们将会在本篇文章中讨论的&lt;code>go&lt;/code>语句，这也是 Go 语言的最大特色了。它足可以代表 Go 语言最重要的编程哲学和并发编程模式。&lt;/p>
&lt;p>让我们再重温一下下面这句话：&lt;/p>
&lt;blockquote>
&lt;p>Don&amp;rsquo;t communicate by sharing memory; share memory by communicating.&lt;/p>
&lt;/blockquote>
&lt;p>从 Go 语言编程的角度解释，这句话的意思就是：不要通过共享数据来通讯，恰恰相反，要以通讯的方式共享数据。&lt;/p>
&lt;p>我们已经知道，通道（也就是 channel）类型的值，可以被用来以通讯的方式共享数据。更具体地说，它一般被用来在不同的 goroutine 之间传递数据。那么 goroutine 到底代表着什么呢？&lt;/p>
&lt;p>简单来说，goroutine 代表着并发编程模型中的用户级线程。你可能已经知道，操作系统本身提供了进程和线程，这两种并发执行程序的工具。&lt;/p>
&lt;h2 id="前导内容进程与线程">前导内容：进程与线程&lt;/h2>
&lt;p>进程，描述的就是程序的执行过程，是运行着的程序的代表。换句话说，一个进程其实就是某个程序运行时的一个产物。如果说静静地躺在那里的代码就是程序的话，那么奔跑着的、正在发挥着既有功能的代码就可以被称为进程。&lt;/p>
&lt;p>我们的电脑为什么可以同时运行那么多应用程序？我们的手机为什么可以有那么多 App 同时在后台刷新？这都是因为在它们的操作系统之上有多个代表着不同应用程序或 App 的进程在同时运行。&lt;/p>
&lt;p>再来说说线程。首先，线程总是在进程之内的，它可以被视为进程中运行着的控制流（或者说代码执行的流程）。&lt;/p>
&lt;p>一个进程至少会包含一个线程。如果一个进程只包含了一个线程，那么它里面的所有代码都只会被串行地执行。每个进程的第一个线程都会随着该进程的启动而被创建，它们可以被称为其所属进程的主线程。&lt;/p>
&lt;p>相对应的，如果一个进程中包含了多个线程，那么其中的代码就可以被并发地执行。除了进程的第一个线程之外，其他的线程都是由进程中已存在的线程创建出来的。&lt;/p>
&lt;p>也就是说，主线程之外的其他线程都只能由代码显式地创建和销毁。这需要我们在编写程序的时候进行手动控制，操作系统以及进程本身并不会帮我们下达这样的指令，它们只会忠实地执行我们的指令。&lt;/p>
&lt;p>不过，在 Go 程序当中，Go 语言的运行时（runtime）系统会帮助我们自动地创建和销毁系统级的线程。这里的系统级线程指的就是我们刚刚说过的操作系统提供的线程。&lt;/p>
&lt;p>而对应的用户级线程指的是架设在系统级线程之上的，由用户（或者说我们编写的程序）完全控制的代码执行流程。用户级线程的创建、销毁、调度、状态变更以及其中的代码和数据都完全需要我们的程序自己去实现和处理。&lt;/p>
&lt;p>这带来了很多优势，比如，因为它们的创建和销毁并不用通过操作系统去做，所以速度会很快，又比如，由于不用等着操作系统去调度它们的运行，所以往往会很容易控制并且可以很灵活。&lt;/p>
&lt;p>但是，劣势也是有的，最明显也最重要的一个劣势就是复杂。如果我们只使用了系统级线程，那么我们只要指明需要新线程执行的代码片段，并且下达创建或销毁线程的指令就好了，其他的一切具体实现都会由操作系统代劳。&lt;/p>
&lt;p>但是，如果使用用户级线程，我们就不得不既是指令下达者，又是指令执行者。我们必须全权负责与用户级线程有关的所有具体实现。&lt;/p>
&lt;p>操作系统不但不会帮忙，还会要求我们的具体实现必须与它正确地对接，否则用户级线程就无法被并发地，甚至正确地运行。毕竟我们编写的所有代码最终都需要通过操作系统才能在计算机上执行。这听起来就很麻烦，不是吗？&lt;/p>
&lt;p>&lt;strong>不过别担心，Go 语言不但有着独特的并发编程模型，以及用户级线程 goroutine，还拥有强大的用于调度 goroutine、对接系统级线程的调度器。&lt;/strong>&lt;/p>
&lt;p>这个调度器是 Go 语言运行时系统的重要组成部分，它主要负责统筹调配 Go 并发编程模型中的三个主要元素，即：G（goroutine 的缩写）、P（processor 的缩写）和 M（machine 的缩写）。&lt;/p>
&lt;p>其中的 M 指代的就是系统级线程。而 P 指的是一种可以承载若干个 G，且能够使这些 G 适时地与 M 进行对接，并得到真正运行的中介。&lt;/p>
&lt;p>从宏观上说，G 和 M 由于 P 的存在可以呈现出多对多的关系。当一个正在与某个 M 对接并运行着的 G，需要因某个事件（比如等待 I/O 或锁的解除）而暂停运行的时候，调度器总会及时地发现，并把这个 G 与那个 M 分离开，以释放计算资源供那些等待运行的 G 使用。&lt;/p>
&lt;p>而当一个 G 需要恢复运行的时候，调度器又会尽快地为它寻找空闲的计算资源（包括 M）并安排运行。另外，当 M 不够用时，调度器会帮我们向操作系统申请新的系统级线程，而当某个 M 已无用时，调度器又会负责把它及时地销毁掉。&lt;/p>
&lt;p>正因为调度器帮助我们做了很多事，所以我们的 Go 程序才总是能高效地利用操作系统和计算机资源。程序中的所有 goroutine 也都会被充分地调度，其中的代码也都会被并发地运行，即使这样的 goroutine 有数以十万计，也仍然可以如此。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/9e/7d/9ea14f68ffbcde373ddb61e186695d7d.png" alt="">&lt;/p>
&lt;p>&lt;strong>M、P、G 之间的关系（简化版）&lt;/strong>&lt;/p>
&lt;p>由于篇幅原因，关于 Go 语言内部的调度器和运行时系统的更多细节，我在这里就不再深入讲述了。你需要知道，Go 语言实现了一套非常完善的运行时系统，保证了我们的程序在高并发的情况下依旧能够稳定、高效地运行。&lt;/p>
&lt;p>如果你对这些具体的细节感兴趣，并还想进一步探索，那么我推荐你去看看我写的那本《Go 并发编程实战》。我在这本书中用了相当大的篇幅阐释了 Go 语言并发编程模型的原理、运作机制，以及所有与之紧密相关的知识。&lt;/p>
&lt;p>下面，我会从编程实践的角度出发，以&lt;code>go&lt;/code>语句的用法为主线，向你介绍&lt;code>go&lt;/code>语句的执行规则、最佳实践和使用禁忌。&lt;/p>
&lt;p>我们来看一下今天的&lt;strong>问题：什么是主 goroutine，它与我们启用的其他 goroutine 有什么不同？&lt;/strong>&lt;/p>
&lt;p>我们具体来看一道我在面试中经常提问的编程题。&lt;/p>
&lt;pre>&lt;code>package main
import &amp;quot;fmt&amp;quot;
func main() {
for i := 0; i &amp;lt; 10; i++ {
go func() {
fmt.Println(i)
}()
}
}
&lt;/code>&lt;/pre>
&lt;p>在 demo38.go 中，我只在&lt;code>main&lt;/code>函数中写了一条&lt;code>for&lt;/code>语句。这条&lt;code>for&lt;/code>语句中的代码会迭代运行 10 次，并有一个局部变量&lt;code>i&lt;/code>代表着当次迭代的序号，该序号是从&lt;code>0&lt;/code>开始的。&lt;/p>
&lt;p>在这条&lt;code>for&lt;/code>语句中仅有一条&lt;code>go&lt;/code>语句，这条&lt;code>go&lt;/code>语句中也仅有一条语句。这条最里面的语句调用了&lt;code>fmt.Println&lt;/code>函数并想要打印出变量&lt;code>i&lt;/code>的值。&lt;/p>
&lt;p>这个程序很简单，三条语句逐条嵌套。我的具体问题是：这个命令源码文件被执行后会打印出什么内容？&lt;/p>
&lt;p>这道题的&lt;strong>典型回答&lt;/strong>是：不会有任何内容被打印出来。&lt;/p>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>与一个进程总会有一个主线程类似，每一个独立的 Go 程序在运行时也总会有一个主 goroutine。这个主 goroutine 会在 Go 程序的运行准备工作完成后被自动地启用，并不需要我们做任何手动的操作。&lt;/p>
&lt;p>想必你已经知道，每条&lt;code>go&lt;/code>语句一般都会携带一个函数调用，这个被调用的函数常常被称为&lt;code>go&lt;/code>函数。而主 goroutine 的&lt;code>go&lt;/code>函数就是那个作为程序入口的&lt;code>main&lt;/code>函数。&lt;/p>
&lt;p>一定要注意，&lt;code>go&lt;/code>函数真正被执行的时间，总会与其所属的&lt;code>go&lt;/code>语句被执行的时间不同。当程序执行到一条&lt;code>go&lt;/code>语句的时候，Go 语言的运行时系统，会先试图从某个存放空闲的 G 的队列中获取一个 G（也就是 goroutine），它只有在找不到空闲 G 的情况下才会去创建一个新的 G。&lt;/p>
&lt;p>这也是为什么我总会说&amp;quot;启用&amp;quot;一个 goroutine，而不说&amp;quot;创建&amp;quot;一个 goroutine 的原因。已存在的 goroutine 总是会被优先复用。&lt;/p>
&lt;p>然而，创建 G 的成本也是非常低的。创建一个 G 并不会像新建一个进程或者一个系统级线程那样，必须通过操作系统的系统调用来完成，在 Go 语言的运行时系统内部就可以完全做到了，更何况一个 G 仅相当于为需要并发执行代码片段服务的上下文环境而已。&lt;/p>
&lt;p>在拿到了一个空闲的 G 之后，Go 语言运行时系统会用这个 G 去包装当前的那个&lt;code>go&lt;/code>函数（或者说该函数中的那些代码），然后再把这个 G 追加到某个存放可运行的 G 的队列中。&lt;/p>
&lt;p>这类队列中的 G 总是会按照先入先出的顺序，很快地由运行时系统内部的调度器安排运行。虽然这会很快，但是由于上面所说的那些准备工作还是不可避免的，所以耗时还是存在的。&lt;/p>
&lt;p>因此，&lt;code>go&lt;/code>函数的执行时间总是会明显滞后于它所属的&lt;code>go&lt;/code>语句的执行时间。当然了，这里所说的&amp;quot;明显滞后&amp;quot;是对于计算机的 CPU 时钟和 Go 程序来说的。我们在大多数时候都不会有明显的感觉。&lt;/p>
&lt;p>在说明了原理之后，我们再来看这种原理下的表象。请记住，只要&lt;code>go&lt;/code>语句本身执行完毕，Go 程序完全不会等待&lt;code>go&lt;/code>函数的执行，它会立刻去执行后边的语句。这就是所谓的异步并发地执行。&lt;/p>
&lt;p>这里&amp;quot;后边的语句&amp;quot;指的一般是&lt;code>for&lt;/code>语句中的下一个迭代。然而，当最后一个迭代运行的时候，这个&amp;quot;后边的语句&amp;quot;是不存在的。&lt;/p>
&lt;p>在 demo38.go 中的那条&lt;code>for&lt;/code>语句会以很快的速度执行完毕。当它执行完毕时，那 10 个包装了&lt;code>go&lt;/code>函数的 goroutine 往往还没有获得运行的机会。&lt;/p>
&lt;p>请注意，&lt;code>go&lt;/code>函数中的那个对&lt;code>fmt.Println&lt;/code>函数的调用是以&lt;code>for&lt;/code>语句中的变量&lt;code>i&lt;/code>作为参数的。你可以想象一下，如果当&lt;code>for&lt;/code>语句执行完毕的时候，这些&lt;code>go&lt;/code>函数都还没有执行，那么它们引用的变量&lt;code>i&lt;/code>的值将会是什么？&lt;/p>
&lt;p>它们都会是&lt;code>10&lt;/code>，对吗？那么这道题的答案会是&amp;quot;打印出 10 个&lt;code>10&lt;/code>&amp;quot;，是这样吗？&lt;/p>
&lt;p>在确定最终的答案之前，你还需要知道一个与主 goroutine 有关的重要特性，即：一旦主 goroutine 中的代码（也就是&lt;code>main&lt;/code>函数中的那些代码）执行完毕，当前的 Go 程序就会结束运行。&lt;/p>
&lt;p>如此一来，如果在 Go 程序结束的那一刻，还有 goroutine 未得到运行机会，那么它们就真的没有运行机会了，它们中的代码也就不会被执行了。&lt;/p>
&lt;p>我们刚才谈论过，当&lt;code>for&lt;/code>语句的最后一个迭代运行的时候，其中的那条&lt;code>go&lt;/code>语句即是最后一条语句。所以，在执行完这条&lt;code>go&lt;/code>语句之后，主 goroutine 中的代码也就执行完了，Go 程序会立即结束运行。那么，如果这样的话，还会有任何内容被打印出来吗？&lt;/p>
&lt;p>严谨地讲，Go 语言并不会去保证这些 goroutine 会以怎样的顺序运行。由于主 goroutine 会与我们手动启用的其他 goroutine 一起接受调度，又因为调度器很可能会在 goroutine 中的代码只执行了一部分的时候暂停，以期所有的 goroutine 有更公平的运行机会。&lt;/p>
&lt;p>所以哪个 goroutine 先执行完、哪个 goroutine 后执行完往往是不可预知的，除非我们使用了某种 Go 语言提供的方式进行了人为干预。然而，在这段代码中，我们并没有进行任何人为干预。&lt;/p>
&lt;p>那答案到底是什么呢？就 demo38.go 中如此简单的代码而言，绝大多数情况都会是&amp;quot;不会有任何内容被打印出来&amp;quot;。&lt;/p>
&lt;p>但是为了严谨起见，无论应聘者的回答是&amp;quot;打印出 10 个&lt;code>10&lt;/code>&amp;ldquo;还是&amp;quot;不会有任何内容被打印出来&amp;rdquo;，又或是&amp;quot;打印出乱序的&lt;code>0&lt;/code>到&lt;code>9&lt;/code>&amp;quot;，我都会紧接着去追问&amp;quot;为什么？&amp;ldquo;因为只有你知道了这背后的原理，你做出的回答才会被认为是正确的。&lt;/p>
&lt;p>这个原理是如此的重要，以至于如果你不知道它，那么就几乎无法编写出正确的可并发执行的程序。如果你不知道此原理，那么即使你写的并发程序看起来可以正确地运行，那也肯定是运气好而已。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>今天，我描述了 goroutine 在操作系统的并发编程体系，以及在 Go 语言并发编程模型中的地位和作用。这些知识点会为你打下一个坚实的基础。&lt;/p>
&lt;p>我还提到了 Go 语言内部的运行时系统和调度器，以及它们围绕着 goroutine 做的那些统筹调配和维护工作。这些内容中的每句话应该都会对你正确理解 goroutine 起到实质性的作用。你可以用这些知识去解释主问题中的那个程序在运行后为什么会产出那样的结果。&lt;/p>
&lt;p>下一篇内容，我们还会继续围绕 go 语句以及执行规则谈一些扩展知识，今天留给你的思考题就是：用什么手段可以对 goroutine 的启用数量加以限制？&lt;/p>
&lt;p>感谢你的收听，我们下次再见。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 17丨go语句及其执行规则（下）</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/17%E4%B8%A8go%E8%AF%AD%E5%8F%A5%E5%8F%8A%E5%85%B6%E6%89%A7%E8%A1%8C%E8%A7%84%E5%88%99%E4%B8%8B/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/17%E4%B8%A8go%E8%AF%AD%E5%8F%A5%E5%8F%8A%E5%85%B6%E6%89%A7%E8%A1%8C%E8%A7%84%E5%88%99%E4%B8%8B/</guid><description>
&lt;p>你好，我是郝林，今天我们继续分享 go 语句执行规则的内容。&lt;/p>
&lt;p>在上一篇文章中，我们讲到了 goroutine 在操作系统的并发编程体系，以及在 Go 语言并发编程模型中的地位和作用等一系列内容，今天我们继续来聊一聊这个话题。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;p>&lt;strong>问题 1：怎样才能让主 goroutine 等待其他 goroutine？&lt;/strong>&lt;/p>
&lt;p>我刚才说过，一旦主 goroutine 中的代码执行完毕，当前的 Go 程序就会结束运行，无论其他的 goroutine 是否已经在运行了。那么，怎样才能做到等其他的 goroutine 运行完毕之后，再让主 goroutine 结束运行呢？&lt;/p>
&lt;p>其实有很多办法可以做到这一点。其中，最简单粗暴的办法就是让主 goroutine&amp;quot;小睡&amp;quot;一会儿。&lt;/p>
&lt;pre>&lt;code>for i := 0; i &amp;lt; 10; i++ {
go func() {
fmt.Println(i)
}()
}
time.Sleep(time.Millisecond * 500)
&lt;/code>&lt;/pre>
&lt;p>在&lt;code>for&lt;/code>语句的后边，我调用了&lt;code>time&lt;/code>包的&lt;code>Sleep&lt;/code>函数，并把&lt;code>time.Millisecond * 500&lt;/code>的结果作为参数值传给了它。&lt;code>time.Sleep&lt;/code>函数的功能就是让当前的 goroutine（在这里就是主 goroutine）暂停运行一段时间，直到到达指定的恢复运行时间。&lt;/p>
&lt;p>我们可以把一个相对的时间传给该函数，就像我在这里传入的&amp;quot;500 毫秒&amp;quot;那样。&lt;code>time.Sleep&lt;/code>函数会在被调用时用当前的绝对时间，再加上相对时间计算出在未来的恢复运行时间。显然，一旦到达恢复运行时间，当前的 goroutine 就会从&amp;quot;睡眠&amp;quot;中醒来，并开始继续执行后边的代码。&lt;/p>
&lt;p>这个办法是可行的，只要&amp;quot;睡眠&amp;quot;的时间不要太短就好。不过，问题恰恰就在这里，我们让主 goroutine&amp;quot;睡眠&amp;quot;多长时间才是合适的呢？如果&amp;quot;睡眠&amp;quot;太短，则很可能不足以让其他的 goroutine 运行完毕，而若&amp;quot;睡眠&amp;quot;太长则纯属浪费时间，这个时间就太难把握了。&lt;/p>
&lt;p>你可能会想到，既然不容易预估时间，那我们就让其他的 goroutine 在运行完毕的时候告诉我们好了。这个思路很好，但怎么做呢？&lt;/p>
&lt;p>你是否想到了通道呢？我们先创建一个通道，它的长度应该与我们手动启用的 goroutine 的数量一致。在每个手动启用的 goroutine 即将运行完毕的时候，我们都要向该通道发送一个值。&lt;/p>
&lt;p>注意，这些发送表达式应该被放在它们的&lt;code>go&lt;/code>函数体的最后面。对应的，我们还需要在&lt;code>main&lt;/code>函数的最后从通道接收元素值，接收的次数也应该与手动启用的 goroutine 的数量保持一致。关于这些你可以到 demo39.go 文件中，去查看具体的写法。&lt;/p>
&lt;p>其中有一个细节你需要注意。我在声明通道&lt;code>sign&lt;/code>的时候是以&lt;code>chan struct{}&lt;/code>作为其类型的。其中的类型字面量&lt;code>struct{}&lt;/code>有些类似于空接口类型&lt;code>interface{}&lt;/code>，它代表了既不包含任何字段也不拥有任何方法的空结构体类型。&lt;/p>
&lt;p>注意，&lt;code>struct{}&lt;/code>类型值的表示法只有一个，即：&lt;code>struct{}{}&lt;/code>。并且，它占用的内存空间是&lt;code>0&lt;/code>字节。确切地说，这个值在整个 Go 程序中永远都只会存在一份。虽然我们可以无数次地使用这个值字面量，但是用到的却都是同一个值。&lt;/p>
&lt;p>当我们仅仅把通道当作传递某种简单信号的介质的时候，用&lt;code>struct{}&lt;/code>作为其元素类型是再好不过的了。顺便说一句，我在讲&amp;quot;结构体及其方法的使用法门&amp;quot;的时候留过一道与此相关的思考题，你可以返回去看一看。&lt;/p>
&lt;p>再说回当下的问题，有没有比使用通道更好的方法？如果你知道标准库中的代码包&lt;code>sync&lt;/code>的话，那么可能会想到&lt;code>sync.WaitGroup&lt;/code>类型。没错，这是一个更好的答案。不过具体的使用方式我在后边讲&lt;code>sync&lt;/code>包的时候再说。&lt;/p>
&lt;p>&lt;strong>问题 2：怎样让我们启用的多个 goroutine 按照既定的顺序运行？&lt;/strong>&lt;/p>
&lt;p>在很多时候，当我沿着上面的主问题以及第一个扩展问题一路问下来的时候，应聘者往往会被这第二个扩展问题难住。&lt;/p>
&lt;p>所以基于上一篇主问题中的代码，怎样做到让从&lt;code>0&lt;/code>到&lt;code>9&lt;/code>这几个整数按照自然数的顺序打印出来？你可能会说，我不用 goroutine 不就可以了嘛。没错，这样是可以，但是如果我不考虑这样做呢。你应该怎么解决这个问题？&lt;/p>
&lt;p>当然了，众多应聘者回答的其他答案也是五花八门的，有的可行，有的不可行，还有的把原来的代码改得面目全非。我下面就来说说我的思路，以及心目中的答案吧。这个答案并不一定是最佳的，也许你在看完之后还可以想到更优的答案。&lt;/p>
&lt;p>首先，我们需要稍微改造一下&lt;code>for&lt;/code>语句中的那个&lt;code>go&lt;/code>函数，要让它接受一个&lt;code>int&lt;/code>类型的参数，并在调用它的时候把变量&lt;code>i&lt;/code>的值传进去。为了不改动这个&lt;code>go&lt;/code>函数中的其他代码，我们可以把它的这个参数也命名为&lt;code>i&lt;/code>。&lt;/p>
&lt;pre>&lt;code>for i := 0; i &amp;lt; 10; i++ {
go func(i int) {
fmt.Println(i)
}(i)
}
&lt;/code>&lt;/pre>
&lt;p>只有这样，Go 语言才能保证每个 goroutine 都可以拿到一个唯一的整数。其原因与&lt;code>go&lt;/code>函数的执行时机有关。&lt;/p>
&lt;p>我在前面已经讲过了。在&lt;code>go&lt;/code>语句被执行时，我们传给&lt;code>go&lt;/code>函数的参数&lt;code>i&lt;/code>会先被求值，如此就得到了当次迭代的序号。之后，无论&lt;code>go&lt;/code>函数会在什么时候执行，这个参数值都不会变。也就是说，&lt;code>go&lt;/code>函数中调用的&lt;code>fmt.Println&lt;/code>函数打印的一定会是那个当次迭代的序号。&lt;/p>
&lt;p>然后，我们在着手改造&lt;code>for&lt;/code>语句中的&lt;code>go&lt;/code>函数。&lt;/p>
&lt;pre>&lt;code>for i := uint32(0); i &amp;lt; 10; i++ {
go func(i uint32) {
fn := func() {
fmt.Println(i)
}
trigger(i, fn)
}(i)
}
&lt;/code>&lt;/pre>
&lt;p>我在&lt;code>go&lt;/code>函数中先声明了一个匿名的函数，并把它赋给了变量&lt;code>fn&lt;/code>。这个匿名函数做的事情很简单，只是调用&lt;code>fmt.Println&lt;/code>函数以打印&lt;code>go&lt;/code>函数的参数&lt;code>i&lt;/code>的值。&lt;/p>
&lt;p>在这之后，我调用了一个名叫&lt;code>trigger&lt;/code>的函数，并把&lt;code>go&lt;/code>函数的参数&lt;code>i&lt;/code>和刚刚声明的变量&lt;code>fn&lt;/code>作为参数传给了它。注意，&lt;code>for&lt;/code>语句声明的局部变量&lt;code>i&lt;/code>和&lt;code>go&lt;/code>函数的参数&lt;code>i&lt;/code>的类型都变了，都由&lt;code>int&lt;/code>变为了&lt;code>uint32&lt;/code>。至于为什么，我一会儿再说。&lt;/p>
&lt;p>再来说&lt;code>trigger&lt;/code>函数。该函数接受两个参数，一个是&lt;code>uint32&lt;/code>类型的参数&lt;code>i&lt;/code>, 另一个是&lt;code>func()&lt;/code>类型的参数&lt;code>fn&lt;/code>。你应该记得，&lt;code>func()&lt;/code>代表的是既无参数声明也无结果声明的函数类型。&lt;/p>
&lt;pre>&lt;code>trigger := func(i uint32, fn func()) {
for {
if n := atomic.LoadUint32(&amp;amp;count); n == i {
fn()
atomic.AddUint32(&amp;amp;count, 1)
break
}
time.Sleep(time.Nanosecond)
}
}
&lt;/code>&lt;/pre>
&lt;p>&lt;code>trigger&lt;/code>函数会不断地获取一个名叫&lt;code>count&lt;/code>的变量的值，并判断该值是否与参数&lt;code>i&lt;/code>的值相同。如果相同，那么就立即调用&lt;code>fn&lt;/code>代表的函数，然后把&lt;code>count&lt;/code>变量的值加&lt;code>1&lt;/code>，最后显式地退出当前的循环。否则，我们就先让当前的 goroutine&amp;quot;睡眠&amp;quot;一个纳秒再进入下一个迭代。&lt;/p>
&lt;p>注意，我操作变量&lt;code>count&lt;/code>的时候使用的都是原子操作。这是由于&lt;code>trigger&lt;/code>函数会被多个 goroutine 并发地调用，所以它用到的非本地变量&lt;code>count&lt;/code>，就被多个用户级线程共用了。因此，对它的操作就产生了竞态条件（race condition），破坏了程序的并发安全性。&lt;/p>
&lt;p>所以，我们总是应该对这样的操作加以保护，在&lt;code>sync/atomic&lt;/code>包中声明了很多用于原子操作的函数。&lt;/p>
&lt;p>另外，由于我选用的原子操作函数对被操作的数值的类型有约束，所以我才对&lt;code>count&lt;/code>以及相关的变量和参数的类型进行了统一的变更（由&lt;code>int&lt;/code>变为了&lt;code>uint32&lt;/code>）。&lt;/p>
&lt;p>纵观&lt;code>count&lt;/code>变量、&lt;code>trigger&lt;/code>函数以及改造后的&lt;code>for&lt;/code>语句和&lt;code>go&lt;/code>函数，我要做的是，让&lt;code>count&lt;/code>变量成为一个信号，它的值总是下一个可以调用打印函数的&lt;code>go&lt;/code>函数的序号。&lt;/p>
&lt;p>这个序号其实就是启用 goroutine 时，那个当次迭代的序号。也正因为如此，&lt;code>go&lt;/code>函数实际的执行顺序才会与&lt;code>go&lt;/code>语句的执行顺序完全一致。此外，这里的&lt;code>trigger&lt;/code>函数实现了一种自旋（spinning）。除非发现条件已满足，否则它会不断地进行检查。&lt;/p>
&lt;p>最后要说的是，因为我依然想让主 goroutine 最后一个运行完毕，所以还需要加一行代码。不过既然有了&lt;code>trigger&lt;/code>函数，我就没有再使用通道。&lt;/p>
&lt;pre>&lt;code>trigger(10, func(){})
&lt;/code>&lt;/pre>
&lt;p>调用&lt;code>trigger&lt;/code>函数完全可以达到相同的效果。由于当所有我手动启用的 goroutine 都运行完毕之后，&lt;code>count&lt;/code>的值一定会是&lt;code>10&lt;/code>，所以我就把&lt;code>10&lt;/code>作为了第一个参数值。又由于我并不想打印这个&lt;code>10&lt;/code>，所以我把一个什么都不做的函数作为了第二个参数值。&lt;/p>
&lt;p>总之，通过上述的改造，我使得异步发起的&lt;code>go&lt;/code>函数得到了同步地（或者说按照既定顺序地）执行，你也可以动手自己试一试，感受一下。&lt;/p>
&lt;p>&lt;strong>总结&lt;/strong>&lt;/p>
&lt;p>在本篇文章中，我们接着上一篇文章的主问题，讨论了当我们想让运行结果更加可控的时候，应该怎样去做。&lt;/p>
&lt;p>主 goroutine 的运行若过早结束，那么我们的并发程序的功能就很可能无法全部完成。所以我们往往需要通过一些手段去进行干涉，比如调用&lt;code>time.Sleep&lt;/code>函数或者使用通道。我们在后面的文章中还会讨论更高级的手段。&lt;/p>
&lt;p>另外，&lt;code>go&lt;/code>函数的实际执行顺序往往与其所属的&lt;code>go&lt;/code>语句的执行顺序（或者说 goroutine 的启用顺序）不同，而且默认情况下的执行顺序是不可预知的。那怎样才能让这两个顺序一致呢？其实复杂的实现方式有不少，但是可能会把原来的代码改得面目全非。我在这里提供了一种比较简单、清晰的改造方案，供你参考。&lt;/p>
&lt;p>总之，我希望通过上述基础知识以及三个连贯的问题帮你串起一条主线。这应该会让你更快地深入理解 goroutine 及其背后的并发编程模型，从而更加游刃有余地使用&lt;code>go&lt;/code>语句。&lt;/p>
&lt;p>&lt;strong>思考题&lt;/strong>&lt;/p>
&lt;p>1.&lt;code>runtime&lt;/code>包中提供了哪些与模型三要素 G、P 和 M 相关的函数？（模型三要素内容在上一篇）&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 18丨if语句、for语句和switch语句</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/18%E4%B8%A8if%E8%AF%AD%E5%8F%A5for%E8%AF%AD%E5%8F%A5%E5%92%8Cswitch%E8%AF%AD%E5%8F%A5/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/18%E4%B8%A8if%E8%AF%AD%E5%8F%A5for%E8%AF%AD%E5%8F%A5%E5%92%8Cswitch%E8%AF%AD%E5%8F%A5/</guid><description>
&lt;p>在上两篇文章中，我主要为你讲解了与&lt;code>go&lt;/code>语句、goroutine 和 Go 语言调度器有关的知识和技法。&lt;/p>
&lt;p>内容很多，你不用急于完全消化，可以在编程实践过程中逐步理解和感悟，争取夯实它们。&lt;/p>
&lt;hr>
&lt;p>现在，让我们暂时走下神坛，回归民间。我今天要讲的&lt;code>if&lt;/code>语句、&lt;code>for&lt;/code>语句和&lt;code>switch&lt;/code>语句都属于 Go 语言的基本流程控制语句。它们的语法看起来很朴素，但实际上也会有一些使用技巧和注意事项。我在本篇文章中会以一系列面试题为线索，为你讲述它们的用法。&lt;/p>
&lt;p>那么，&lt;strong>今天的问题是：使用携带&lt;code>range&lt;/code>子句的&lt;code>for&lt;/code>语句时需要注意哪些细节？&lt;/strong> 这是一个比较笼统的问题。我还是通过编程题来讲解吧。&lt;/p>
&lt;blockquote>
&lt;p>本问题中的代码都被放在了命令源码文件 demo41.go 的&lt;code>main&lt;/code>函数中的。为了专注问题本身，本篇文章中展示的编程题会省略掉一部分代码包声明语句、代码包导入语句和&lt;code>main&lt;/code>函数本身的声明部分。&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code>numbers1 := []int{1, 2, 3, 4, 5, 6}
for i := range numbers1 {
if i == 3 {
numbers1[i] |= i
}
}
fmt.Println(numbers1)
&lt;/code>&lt;/pre>
&lt;p>我先声明了一个元素类型为&lt;code>int&lt;/code>的切片类型的变量&lt;code>numbers1&lt;/code>，在该切片中有 6 个元素值，分别是从&lt;code>1&lt;/code>到&lt;code>6&lt;/code>的整数。我用一条携带&lt;code>range&lt;/code>子句的&lt;code>for&lt;/code>语句去迭代&lt;code>numbers1&lt;/code>变量中的所有元素值。&lt;/p>
&lt;p>在这条&lt;code>for&lt;/code>语句中，只有一个迭代变量&lt;code>i&lt;/code>。我在每次迭代时，都会先去判断&lt;code>i&lt;/code>的值是否等于&lt;code>3&lt;/code>，如果结果为&lt;code>true&lt;/code>，那么就让&lt;code>numbers1&lt;/code>的第&lt;code>i&lt;/code>个元素值与&lt;code>i&lt;/code>本身做按位或的操作，再把操作结果作为&lt;code>numbers1&lt;/code>的新的第&lt;code>i&lt;/code>个元素值。最后我会打印出&lt;code>numbers1&lt;/code>的值。&lt;/p>
&lt;p>所以具体的问题就是，这段代码执行后会打印出什么内容？&lt;/p>
&lt;p>这里的&lt;strong>典型回答&lt;/strong> 是：打印的内容会是&lt;code>[1 2 3 7 5 6]&lt;/code>。&lt;/p>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>你心算得到的答案是这样吗？让我们一起来复现一下这个计算过程。&lt;/p>
&lt;p>当&lt;code>for&lt;/code>语句被执行的时候，在&lt;code>range&lt;/code>关键字右边的&lt;code>numbers1&lt;/code>会先被求值。&lt;/p>
&lt;p>这个位置上的代码被称为&lt;code>range&lt;/code>表达式。&lt;code>range&lt;/code>表达式的结果值可以是数组、数组的指针、切片、字符串、字典或者允许接收操作的通道中的某一个，并且结果值只能有一个。&lt;/p>
&lt;p>对于不同种类的&lt;code>range&lt;/code>表达式结果值，&lt;code>for&lt;/code>语句的迭代变量的数量可以有所不同。&lt;/p>
&lt;p>就拿我们这里的&lt;code>numbers1&lt;/code>来说，它是一个切片，那么迭代变量就可以有两个，右边的迭代变量代表当次迭代对应的某一个元素值，而左边的迭代变量则代表该元素值在切片中的索引值。&lt;/p>
&lt;p>那么，如果像本题代码中的&lt;code>for&lt;/code>语句那样，只有一个迭代变量的情况意味着什么呢？这意味着，该迭代变量只会代表当次迭代对应的元素值的索引值。&lt;/p>
&lt;p>更宽泛地讲，当只有一个迭代变量的时候，数组、数组的指针、切片和字符串的元素值都是无处安放的，我们只能拿到按照从小到大顺序给出的一个个索引值。&lt;/p>
&lt;p>因此，这里的迭代变量&lt;code>i&lt;/code>的值会依次是从&lt;code>0&lt;/code>到&lt;code>5&lt;/code>的整数。当&lt;code>i&lt;/code>的值等于&lt;code>3&lt;/code>的时候，与之对应的是切片中的第 4 个元素值&lt;code>4&lt;/code>。对&lt;code>4&lt;/code>和&lt;code>3&lt;/code>进行按位或操作得到的结果是&lt;code>7&lt;/code>。这就是答案中的第 4 个整数是&lt;code>7&lt;/code>的原因了。&lt;/p>
&lt;p>&lt;strong>现在，我稍稍修改一下上面的代码。我们再来估算一下打印内容。&lt;/strong>&lt;/p>
&lt;pre>&lt;code>numbers2 := [...]int{1, 2, 3, 4, 5, 6}
maxIndex2 := len(numbers2) - 1
for i, e := range numbers2 {
if i == maxIndex2 {
numbers2[0] += e
} else {
numbers2[i+1] += e
}
}
fmt.Println(numbers2)
&lt;/code>&lt;/pre>
&lt;p>注意，我把迭代的对象换成了&lt;code>numbers2&lt;/code>。&lt;code>numbers2&lt;/code>中的元素值同样是从&lt;code>1&lt;/code>到&lt;code>6&lt;/code>的 6 个整数，并且元素类型同样是&lt;code>int&lt;/code>，但它是一个数组而不是一个切片。&lt;/p>
&lt;p>在&lt;code>for&lt;/code>语句中，我总是会对紧挨在当次迭代对应的元素后边的那个元素，进行重新赋值，新的值会是这两个元素的值之和。当迭代到最后一个元素时，我会把此&lt;code>range&lt;/code>表达式结果值中的第一个元素值，替换为它的原值与最后一个元素值的和，最后，我会打印出&lt;code>numbers2&lt;/code>的值。&lt;/p>
&lt;p>&lt;strong>对于这段代码，我的问题依旧是：打印的内容会是什么？你可以先思考一下。&lt;/strong>&lt;/p>
&lt;p>好了，我要公布答案了。打印的内容会是&lt;code>[7 3 5 7 9 11]&lt;/code>。我先来重现一下计算过程。当&lt;code>for&lt;/code>语句被执行的时候，在&lt;code>range&lt;/code>关键字右边的&lt;code>numbers2&lt;/code>会先被求值。&lt;/p>
&lt;p>这里需要注意两点：&lt;/p>
&lt;ol>
&lt;li>&lt;code>range&lt;/code>表达式只会在&lt;code>for&lt;/code>语句开始执行时被求值一次，无论后边会有多少次迭代；&lt;/li>
&lt;li>&lt;code>range&lt;/code>表达式的求值结果会被复制，也就是说，被迭代的对象是&lt;code>range&lt;/code>表达式结果值的副本而不是原值。&lt;/li>
&lt;/ol>
&lt;p>基于这两个规则，我们接着往下看。在第一次迭代时，我改变的是&lt;code>numbers2&lt;/code>的第二个元素的值，新值为&lt;code>3&lt;/code>，也就是&lt;code>1&lt;/code>和&lt;code>2&lt;/code>之和。&lt;/p>
&lt;p>但是，被迭代的对象的第二个元素却没有任何改变，毕竟它与&lt;code>numbers2&lt;/code>已经是毫不相关的两个数组了。因此，在第二次迭代时，我会把&lt;code>numbers2&lt;/code>的第三个元素的值修改为&lt;code>5&lt;/code>，即被迭代对象的第二个元素值&lt;code>2&lt;/code>和第三个元素值&lt;code>3&lt;/code>的和。&lt;/p>
&lt;p>以此类推，之后的&lt;code>numbers2&lt;/code>的元素值依次会是&lt;code>7&lt;/code>、&lt;code>9&lt;/code>和&lt;code>11&lt;/code>。当迭代到最后一个元素时，我会把&lt;code>numbers2&lt;/code>的第一个元素的值修改为&lt;code>1&lt;/code>和&lt;code>6&lt;/code>之和。&lt;/p>
&lt;p>好了，现在该你操刀了。你需要把&lt;code>numbers2&lt;/code>的值由一个数组改成一个切片，其中的元素值都不要变。为了避免混淆，你还要把这个切片值赋给变量&lt;code>numbers3&lt;/code>，并且把后边代码中所有的&lt;code>numbers2&lt;/code>都改为&lt;code>numbers3&lt;/code>。&lt;/p>
&lt;p>问题是不变的，执行这段修改版的代码后打印的内容会是什么呢？如果你实在估算不出来，可以先实际执行一下，然后再尝试解释看到的答案。提示一下，切片与数组是不同的，前者是引用类型的，而后者是值类型的。&lt;/p>
&lt;p>我们可以先接着讨论后边的内容，但是我强烈建议你一定要回来，再看看我留给你的这个问题，认真地思考和计算一下。&lt;/p>
&lt;p>&lt;strong>知识扩展&lt;/strong>&lt;/p>
&lt;p>&lt;strong>问题 1：&lt;code>switch&lt;/code>语句中的&lt;code>switch&lt;/code>表达式和&lt;code>case&lt;/code>表达式之间有着怎样的联系？&lt;/strong>&lt;/p>
&lt;p>先来看一段代码。&lt;/p>
&lt;pre>&lt;code>value1 := [...]int8{0, 1, 2, 3, 4, 5, 6}
switch 1 + 3 {
case value1[0], value1[1]:
fmt.Println(&amp;quot;0 or 1&amp;quot;)
case value1[2], value1[3]:
fmt.Println(&amp;quot;2 or 3&amp;quot;)
case value1[4], value1[5], value1[6]:
fmt.Println(&amp;quot;4 or 5 or 6&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;p>我先声明了一个数组类型的变量&lt;code>value1&lt;/code>，该变量的元素类型是&lt;code>int8&lt;/code>。在后边的&lt;code>switch&lt;/code>语句中，被夹在&lt;code>switch&lt;/code>关键字和左花括号&lt;code>{&lt;/code>之间的是&lt;code>1 + 3&lt;/code>，这个位置上的代码被称为&lt;code>switch&lt;/code>表达式。这个&lt;code>switch&lt;/code>语句还包含了三个&lt;code>case&lt;/code>子句，而每个&lt;code>case&lt;/code>子句又各包含了一个&lt;code>case&lt;/code>表达式和一条打印语句。&lt;/p>
&lt;p>所谓的&lt;code>case&lt;/code>表达式一般由&lt;code>case&lt;/code>关键字和一个表达式列表组成，表达式列表中的多个表达式之间需要有英文逗号&lt;code>,&lt;/code>分割，比如，上面代码中的&lt;code>case value1[0], value1[1]&lt;/code>就是一个&lt;code>case&lt;/code>表达式，其中的两个子表达式都是由索引表达式表示的。&lt;/p>
&lt;p>另外的两个&lt;code>case&lt;/code>表达式分别是&lt;code>case value1[2], value1[3]&lt;/code>和&lt;code>case value1[4], value1[5], value1[6]&lt;/code>。&lt;/p>
&lt;p>此外，在这里的每个&lt;code>case&lt;/code>子句中的那些打印语句，会分别打印出不同的内容，这些内容用于表示&lt;code>case&lt;/code>子句被选中的原因，比如，打印内容&lt;code>0 or 1&lt;/code>表示当前&lt;code>case&lt;/code>子句被选中是因为&lt;code>switch&lt;/code>表达式的结果值等于&lt;code>0&lt;/code>或&lt;code>1&lt;/code>中的某一个。另外两条打印语句会分别打印出&lt;code>2 or 3&lt;/code>和&lt;code>4 or 5 or 6&lt;/code>。&lt;/p>
&lt;p>现在问题来了，拥有这样三个&lt;code>case&lt;/code>表达式的&lt;code>switch&lt;/code>语句可以成功通过编译吗？如果不可以，原因是什么？如果可以，那么该&lt;code>switch&lt;/code>语句被执行后会打印出什么内容。&lt;/p>
&lt;p>我刚才说过，只要&lt;code>switch&lt;/code>表达式的结果值与某个&lt;code>case&lt;/code>表达式中的任意一个子表达式的结果值相等，该&lt;code>case&lt;/code>表达式所属的&lt;code>case&lt;/code>子句就会被选中。&lt;/p>
&lt;p>并且，一旦某个&lt;code>case&lt;/code>子句被选中，其中的附带在&lt;code>case&lt;/code>表达式后边的那些语句就会被执行。与此同时，其他的所有&lt;code>case&lt;/code>子句都会被忽略。&lt;/p>
&lt;p>当然了，如果被选中的&lt;code>case&lt;/code>子句附带的语句列表中包含了&lt;code>fallthrough&lt;/code>语句，那么紧挨在它下边的那个&lt;code>case&lt;/code>子句附带的语句也会被执行。&lt;/p>
&lt;p>正因为存在上述判断相等的操作（以下简称判等操作），&lt;code>switch&lt;/code>语句对&lt;code>switch&lt;/code>表达式的结果类型，以及各个&lt;code>case&lt;/code>表达式中子表达式的结果类型都是有要求的。毕竟，在 Go 语言中，只有类型相同的值之间才有可能被允许进行判等操作。&lt;/p>
&lt;p>如果&lt;code>switch&lt;/code>表达式的结果值是无类型的常量，比如&lt;code>1 + 3&lt;/code>的求值结果就是无类型的常量&lt;code>4&lt;/code>，那么这个常量会被自动地转换为此种常量的默认类型的值，比如整数&lt;code>4&lt;/code>的默认类型是&lt;code>int&lt;/code>，又比如浮点数&lt;code>3.14&lt;/code>的默认类型是&lt;code>float64&lt;/code>。&lt;/p>
&lt;p>因此，由于上述代码中的&lt;code>switch&lt;/code>表达式的结果类型是&lt;code>int&lt;/code>，而那些&lt;code>case&lt;/code>表达式中子表达式的结果类型却是&lt;code>int8&lt;/code>，它们的类型并不相同，所以这条&lt;code>switch&lt;/code>语句是无法通过编译的。&lt;/p>
&lt;p>再来看一段很类似的代码：&lt;/p>
&lt;pre>&lt;code>value2 := [...]int8{0, 1, 2, 3, 4, 5, 6}
switch value2[4] {
case 0, 1:
fmt.Println(&amp;quot;0 or 1&amp;quot;)
case 2, 3:
fmt.Println(&amp;quot;2 or 3&amp;quot;)
case 4, 5, 6:
fmt.Println(&amp;quot;4 or 5 or 6&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;p>其中的变量&lt;code>value2&lt;/code>与&lt;code>value1&lt;/code>的值是完全相同的。但不同的是，我把&lt;code>switch&lt;/code>表达式换成了&lt;code>value2[4]&lt;/code>，并把下边那三个&lt;code>case&lt;/code>表达式分别换为了&lt;code>case 0, 1&lt;/code>、&lt;code>case 2, 3&lt;/code>和&lt;code>case 4, 5, 6&lt;/code>。&lt;/p>
&lt;p>如此一来，&lt;code>switch&lt;/code>表达式的结果值是&lt;code>int8&lt;/code>类型的，而那些&lt;code>case&lt;/code>表达式中子表达式的结果值却是无类型的常量了。这与之前的情况恰恰相反。那么，这样的&lt;code>switch&lt;/code>语句可以通过编译吗？&lt;/p>
&lt;p>答案是肯定的。因为，如果&lt;code>case&lt;/code>表达式中子表达式的结果值是无类型的常量，那么它的类型会被自动地转换为&lt;code>switch&lt;/code>表达式的结果类型，又由于上述那几个整数都可以被转换为&lt;code>int8&lt;/code>类型的值，所以对这些表达式的结果值进行判等操作是没有问题的。&lt;/p>
&lt;p>当然了，如果这里说的自动转换没能成功，那么&lt;code>switch&lt;/code>语句照样通不过编译。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/91/1c/91add0a66b9956f81086285aabc20c1c.png" alt="">&lt;/p>
&lt;p>（switch 语句中的自动类型转换）&lt;/p>
&lt;p>通过上面这两道题，你应该可以搞清楚&lt;code>switch&lt;/code>表达式和&lt;code>case&lt;/code>表达式之间的联系了。由于需要进行判等操作，所以前者和后者中的子表达式的结果类型需要相同。&lt;/p>
&lt;p>&lt;code>switch&lt;/code>语句会进行有限的类型转换，但肯定不能保证这种转换可以统一它们的类型。还要注意，如果这些表达式的结果类型有某个接口类型，那么一定要小心检查它们的动态值是否都具有可比性（或者说是否允许判等操作）。&lt;/p>
&lt;p>因为，如果答案是否定的，虽然不会造成编译错误，但是后果会更加严重：引发 panic（也就是运行时恐慌）。&lt;/p>
&lt;p>&lt;strong>问题 2：&lt;code>switch&lt;/code>语句对它的&lt;code>case&lt;/code>表达式有哪些约束？&lt;/strong>&lt;/p>
&lt;p>我在上一个问题的阐述中还重点表达了一点，不知你注意到了没有，那就是：&lt;code>switch&lt;/code>语句在&lt;code>case&lt;/code>子句的选择上是具有唯一性的。&lt;/p>
&lt;p>正因为如此，&lt;code>switch&lt;/code>语句不允许&lt;code>case&lt;/code>表达式中的子表达式结果值存在相等的情况，不论这些结果值相等的子表达式，是否存在于不同的&lt;code>case&lt;/code>表达式中，都会是这样的结果。具体请看这段代码：&lt;/p>
&lt;pre>&lt;code>value3 := [...]int8{0, 1, 2, 3, 4, 5, 6}
switch value3[4] {
case 0, 1, 2:
fmt.Println(&amp;quot;0 or 1 or 2&amp;quot;)
case 2, 3, 4:
fmt.Println(&amp;quot;2 or 3 or 4&amp;quot;)
case 4, 5, 6:
fmt.Println(&amp;quot;4 or 5 or 6&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;p>变量&lt;code>value3&lt;/code>的值同&lt;code>value1&lt;/code>，依然是由从&lt;code>0&lt;/code>到&lt;code>6&lt;/code>的 7 个整数组成的数组，元素类型是&lt;code>int8&lt;/code>。&lt;code>switch&lt;/code>表达式是&lt;code>value3[4]&lt;/code>，三个&lt;code>case&lt;/code>表达式分别是&lt;code>case 0, 1, 2&lt;/code>、&lt;code>case 2, 3, 4&lt;/code>和&lt;code>case 4, 5, 6&lt;/code>。&lt;/p>
&lt;p>由于在这三个&lt;code>case&lt;/code>表达式中存在结果值相等的子表达式，所以这个&lt;code>switch&lt;/code>语句无法通过编译。不过，好在这个约束本身还有个约束，那就是只针对结果值为常量的子表达式。&lt;/p>
&lt;p>比如，子表达式&lt;code>1+1&lt;/code>和&lt;code>2&lt;/code>不能同时出现，&lt;code>1+3&lt;/code>和&lt;code>4&lt;/code>也不能同时出现。有了这个约束的约束，我们就可以想办法绕过这个对子表达式的限制了。再看一段代码：&lt;/p>
&lt;pre>&lt;code>value5 := [...]int8{0, 1, 2, 3, 4, 5, 6}
switch value5[4] {
case value5[0], value5[1], value5[2]:
fmt.Println(&amp;quot;0 or 1 or 2&amp;quot;)
case value5[2], value5[3], value5[4]:
fmt.Println(&amp;quot;2 or 3 or 4&amp;quot;)
case value5[4], value5[5], value5[6]:
fmt.Println(&amp;quot;4 or 5 or 6&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;p>变量名换成了&lt;code>value5&lt;/code>，但这不是重点。重点是，我把&lt;code>case&lt;/code>表达式中的常量都换成了诸如&lt;code>value5[0]&lt;/code>这样的索引表达式。&lt;/p>
&lt;p>虽然第一个&lt;code>case&lt;/code>表达式和第二个&lt;code>case&lt;/code>表达式都包含了&lt;code>value5[2]&lt;/code>，并且第二个&lt;code>case&lt;/code>表达式和第三个&lt;code>case&lt;/code>表达式都包含了&lt;code>value5[4]&lt;/code>，但这已经不是问题了。这条&lt;code>switch&lt;/code>语句可以成功通过编译。&lt;/p>
&lt;p>不过，这种绕过方式对用于类型判断的&lt;code>switch&lt;/code>语句（以下简称为类型&lt;code>switch&lt;/code>语句）就无效了。因为类型&lt;code>switch&lt;/code>语句中的&lt;code>case&lt;/code>表达式的子表达式，都必须直接由类型字面量表示，而无法通过间接的方式表示。代码如下：&lt;/p>
&lt;pre>&lt;code>value6 := interface{}(byte(127))
switch t := value6.(type) {
case uint8, uint16:
fmt.Println(&amp;quot;uint8 or uint16&amp;quot;)
case byte:
fmt.Printf(&amp;quot;byte&amp;quot;)
default:
fmt.Printf(&amp;quot;unsupported type: %T&amp;quot;, t)
}
&lt;/code>&lt;/pre>
&lt;p>变量&lt;code>value6&lt;/code>的值是空接口类型的。该值包装了一个&lt;code>byte&lt;/code>类型的值&lt;code>127&lt;/code>。我在后面使用类型&lt;code>switch&lt;/code>语句来判断&lt;code>value6&lt;/code>的实际类型，并打印相应的内容。&lt;/p>
&lt;p>这里有两个普通的&lt;code>case&lt;/code>子句，还有一个&lt;code>default case&lt;/code>子句。前者的&lt;code>case&lt;/code>表达式分别是&lt;code>case uint8, uint16&lt;/code>和&lt;code>case byte&lt;/code>。你还记得吗？&lt;code>byte&lt;/code>类型是&lt;code>uint8&lt;/code>类型的别名类型。&lt;/p>
&lt;p>因此，它们两个本质上是同一个类型，只是类型名称不同罢了。在这种情况下，这个类型&lt;code>switch&lt;/code>语句是无法通过编译的，因为子表达式&lt;code>byte&lt;/code>和&lt;code>uint8&lt;/code>重复了。好了，以上说的就是&lt;code>case&lt;/code>表达式的约束以及绕过方式，你学会了吗。&lt;/p>
&lt;p>&lt;strong>总结&lt;/strong>&lt;/p>
&lt;p>我们今天主要讨论了&lt;code>for&lt;/code>语句和&lt;code>switch&lt;/code>语句，不过我并没有说明那些语法规则，因为它们太简单了。我们需要多加注意的往往是那些隐藏在 Go 语言规范和最佳实践里的细节。&lt;/p>
&lt;p>这些细节其实就是我们很多技术初学者所谓的&amp;quot;坑&amp;quot;。比如，我在讲&lt;code>for&lt;/code>语句的时候交代了携带&lt;code>range&lt;/code>子句时只有一个迭代变量意味着什么。你必须知道在迭代数组或切片时只有一个迭代变量的话是无法迭代出其中的元素值的，否则你的程序可能就不会像你预期的那样运行了。&lt;/p>
&lt;p>还有，&lt;code>range&lt;/code>表达式的结果值是会被复制的，实际迭代时并不会使用原值。至于会影响到什么，那就要看这个结果值的类型是值类型还是引用类型了。&lt;/p>
&lt;p>说到&lt;code>switch&lt;/code>语句，你要明白其中的&lt;code>case&lt;/code>表达式的所有子表达式的结果值都是要与&lt;code>switch&lt;/code>表达式的结果值判等的，因此它们的类型必须相同或者能够都统一到&lt;code>switch&lt;/code>表达式的结果类型。如果无法做到，那么这条&lt;code>switch&lt;/code>语句就不能通过编译。&lt;/p>
&lt;p>最后，同一条&lt;code>switch&lt;/code>语句中的所有&lt;code>case&lt;/code>表达式的子表达式的结果值不能重复，不过好在这只是对于由字面量直接表示的子表达式而言的。&lt;/p>
&lt;p>请记住，普通&lt;code>case&lt;/code>子句的编写顺序很重要，最上边的&lt;code>case&lt;/code>子句中的子表达式总是会被最先求值，在判等的时候顺序也是这样。因此，如果某些子表达式的结果值有重复并且它们与&lt;code>switch&lt;/code>表达式的结果值相等，那么位置靠上的&lt;code>case&lt;/code>子句总会被选中。&lt;/p>
&lt;p>&lt;strong>思考题&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>在类型&lt;code>switch&lt;/code>语句中，我们怎样对被判断类型的那个值做相应的类型转换？&lt;/li>
&lt;li>在&lt;code>if&lt;/code>语句中，初始化子句声明的变量的作用域是什么？&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 19丨错误处理（上）</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/19%E4%B8%A8%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E4%B8%8A/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/19%E4%B8%A8%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E4%B8%8A/</guid><description>
&lt;p>提到 Go 语言中的错误处理，我们其实已经在前面接触过几次了。比如，我们声明过&lt;code>error&lt;/code>类型的变量&lt;code>err&lt;/code>，也调用过&lt;code>errors&lt;/code>包中的&lt;code>New&lt;/code>函数。今天，我会用这篇文章为你梳理 Go 语言错误处理的相关知识，同时提出一些关键问题并与你一起探讨。&lt;/p>
&lt;p>我们说过&lt;code>error&lt;/code>类型其实是一个接口类型，也是一个 Go 语言的内建类型。在这个接口类型的声明中只包含了一个方法&lt;code>Error&lt;/code>。这个方法不接受任何参数，但是会返回一个&lt;code>string&lt;/code>类型的结果。&lt;/p>
&lt;p>它的作用是返回错误信息的字符串表示形式。我们使用&lt;code>error&lt;/code>类型的方式通常是，在函数声明的结果列表的最后，声明一个该类型的结果，同时在调用这个函数之后，先判断它返回的最后一个结果值是否&amp;quot;不为&lt;code>nil&lt;/code>&amp;quot;。&lt;/p>
&lt;p>如果这个值&amp;quot;不为&lt;code>nil&lt;/code>&amp;quot;，那么就进入错误处理流程，否则就继续进行正常的流程。下面是一个例子，代码在 demo44.go 文件中。&lt;/p>
&lt;pre>&lt;code>package main
import (
&amp;quot;errors&amp;quot;
&amp;quot;fmt&amp;quot;
)
func echo(request string) (response string, err error) {
if request == &amp;quot;&amp;quot; {
err = errors.New(&amp;quot;empty request&amp;quot;)
return
}
response = fmt.Sprintf(&amp;quot;echo: %s&amp;quot;, request)
return
}
func main() {
for _, req := range []string{&amp;quot;&amp;quot;, &amp;quot;hello!&amp;quot;} {
fmt.Printf(&amp;quot;request: %s\n&amp;quot;, req)
resp, err := echo(req)
if err != nil {
fmt.Printf(&amp;quot;error: %s\n&amp;quot;, err)
continue
}
fmt.Printf(&amp;quot;response: %s\n&amp;quot;, resp)
}
}
&lt;/code>&lt;/pre>
&lt;p>我们先看&lt;code>echo&lt;/code>函数的声明。&lt;code>echo&lt;/code>函数接受一个&lt;code>string&lt;/code>类型的参数&lt;code>request&lt;/code>，并会返回两个结果。&lt;/p>
&lt;p>这两个结果都是有名称的，第一个结果&lt;code>response&lt;/code>也是&lt;code>string&lt;/code>类型的，它代表了这个函数正常执行后的结果值。第二个结果&lt;code>err&lt;/code>就是&lt;code>error&lt;/code>类型的，它代表了函数执行出错时的结果值，同时也包含了具体的错误信息。&lt;/p>
&lt;p>当&lt;code>echo&lt;/code>函数被调用时，它会先检查参数&lt;code>request&lt;/code>的值。如果该值为空字符串，那么它就会通过调用&lt;code>errors.New&lt;/code>函数，为结果&lt;code>err&lt;/code>赋值，然后忽略掉后边的操作并直接返回。&lt;/p>
&lt;p>此时，结果&lt;code>response&lt;/code>的值也会是一个空字符串。如果&lt;code>request&lt;/code>的值并不是空字符串，那么它就为结果&lt;code>response&lt;/code>赋一个适当的值，然后返回，此时的结果&lt;code>err&lt;/code>的值会是&lt;code>nil&lt;/code>。&lt;/p>
&lt;p>再来看&lt;code>main&lt;/code>函数中的代码。我在每次调用&lt;code>echo&lt;/code>函数之后都会把它返回的结果值赋给变量&lt;code>resp&lt;/code>和&lt;code>err&lt;/code>，并且总是先检查&lt;code>err&lt;/code>的值是否&amp;quot;不为&lt;code>nil&lt;/code>&amp;quot;，如果是，就打印错误信息，否则就打印常规的响应信息。&lt;/p>
&lt;p>这里值得注意的地方有两个。第一，在&lt;code>echo&lt;/code>函数和&lt;code>main&lt;/code>函数中，我都使用到了卫述语句。我在前面讲函数用法的时候也提到过卫述语句。简单地讲，它就是被用来检查后续操作的前置条件并进行相应处理的语句。&lt;/p>
&lt;p>对于&lt;code>echo&lt;/code>函数来说，它进行常规操作的前提是：传入的参数值一定要符合要求。而对于调用&lt;code>echo&lt;/code>函数的程序来说，进行后续操作的前提就是&lt;code>echo&lt;/code>函数的执行不能出错。&lt;/p>
&lt;p>我们在进行错误处理的时候经常会用到卫述语句，以至于有些人会吐槽说：&amp;ldquo;我的程序满屏都是卫述语句，简直是太难看了！&amp;ldquo;不过，我倒认为这有可能是程序设计上的问题。每个编程语言的理念和风格几乎都会有明显的不同，我们常常需要顺应它们的纹理去做设计，而不是用其他语言的编程思想来编写当下语言的程序。&lt;/p>
&lt;p>再来说第二个值得注意的地方。我在生成&lt;code>error&lt;/code>类型值的时候用到了&lt;code>errors.New&lt;/code>函数。这是一种最基本的生成错误值的方式。我们调用它的时候传入一个由字符串代表的错误信息，它会给返回给我们一个包含了这个错误信息的&lt;code>error&lt;/code>类型值。该值的静态类型当然是&lt;code>error&lt;/code>，而动态类型则是一个在&lt;code>errors&lt;/code>包中的，包级私有的类型&lt;code>*errorString&lt;/code>。&lt;/p>
&lt;p>显然，&lt;code>errorString&lt;/code>类型拥有的一个指针方法实现了&lt;code>error&lt;/code>接口中的&lt;code>Error&lt;/code>方法。这个方法在被调用后，会原封不动地返回我们之前传入的错误信息。实际上，&lt;code>error&lt;/code>类型值的&lt;code>Error&lt;/code>方法就相当于其他类型值的&lt;code>String&lt;/code>方法。&lt;/p>
&lt;p>我们已经知道，通过调用&lt;code>fmt.Printf&lt;/code>函数，并给定占位符&lt;code>%s&lt;/code>就可以打印出某个值的字符串表示形式。对于其他类型的值来说，只要我们能为这个类型编写一个&lt;code>String&lt;/code>方法，就可以自定义它的字符串表示形式。而对于&lt;code>error&lt;/code>类型值，它的字符串表示形式则取决于它的&lt;code>Error&lt;/code>方法。&lt;/p>
&lt;p>在上述情况下，&lt;code>fmt.Printf&lt;/code>函数如果发现被打印的值是一个&lt;code>error&lt;/code>类型的值，那么就会去调用它的&lt;code>Error&lt;/code>方法。&lt;code>fmt&lt;/code>包中的这类打印函数其实都是这么做的。&lt;/p>
&lt;p>顺便提一句，当我们想通过模板化的方式生成错误信息，并得到错误值时，可以使用&lt;code>fmt.Errorf&lt;/code>函数。该函数所做的其实就是先调用&lt;code>fmt.Sprintf&lt;/code>函数，得到确切的错误信息；再调用&lt;code>errors.New&lt;/code>函数，得到包含该错误信息的&lt;code>error&lt;/code>类型值，最后返回该值。&lt;/p>
&lt;p>好了，我现在问一个关于对错误值做判断的问题。我们今天的&lt;strong>问题是：对于具体错误的判断，Go 语言中都有哪些惯用法？&lt;/strong>&lt;/p>
&lt;p>由于&lt;code>error&lt;/code>是一个接口类型，所以即使同为&lt;code>error&lt;/code>类型的错误值，它们的实际类型也可能不同。这个问题还可以换一种问法，即：怎样判断一个错误值具体代表的是哪一类错误？&lt;/p>
&lt;p>这道题的&lt;strong>典型回答&lt;/strong>是这样的：&lt;/p>
&lt;ol>
&lt;li>对于类型在已知范围内的一系列错误值，一般使用类型断言表达式或类型&lt;code>switch&lt;/code>语句来判断；&lt;/li>
&lt;li>对于已有相应变量且类型相同的一系列错误值，一般直接使用判等操作来判断；&lt;/li>
&lt;li>对于没有相应变量且类型未知的一系列错误值，只能使用其错误信息的字符串表示形式来做判断。&lt;/li>
&lt;/ol>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>如果你看过一些 Go 语言标准库的源代码，那么对这几种情况应该都不陌生。我下面分别对它们做个说明。&lt;/p>
&lt;p>类型在已知范围内的错误值其实是最容易分辨的。就拿&lt;code>os&lt;/code>包中的几个代表错误的类型&lt;code>os.PathError&lt;/code>、&lt;code>os.LinkError&lt;/code>、&lt;code>os.SyscallError&lt;/code>和&lt;code>os/exec.Error&lt;/code>来说，它们的指针类型都是&lt;code>error&lt;/code>接口的实现类型，同时它们也都包含了一个名叫&lt;code>Err&lt;/code>，类型为&lt;code>error&lt;/code>接口类型的代表潜在错误的字段。&lt;/p>
&lt;p>如果我们得到一个&lt;code>error&lt;/code>类型值，并且知道该值的实际类型肯定是它们中的某一个，那么就可以用类型&lt;code>switch&lt;/code>语句去做判断。例如：&lt;/p>
&lt;pre>&lt;code>func underlyingError(err error) error {
switch err := err.(type) {
case *os.PathError:
return err.Err
case *os.LinkError:
return err.Err
case *os.SyscallError:
return err.Err
case *exec.Error:
return err.Err
}
return err
}
&lt;/code>&lt;/pre>
&lt;p>函数&lt;code>underlyingError&lt;/code>的作用是：获取和返回已知的操作系统相关错误的潜在错误值。其中的类型&lt;code>switch&lt;/code>语句中有若干个&lt;code>case&lt;/code>子句，分别对应了上述几个错误类型。当它们被选中时，都会把函数参数&lt;code>err&lt;/code>的&lt;code>Err&lt;/code>字段作为结果值返回。如果它们都未被选中，那么该函数就会直接把参数值作为结果返回，即放弃获取潜在错误值。&lt;/p>
&lt;p>只要类型不同，我们就可以如此分辨。但是在错误值类型相同的情况下，这些手段就无能为力了。在 Go 语言的标准库中也有不少以相同方式创建的同类型的错误值。&lt;/p>
&lt;p>我们还拿&lt;code>os&lt;/code>包来说，其中不少的错误值都是通过调用&lt;code>errors.New&lt;/code>函数来初始化的，比如：&lt;code>os.ErrClosed&lt;/code>、&lt;code>os.ErrInvalid&lt;/code>以及&lt;code>os.ErrPermission&lt;/code>，等等。&lt;/p>
&lt;p>注意，与前面讲到的那些错误类型不同，这几个都是已经定义好的、确切的错误值。&lt;code>os&lt;/code>包中的代码有时候会把它们当做潜在错误值，封装进前面那些错误类型的值中。&lt;/p>
&lt;p>如果我们在操作文件系统的时候得到了一个错误值，并且知道该值的潜在错误值肯定是上述值中的某一个，那么就可以用普通的&lt;code>switch&lt;/code>语句去做判断，当然了，用&lt;code>if&lt;/code>语句和判等操作符也是可以的。例如：&lt;/p>
&lt;pre>&lt;code>printError := func(i int, err error) {
if err == nil {
fmt.Println(&amp;quot;nil error&amp;quot;)
return
}
err = underlyingError(err)
switch err {
case os.ErrClosed:
fmt.Printf(&amp;quot;error(closed)[%d]: %s\n&amp;quot;, i, err)
case os.ErrInvalid:
fmt.Printf(&amp;quot;error(invalid)[%d]: %s\n&amp;quot;, i, err)
case os.ErrPermission:
fmt.Printf(&amp;quot;error(permission)[%d]: %s\n&amp;quot;, i, err)
}
}
&lt;/code>&lt;/pre>
&lt;p>这个由&lt;code>printError&lt;/code>变量代表的函数会接受一个&lt;code>error&lt;/code>类型的参数值。该值总会代表某个文件操作相关的错误，这是我故意地以不正确的方式操作文件后得到的。&lt;/p>
&lt;p>虽然我不知道这些错误值的类型的范围，但却知道它们或它们的潜在错误值一定是某个已经在&lt;code>os&lt;/code>包中定义的值。&lt;/p>
&lt;p>所以，我先用&lt;code>underlyingError&lt;/code>函数得到它们的潜在错误值，当然也可能只得到原错误值而已。然后，我用&lt;code>switch&lt;/code>语句对错误值进行判等操作，三个&lt;code>case&lt;/code>子句分别对应我刚刚提到的那三个已存在于&lt;code>os&lt;/code>包中的错误值。如此一来，我就能分辨出具体错误了。&lt;/p>
&lt;p>对于上面这两种情况，我们都有明确的方式去解决。但是，如果我们对一个错误值可能代表的含义知之甚少，那么就只能通过它拥有的错误信息去做判断了。&lt;/p>
&lt;p>好在我们总是能通过错误值的&lt;code>Error&lt;/code>方法，拿到它的错误信息。其实&lt;code>os&lt;/code>包中就有做这种判断的函数，比如：&lt;code>os.IsExist&lt;/code>、&lt;code>os.IsNotExist&lt;/code>和&lt;code>os.IsPermission&lt;/code>。命令源码文件 demo45.go 中包含了对它们的应用，这大致跟前面展示的代码差不太多，我就不在这里赘述了。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>今天我们一起初步学习了错误处理的内容。我们总结了错误类型、错误值的处理技巧和设计方式，并一起分享了 Go 语言中处理错误的最基本方式。由于错误处理的内容分为上下两篇，在下一次的文章中，我们会站在建造者的角度，一起来探索一下：怎样根据实际情况给予恰当的错误值。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>请列举出你经常用到或者看到的 3 个错误类型，它们所在的错误类型体系都是怎样的？你能画出一棵树来描述它们吗？&lt;/p>
&lt;p>感谢你的收听，我们下期再见。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 20丨错误处理（下）</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/20%E4%B8%A8%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E4%B8%8B/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/20%E4%B8%A8%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E4%B8%8B/</guid><description>
&lt;p>你好，我是郝林，今天我们继续来分享错误处理。&lt;/p>
&lt;p>在上一篇文章中，我们主要讨论的是从使用者的角度看&amp;quot;怎样处理好错误值&amp;quot;。那么，接下来我们需要关注的，就是站在建造者的角度，去关心&amp;quot;怎样才能给予使用者恰当的错误值&amp;quot;的问题了。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;p>&lt;strong>问题：怎样根据实际情况给予恰当的错误值？&lt;/strong>&lt;/p>
&lt;p>我们已经知道，构建错误值体系的基本方式有两种，即：创建立体的错误类型体系和创建扁平的错误值列表。&lt;/p>
&lt;p>先说错误类型体系。由于在 Go 语言中实现接口是非侵入式的，所以我们可以做得很灵活。比如，在标准库的&lt;code>net&lt;/code>代码包中，有一个名为&lt;code>Error&lt;/code>的接口类型。它算是内建接口类型&lt;code>error&lt;/code>的一个扩展接口，因为&lt;code>error&lt;/code>是&lt;code>net.Error&lt;/code>的嵌入接口。&lt;/p>
&lt;p>&lt;code>net.Error&lt;/code>接口除了拥有&lt;code>error&lt;/code>接口的&lt;code>Error&lt;/code>方法之外，还有两个自己声明的方法：&lt;code>Timeout&lt;/code>和&lt;code>Temporary&lt;/code>。&lt;/p>
&lt;p>&lt;code>net&lt;/code>包中有很多错误类型都实现了&lt;code>net.Error&lt;/code>接口，比如：&lt;/p>
&lt;ol>
&lt;li>&lt;code>*net.OpError&lt;/code>；&lt;/li>
&lt;li>&lt;code>*net.AddrError&lt;/code>；&lt;/li>
&lt;li>&lt;code>net.UnknownNetworkError&lt;/code>等等。&lt;/li>
&lt;/ol>
&lt;p>你可以把这些错误类型想象成一棵树，内建接口&lt;code>error&lt;/code>就是树的根，而&lt;code>net.Error&lt;/code>接口就是一个在根上延伸的第一级非叶子节点。&lt;/p>
&lt;p>同时，你也可以把这看做是一种多层分类的手段。当&lt;code>net&lt;/code>包的使用者拿到一个错误值的时候，可以先判断它是否是&lt;code>net.Error&lt;/code>类型的，也就是说该值是否代表了一个网络相关的错误。&lt;/p>
&lt;p>如果是，那么我们还可以再进一步判断它的类型是哪一个更具体的错误类型，这样就能知道这个网络相关的错误具体是由于操作不当引起的，还是因为网络地址问题引起的，又或是由于网络协议不正确引起的。&lt;/p>
&lt;p>当我们细看&lt;code>net&lt;/code>包中的这些具体错误类型的实现时，还会发现，与&lt;code>os&lt;/code>包中的一些错误类型类似，它们也都有一个名为&lt;code>Err&lt;/code>、类型为&lt;code>error&lt;/code>接口类型的字段，代表的也是当前错误的潜在错误。&lt;/p>
&lt;p>所以说，这些错误类型的值之间还可以有另外一种关系，即：链式关系。比如说，使用者调用&lt;code>net.DialTCP&lt;/code>之类的函数时，&lt;code>net&lt;/code>包中的代码可能会返回给他一个&lt;code>*net.OpError&lt;/code>类型的错误值，以表示由于他的操作不当造成了一个错误。&lt;/p>
&lt;p>同时，这些代码还可能会把一个&lt;code>*net.AddrError&lt;/code>或&lt;code>net.UnknownNetworkError&lt;/code>类型的值赋给该错误值的&lt;code>Err&lt;/code>字段，以表明导致这个错误的潜在原因。如果，此处的潜在错误值的&lt;code>Err&lt;/code>字段也有非&lt;code>nil&lt;/code>的值，那么将会指明更深层次的错误原因。如此一级又一级就像链条一样最终会指向问题的根源。&lt;/p>
&lt;p>把以上这些内容总结成一句话就是，用类型建立起树形结构的错误体系，用统一字段建立起可追根溯源的链式错误关联。这是 Go 语言标准库给予我们的优秀范本，非常有借鉴意义。&lt;/p>
&lt;p>不过要注意，如果你不想让包外代码改动你返回的错误值的话，一定要小写其中字段的名称首字母。你可以通过暴露某些方法让包外代码有进一步获取错误信息的权限，比如编写一个可以返回包级私有的&lt;code>err&lt;/code>字段值的公开方法&lt;code>Err&lt;/code>。&lt;/p>
&lt;p>相比于立体的错误类型体系，扁平的错误值列表就要简单得多了。当我们只是想预先创建一些代表已知错误的错误值时候，用这种扁平化的方式就很恰当了。&lt;/p>
&lt;p>不过，由于&lt;code>error&lt;/code>是接口类型，所以通过&lt;code>errors.New&lt;/code>函数生成的错误值只能被赋给变量，而不能赋给常量，又由于这些代表错误的变量需要给包外代码使用，所以其访问权限只能是公开的。&lt;/p>
&lt;p>这就带来了一个问题，如果有恶意代码改变了这些公开变量的值，那么程序的功能就必然会受到影响。因为在这种情况下我们往往会通过判等操作来判断拿到的错误值具体是哪一个错误，如果这些公开变量的值被改变了，那么相应的判等操作的结果也会随之改变。&lt;/p>
&lt;p>这里有两个解决方案。第一个方案是，先私有化此类变量，也就是说，让它们的名称首字母变成小写，然后编写公开的用于获取错误值以及用于判等错误值的函数。&lt;/p>
&lt;p>比如，对于错误值&lt;code>os.ErrClosed&lt;/code>，先改写它的名称，让其变成&lt;code>os.errClosed&lt;/code>，然后再编写&lt;code>ErrClosed&lt;/code>函数和&lt;code>IsErrClosed&lt;/code>函数。&lt;/p>
&lt;p>当然了，这不是说让你去改动标准库中已有的代码，这样做的危害会很大，甚至是致命的。我只能说，对于你可控的代码，最好还是要尽量收紧访问权限。&lt;/p>
&lt;p>再来说第二个方案，此方案存在于&lt;code>syscall&lt;/code>包中。该包中有一个类型叫做&lt;code>Errno&lt;/code>，该类型代表了系统调用时可能发生的底层错误。这个错误类型是&lt;code>error&lt;/code>接口的实现类型，同时也是对内建类型&lt;code>uintptr&lt;/code>的再定义类型。&lt;/p>
&lt;p>由于&lt;code>uintptr&lt;/code>可以作为常量的类型，所以&lt;code>syscall.Errno&lt;/code>自然也可以。&lt;code>syscall&lt;/code>包中声明有大量的&lt;code>Errno&lt;/code>类型的常量，每个常量都对应一种系统调用错误。&lt;code>syscall&lt;/code>包外的代码可以拿到这些代表错误的常量，但却无法改变它们。&lt;/p>
&lt;p>我们可以仿照这种声明方式来构建我们自己的错误值列表，这样就可以保证错误值的只读特性了。&lt;/p>
&lt;p>好了，总之，扁平的错误值列表虽然相对简单，但是你一定要知道其中的隐患以及有效的解决方案是什么。&lt;/p>
&lt;p>&lt;strong>总结&lt;/strong>&lt;/p>
&lt;p>今天，我从两个视角为你总结了错误类型、错误值的处理技巧和设计方式。我们先一起看了一下 Go 语言中处理错误的最基本方式，这涉及了函数结果列表设计、&lt;code>errors.New&lt;/code>函数、卫述语句以及使用打印函数输出错误值。&lt;/p>
&lt;p>接下来，我提出的第一个问题是关于错误判断的。对于一个错误值来说，我们可以获取到它的类型、值以及它携带的错误信息。&lt;/p>
&lt;p>如果我们可以确定其类型范围或者值的范围，那么就可以使用一些明确的手段获知具体的错误种类。否则，我们就只能通过匹配其携带的错误信息来大致区分它们的种类。&lt;/p>
&lt;p>由于底层系统给予我们的错误信息还是很有规律可循的，所以用这种方式去判断效果还比较显著。但是第三方程序给出的错误信息很可能就没那么规整了，这种情况下靠错误信息去辨识种类就会比较困难。&lt;/p>
&lt;p>有了以上阐释，当把视角从使用者换位到建造者，我们往往就会去自觉地仔细思考程序错误体系的设计了。我在这里提出了两个在 Go 语言标准库中使用很广泛的方案，即：立体的错误类型体系和扁平的错误值列表。&lt;/p>
&lt;p>之所以说错误类型体系是立体的，是因为从整体上看它往往呈现出树形的结构。通过接口间的嵌套以及接口的实现，我们就可以构建出一棵错误类型树。&lt;/p>
&lt;p>通过这棵树，使用者就可以一步步地确定错误值的种类了。另外，为了追根溯源的需要，我们还可以在错误类型中，统一安放一个可以代表潜在错误的字段。这叫做链式的错误关联，可以帮助使用者找到错误的根源。&lt;/p>
&lt;p>相比之下，错误值列表就比较简单了。它其实就是若干个名称不同但类型相同的错误值集合。&lt;/p>
&lt;p>不过需要注意的是，如果它们是公开的，那就应该尽量让它们成为常量而不是变量，或者编写私有的错误值以及公开的获取和判等函数，否则就很难避免恶意的篡改。&lt;/p>
&lt;p>这其实是&amp;quot;最小化访问权限&amp;quot;这个程序设计原则的一个具体体现。无论怎样设计程序错误体系，我们都应该把这一点考虑在内。&lt;/p>
&lt;p>&lt;strong>思考题&lt;/strong>&lt;/p>
&lt;p>请列举出你经常用到或者看到的 3 个错误值，它们分别在哪个错误值列表里？这些错误值列表分别包含的是哪个种类的错误？&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 21丨panic函数、recover函数以及defer语句（上）</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/21%E4%B8%A8panic%E5%87%BD%E6%95%B0recover%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8Adefer%E8%AF%AD%E5%8F%A5%E4%B8%8A/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/21%E4%B8%A8panic%E5%87%BD%E6%95%B0recover%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8Adefer%E8%AF%AD%E5%8F%A5%E4%B8%8A/</guid><description>
&lt;p>我在上两篇文章中，详细地讲述了 Go 语言中的错误处理，并从两个视角为你总结了错误类型、错误值的处理技巧和设计方式。&lt;/p>
&lt;p>在本篇，我要给你展示 Go 语言的另外一种错误处理方式。不过，严格来说，它处理的不是错误，而是异常，并且是一种在我们意料之外的程序异常。&lt;/p>
&lt;h2 id="前导知识运行时恐慌-panic">前导知识：运行时恐慌 panic&lt;/h2>
&lt;p>这种程序异常被叫做 panic，我把它翻译为运行时恐慌。其中的&amp;quot;恐慌&amp;quot;二字是由 panic 直译过来的，而之所以前面又加上了&amp;quot;运行时&amp;quot;三个字，是因为这种异常只会在程序运行的时候被抛出来。&lt;/p>
&lt;p>我们举个具体的例子来看看。&lt;/p>
&lt;p>比如说，一个 Go 程序里有一个切片，它的长度是 5，也就是说该切片中的元素值的索引分别为&lt;code>0&lt;/code>、&lt;code>1&lt;/code>、&lt;code>2&lt;/code>、&lt;code>3&lt;/code>、&lt;code>4&lt;/code>，但是，我在程序里却想通过索引&lt;code>5&lt;/code>访问其中的元素值，显而易见，这样的访问是不正确的。&lt;/p>
&lt;p>Go 程序，确切地说是程序内嵌的 Go 语言运行时系统，会在执行到这行代码的时候抛出一个&amp;quot;index out of range&amp;quot;的 panic，用以提示你索引越界了。&lt;/p>
&lt;p>当然了，这不仅仅是个提示。当 panic 被抛出之后，如果我们没有在程序里添加任何保护措施的话，程序（或者说代表它的那个进程）就会在打印出 panic 的详细情况（以下简称 panic 详情）之后，终止运行。&lt;/p>
&lt;p>现在，就让我们来看一下这样的 panic 详情中都有什么。&lt;/p>
&lt;pre>&lt;code>panic: runtime error: index out of range
goroutine 1 [running]:
main.main()
/Users/haolin/GeekTime/Golang_Puzzlers/src/puzzlers/article19/q0/demo47.go:5 +0x3d
exit status 2
&lt;/code>&lt;/pre>
&lt;p>这份详情的第一行是&amp;quot;panic: runtime error: index out of range&amp;quot;。其中的&amp;quot;runtime error&amp;quot;的含义是，这是一个&lt;code>runtime&lt;/code>代码包中抛出的 panic。在这个 panic 中，包含了一个&lt;code>runtime.Error&lt;/code>接口类型的值。&lt;code>runtime.Error&lt;/code>接口内嵌了&lt;code>error&lt;/code>接口，并做了一点点扩展，&lt;code>runtime&lt;/code>包中有不少它的实现类型。&lt;/p>
&lt;p>实际上，此详情中的&amp;quot;panic：&amp;ldquo;右边的内容，正是这个 panic 包含的&lt;code>runtime.Error&lt;/code>类型值的字符串表示形式。&lt;/p>
&lt;p>此外，panic 详情中，一般还会包含与它的引发原因有关的 goroutine 的代码执行信息。正如前述详情中的&amp;quot;goroutine 1 [running]&amp;quot;，它表示有一个 ID 为&lt;code>1&lt;/code>的 goroutine 在此 panic 被引发的时候正在运行。&lt;/p>
&lt;p>注意，这里的 ID 其实并不重要，因为它只是 Go 语言运行时系统内部给予的一个 goroutine 编号，我们在程序中是无法获取和更改的。&lt;/p>
&lt;p>我们再看下一行，&amp;ldquo;main.main()&amp;ldquo;表明了这个 goroutine 包装的&lt;code>go&lt;/code>函数就是命令源码文件中的那个&lt;code>main&lt;/code>函数，也就是说这里的 goroutine 正是主 goroutine。再下面的一行，指出的就是这个 goroutine 中的哪一行代码在此 panic 被引发时正在执行。&lt;/p>
&lt;p>这包含了此行代码在其所属的源码文件中的行数，以及这个源码文件的绝对路径。这一行最后的&lt;code>+0x3d&lt;/code>代表的是：此行代码相对于其所属函数的入口程序计数偏移量。不过，一般情况下它的用处并不大。&lt;/p>
&lt;p>最后，&amp;ldquo;exit status 2&amp;quot;表明我的这个程序是以退出状态码&lt;code>2&lt;/code>结束运行的。在大多数操作系统中，只要退出状态码不是&lt;code>0&lt;/code>，都意味着程序运行的非正常结束。在 Go 语言中，因 panic 导致程序结束运行的退出状态码一般都会是&lt;code>2&lt;/code>。&lt;/p>
&lt;p>综上所述，我们从上边的这个 panic 详情可以看出，作为此 panic 的引发根源的代码处于 demo47.go 文件中的第 5 行，同时被包含在&lt;code>main&lt;/code>包（也就是命令源码文件所在的代码包）的&lt;code>main&lt;/code>函数中。&lt;/p>
&lt;p>那么，我的第一个问题也随之而来了。我今天的问题是：&lt;strong>从 panic 被引发到程序终止运行的大致过程是什么？&lt;/strong>&lt;/p>
&lt;p>&lt;strong>这道题的典型回答是这样的。&lt;/strong>&lt;/p>
&lt;p>我们先说一个大致的过程：某个函数中的某行代码有意或无意地引发了一个 panic。这时，初始的 panic 详情会被建立起来，并且该程序的控制权会立即从此行代码转移至调用其所属函数的那行代码上，也就是调用栈中的上一级。&lt;/p>
&lt;p>这也意味着，此行代码所属函数的执行随即终止。紧接着，控制权并不会在此有片刻的停留，它又会立即转移至再上一级的调用代码处。控制权如此一级一级地沿着调用栈的反方向传播至顶端，也就是我们编写的最外层函数那里。&lt;/p>
&lt;p>这里的最外层函数指的是&lt;code>go&lt;/code>函数，对于主 goroutine 来说就是&lt;code>main&lt;/code>函数。但是控制权也不会停留在那里，而是被 Go 语言运行时系统收回。&lt;/p>
&lt;p>随后，程序崩溃并终止运行，承载程序这次运行的进程也会随之死亡并消失。与此同时，在这个控制权传播的过程中，panic 详情会被逐渐地积累和完善，并会在程序终止之前被打印出来。&lt;/p>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>panic 可能是我们在无意间（或者说一不小心）引发的，如前文所述的索引越界。这类 panic 是真正的、在我们意料之外的程序异常。不过，除此之外，我们还是可以有意地引发 panic。&lt;/p>
&lt;p>Go 语言的内建函数&lt;code>panic&lt;/code>是专门用于引发 panic 的。&lt;code>panic&lt;/code>函数使程序开发者可以在程序运行期间报告异常。&lt;/p>
&lt;p>注意，这与从函数返回错误值的意义是完全不同的。当我们的函数返回一个非&lt;code>nil&lt;/code>的错误值时，函数的调用方有权选择不处理，并且不处理的后果往往是不致命的。&lt;/p>
&lt;p>这里的&amp;quot;不致命&amp;quot;的意思是，不至于使程序无法提供任何功能（也可以说僵死）或者直接崩溃并终止运行（也就是真死）。&lt;/p>
&lt;p>但是，当一个 panic 发生时，如果我们不施加任何保护措施，那么导致的直接后果就是程序崩溃，就像前面描述的那样，这显然是致命的。&lt;/p>
&lt;p>为了更清楚地展示答案中描述的过程，我编写了 demo48.go 文件。你可以先查看一下其中的代码，再试着运行它，并体会它打印的内容所代表的含义。&lt;/p>
&lt;p>我在这里再提示一点。panic 详情会在控制权传播的过程中，被逐渐地积累和完善，并且，控制权会一级一级地沿着调用栈的反方向传播至顶端。&lt;/p>
&lt;p>因此，在针对某个 goroutine 的代码执行信息中，调用栈底端的信息会先出现，然后是上一级调用的信息，以此类推，最后才是此调用栈顶端的信息。&lt;/p>
&lt;p>比如，&lt;code>main&lt;/code>函数调用了&lt;code>caller1&lt;/code>函数，而&lt;code>caller1&lt;/code>函数又调用了&lt;code>caller2&lt;/code>函数，那么&lt;code>caller2&lt;/code>函数中代码的执行信息会先出现，然后是&lt;code>caller1&lt;/code>函数中代码的执行信息，最后才是&lt;code>main&lt;/code>函数的信息。&lt;/p>
&lt;pre>&lt;code>goroutine 1 [running]:
main.caller2()
/Users/haolin/GeekTime/Golang_Puzzlers/src/puzzlers/article19/q1/demo48.go:22 +0x91
main.caller1()
/Users/haolin/GeekTime/Golang_Puzzlers/src/puzzlers/article19/q1/demo48.go:15 +0x66
main.main()
/Users/haolin/GeekTime/Golang_Puzzlers/src/puzzlers/article19/q1/demo48.go:9 +0x66
exit status 2
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/60/d7/606ff433a6b58510f215e57792822bd7.png" alt="">&lt;/p>
&lt;p>（从 panic 到程序崩溃）&lt;/p>
&lt;p>好了，到这里，我相信你已经对 panic 被引发后的程序终止过程有一定的了解了。深入地了解此过程，以及正确地解读 panic 详情应该是我们的必备技能，这在调试 Go 程序或者为 Go 程序排查错误的时候非常重要。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>最近的两篇文章，我们是围绕着 panic 函数、recover 函数以及 defer 语句进行的。今天我主要讲了 panic 函数。这个函数是专门被用来引发 panic 的。panic 也可以被称为运行时恐慌，它是一种只能在程序运行期间抛出的程序异常。&lt;/p>
&lt;p>Go 语言的运行时系统可能会在程序出现严重错误时自动地抛出 panic，我们在需要时也可以通过调用&lt;code>panic&lt;/code>函数引发 panic。但不论怎样，如果不加以处理，panic 就会导致程序崩溃并终止运行。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>一个函数怎样才能把 panic 转化为&lt;code>error&lt;/code>类型值，并将其作为函数的结果值返回给调用方？&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 22丨panic函数、recover函数以及defer语句（下）</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/22%E4%B8%A8panic%E5%87%BD%E6%95%B0recover%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8Adefer%E8%AF%AD%E5%8F%A5%E4%B8%8B/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/22%E4%B8%A8panic%E5%87%BD%E6%95%B0recover%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8Adefer%E8%AF%AD%E5%8F%A5%E4%B8%8B/</guid><description>
&lt;p>你好，我是郝林，今天我们继续来聊聊 panic 函数、recover 函数以及 defer 语句的内容。&lt;/p>
&lt;p>我在前一篇文章提到过这样一个说法，panic 之中可以包含一个值，用于简要解释引发此 panic 的原因。&lt;/p>
&lt;p>如果一个 panic 是我们在无意间引发的，那么其中的值只能由 Go 语言运行时系统给定。但是，当我们使用&lt;code>panic&lt;/code>函数有意地引发一个 panic 的时候，却可以自行指定其包含的值。我们今天的第一个问题就是针对后一种情况提出的。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;h3 id="问题-1怎样让-panic-包含一个值以及应该让它包含什么样的值">问题 1：怎样让 panic 包含一个值，以及应该让它包含什么样的值？&lt;/h3>
&lt;p>这其实很简单，在调用&lt;code>panic&lt;/code>函数时，把某个值作为参数传给该函数就可以了。由于&lt;code>panic&lt;/code>函数的唯一一个参数是空接口（也就是&lt;code>interface{}&lt;/code>）类型的，所以从语法上讲，它可以接受任何类型的值。&lt;/p>
&lt;p>但是，我们最好传入&lt;code>error&lt;/code>类型的错误值，或者其他的可以被有效序列化的值。这里的&amp;quot;有效序列化&amp;quot;指的是，可以更易读地去表示形式转换。&lt;/p>
&lt;p>还记得吗？对于&lt;code>fmt&lt;/code>包下的各种打印函数来说，&lt;code>error&lt;/code>类型值的&lt;code>Error&lt;/code>方法与其他类型值的&lt;code>String&lt;/code>方法是等价的，它们的唯一结果都是&lt;code>string&lt;/code>类型的。&lt;/p>
&lt;p>我们在通过占位符&lt;code>%s&lt;/code>打印这些值的时候，它们的字符串表示形式分别都是这两种方法产出的。&lt;/p>
&lt;p>一旦程序异常了，我们就一定要把异常的相关信息记录下来，这通常都是记到程序日志里。&lt;/p>
&lt;p>我们在为程序排查错误的时候，首先要做的就是查看和解读程序日志；而最常用也是最方便的日志记录方式，就是记下相关值的字符串表示形式。&lt;/p>
&lt;p>所以，如果你觉得某个值有可能会被记到日志里，那么就应该为它关联&lt;code>String&lt;/code>方法。如果这个值是&lt;code>error&lt;/code>类型的，那么让它的&lt;code>Error&lt;/code>方法返回你为它定制的字符串表示形式就可以了。&lt;/p>
&lt;p>对于此，你可能会想到&lt;code>fmt.Sprintf&lt;/code>，以及&lt;code>fmt.Fprintf&lt;/code>这类可以格式化并输出参数的函数。&lt;/p>
&lt;p>是的，它们本身就可以被用来输出值的某种表示形式。不过，它们在功能上，肯定远不如我们自己定义的&lt;code>Error&lt;/code>方法或者&lt;code>String&lt;/code>方法。因此，为不同的数据类型分别编写这两种方法总是首选。&lt;/p>
&lt;p>可是，这与传给&lt;code>panic&lt;/code>函数的参数值又有什么关系呢？其实道理是相同的。至少在程序崩溃的时候，panic 包含的那个值字符串表示形式会被打印出来。&lt;/p>
&lt;p>另外，我们还可以施加某种保护措施，避免程序的崩溃。这个时候，panic 包含的值会被取出，而在取出之后，它一般都会被打印出来或者记录到日志里。&lt;/p>
&lt;p>既然说到了应对 panic 的保护措施，我们再来看下面一个问题。&lt;/p>
&lt;h3 id="问题-2怎样施加应对-panic-的保护措施从而避免程序崩溃">问题 2：怎样施加应对 panic 的保护措施，从而避免程序崩溃？&lt;/h3>
&lt;p>Go 语言的内建函数&lt;code>recover&lt;/code>专用于恢复 panic，或者说平息运行时恐慌。&lt;code>recover&lt;/code>函数无需任何参数，并且会返回一个空接口类型的值。&lt;/p>
&lt;p>如果用法正确，这个值实际上就是即将恢复的 panic 包含的值。并且，如果这个 panic 是因我们调用&lt;code>panic&lt;/code>函数而引发的，那么该值同时也会是我们此次调用&lt;code>panic&lt;/code>函数时，传入的参数值副本。请注意，这里强调用法的正确。我们先来看看什么是不正确的用法。&lt;/p>
&lt;pre>&lt;code>package main
import (
&amp;quot;fmt&amp;quot;
&amp;quot;errors&amp;quot;
)
func main() {
fmt.Println(&amp;quot;Enter function main.&amp;quot;)
// 引发 panic。
panic(errors.New(&amp;quot;something wrong&amp;quot;))
p := recover()
fmt.Printf(&amp;quot;panic: %s\n&amp;quot;, p)
fmt.Println(&amp;quot;Exit function main.&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;p>在上面这个&lt;code>main&lt;/code>函数中，我先通过调用&lt;code>panic&lt;/code>函数引发了一个 panic，紧接着想通过调用&lt;code>recover&lt;/code>函数恢复这个 panic。可结果呢？你一试便知，程序依然会崩溃，这个&lt;code>recover&lt;/code>函数调用并不会起到任何作用，甚至都没有机会执行。&lt;/p>
&lt;p>还记得吗？我提到过 panic 一旦发生，控制权就会讯速地沿着调用栈的反方向传播。所以，在&lt;code>panic&lt;/code>函数调用之后的代码，根本就没有执行的机会。&lt;/p>
&lt;p>那如果我把调用&lt;code>recover&lt;/code>函数的代码提前呢？也就是说，先调用&lt;code>recover&lt;/code>函数，再调用&lt;code>panic&lt;/code>函数会怎么样呢？&lt;/p>
&lt;p>这显然也是不行的，因为，如果在我们调用&lt;code>recover&lt;/code>函数时未发生 panic，那么该函数就不会做任何事情，并且只会返回一个&lt;code>nil&lt;/code>。&lt;/p>
&lt;p>换句话说，这样做毫无意义。那么，到底什么才是正确的&lt;code>recover&lt;/code>函数用法呢？这就不得不提到&lt;code>defer&lt;/code>语句了。&lt;/p>
&lt;p>顾名思义，&lt;code>defer&lt;/code>语句就是被用来延迟执行代码的。延迟到什么时候呢？这要延迟到该语句所在的函数即将执行结束的那一刻，无论结束执行的原因是什么。&lt;/p>
&lt;p>这与&lt;code>go&lt;/code>语句有些类似，一个&lt;code>defer&lt;/code>语句总是由一个&lt;code>defer&lt;/code>关键字和一个调用表达式组成。&lt;/p>
&lt;p>这里存在一些限制，有一些调用表达式是不能出现在这里的，包括：针对 Go 语言内建函数的调用表达式，以及针对&lt;code>unsafe&lt;/code>包中的函数的调用表达式。&lt;/p>
&lt;p>顺便说一下，对于&lt;code>go&lt;/code>语句中的调用表达式，限制也是一样的。另外，在这里被调用的函数可以是有名称的，也可以是匿名的。我们可以把这里的函数叫做&lt;code>defer&lt;/code>函数或者延迟函数。注意，被延迟执行的是&lt;code>defer&lt;/code>函数，而不是&lt;code>defer&lt;/code>语句。&lt;/p>
&lt;p>我刚才说了，无论函数结束执行的原因是什么，其中的&lt;code>defer&lt;/code>函数调用都会在它即将结束执行的那一刻执行。即使导致它执行结束的原因是一个 panic 也会是这样。正因为如此，我们需要联用&lt;code>defer&lt;/code>语句和&lt;code>recover&lt;/code>函数调用，才能够恢复一个已经发生的 panic。&lt;/p>
&lt;p>我们来看一下经过修正的代码。&lt;/p>
&lt;pre>&lt;code>package main
import (
&amp;quot;fmt&amp;quot;
&amp;quot;errors&amp;quot;
)
func main() {
fmt.Println(&amp;quot;Enter function main.&amp;quot;)
defer func(){
fmt.Println(&amp;quot;Enter defer function.&amp;quot;)
if p := recover(); p != nil {
fmt.Printf(&amp;quot;panic: %s\n&amp;quot;, p)
}
fmt.Println(&amp;quot;Exit defer function.&amp;quot;)
}()
// 引发 panic。
panic(errors.New(&amp;quot;something wrong&amp;quot;))
fmt.Println(&amp;quot;Exit function main.&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;p>在这个&lt;code>main&lt;/code>函数中，我先编写了一条&lt;code>defer&lt;/code>语句，并在&lt;code>defer&lt;/code>函数中调用了&lt;code>recover&lt;/code>函数。仅当调用的结果值不为&lt;code>nil&lt;/code>时，也就是说只有 panic 确实已发生时，我才会打印一行以&amp;quot;panic:&amp;ldquo;为前缀的内容。&lt;/p>
&lt;p>紧接着，我调用了&lt;code>panic&lt;/code>函数，并传入了一个&lt;code>error&lt;/code>类型值。这里一定要注意，我们要尽量把&lt;code>defer&lt;/code>语句写在函数体的开始处，因为在引发 panic 的语句之后的所有语句，都不会有任何执行机会。&lt;/p>
&lt;p>也只有这样，&lt;code>defer&lt;/code>函数中的&lt;code>recover&lt;/code>函数调用才会拦截，并恢复&lt;code>defer&lt;/code>语句所属的函数，及其调用的代码中发生的所有 panic。&lt;/p>
&lt;p>至此，我向你展示了两个很典型的&lt;code>recover&lt;/code>函数的错误用法，以及一个基本的正确用法。&lt;/p>
&lt;p>我希望你能够记住错误用法背后的缘由，同时也希望你能真正地理解联用&lt;code>defer&lt;/code>语句和&lt;code>recover&lt;/code>函数调用的真谛。&lt;/p>
&lt;p>在命令源码文件 demo50.go 中，我把上述三种用法合并在了一段代码中。你可以运行该文件，并体会各种用法所产生的不同效果。&lt;/p>
&lt;p>下面我再来多说一点关于&lt;code>defer&lt;/code>语句的事情。&lt;/p>
&lt;h3 id="问题-3如果一个函数中有多条defer语句那么那几个defer函数调用的执行顺序是怎样的">问题 3：如果一个函数中有多条&lt;code>defer&lt;/code>语句，那么那几个&lt;code>defer&lt;/code>函数调用的执行顺序是怎样的？&lt;/h3>
&lt;p>如果只用一句话回答的话，那就是：在同一个函数中，&lt;code>defer&lt;/code>函数调用的执行顺序与它们分别所属的&lt;code>defer&lt;/code>语句的出现顺序（更严谨地说，是执行顺序）完全相反。&lt;/p>
&lt;p>当一个函数即将结束执行时，其中的写在最下边的&lt;code>defer&lt;/code>函数调用会最先执行，其次是写在它上边、与它的距离最近的那个&lt;code>defer&lt;/code>函数调用，以此类推，最上边的&lt;code>defer&lt;/code>函数调用会最后一个执行。&lt;/p>
&lt;p>如果函数中有一条&lt;code>for&lt;/code>语句，并且这条&lt;code>for&lt;/code>语句中包含了一条&lt;code>defer&lt;/code>语句，那么，显然这条&lt;code>defer&lt;/code>语句的执行次数，就取决于&lt;code>for&lt;/code>语句的迭代次数。&lt;/p>
&lt;p>并且，同一条&lt;code>defer&lt;/code>语句每被执行一次，其中的&lt;code>defer&lt;/code>函数调用就会产生一次，而且，这些函数调用同样不会被立即执行。&lt;/p>
&lt;p>那么问题来了，这条&lt;code>for&lt;/code>语句中产生的多个&lt;code>defer&lt;/code>函数调用，会以怎样的顺序执行呢？&lt;/p>
&lt;p>为了彻底搞清楚，我们需要弄明白&lt;code>defer&lt;/code>语句执行时发生的事情。&lt;/p>
&lt;p>其实也并不复杂，在&lt;code>defer&lt;/code>语句每次执行的时候，Go 语言会把它携带的&lt;code>defer&lt;/code>函数及其参数值另行存储到一个队列中。&lt;/p>
&lt;p>这个队列与该&lt;code>defer&lt;/code>语句所属的函数是对应的，并且，它是先进后出（FILO）的，相当于一个栈。&lt;/p>
&lt;p>在需要执行某个函数中的&lt;code>defer&lt;/code>函数调用的时候，Go 语言会先拿到对应的队列，然后从该队列中一个一个地取出&lt;code>defer&lt;/code>函数及其参数值，并逐个执行调用。&lt;/p>
&lt;p>这正是我说&amp;rdquo;&lt;code>defer&lt;/code>函数调用与其所属的&lt;code>defer&lt;/code>语句的执行顺序完全相反&amp;quot;的原因了。&lt;/p>
&lt;p>下面该你出场了，我在 demo51.go 文件中编写了一个与本问题有关的示例，其中的核心代码很简单，只有几行而已。&lt;/p>
&lt;p>我希望你先查看代码，然后思考并写下该示例被运行时，会打印出哪些内容。&lt;/p>
&lt;p>如果你实在想不出来，那么也可以先运行示例，再试着解释打印出的内容。总之，你需要完全搞明白那几行内容为什么会以那样的顺序出现的确切原因。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>我们这两期的内容主要讲了两个函数和一条语句。&lt;code>recover&lt;/code>函数专用于恢复 panic，并且调用即恢复。&lt;/p>
&lt;p>它在被调用时会返回一个空接口类型的结果值。如果在调用它时并没有 panic 发生，那么这个结果值就会是&lt;code>nil&lt;/code>。&lt;/p>
&lt;p>而如果被恢复的 panic 是我们通过调用&lt;code>panic&lt;/code>函数引发的，那么它返回的结果值就会是我们传给&lt;code>panic&lt;/code>函数参数值的副本。&lt;/p>
&lt;p>对&lt;code>recover&lt;/code>函数的调用只有在&lt;code>defer&lt;/code>语句中才能真正起作用。&lt;code>defer&lt;/code>语句是被用来延迟执行代码的。&lt;/p>
&lt;p>更确切地说，它会让其携带的&lt;code>defer&lt;/code>函数的调用延迟执行，并且会延迟到该&lt;code>defer&lt;/code>语句所属的函数即将结束执行的那一刻。&lt;/p>
&lt;p>在同一个函数中，延迟执行的&lt;code>defer&lt;/code>函数调用，会与它们分别所属的&lt;code>defer&lt;/code>语句的执行顺序完全相反。还要注意，同一条&lt;code>defer&lt;/code>语句每被执行一次，就会产生一个延迟执行的&lt;code>defer&lt;/code>函数调用。&lt;/p>
&lt;p>这种情况在&lt;code>defer&lt;/code>语句与&lt;code>for&lt;/code>语句联用时经常出现。这时更要关注&lt;code>for&lt;/code>语句中，同一条&lt;code>defer&lt;/code>语句产生的多个&lt;code>defer&lt;/code>函数调用的实际执行顺序。&lt;/p>
&lt;p>以上这些，就是关于 Go 语言中特殊的程序异常，及其处理方式的核心知识。这里边可以衍生出很多面试题目。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>我们可以在&lt;code>defer&lt;/code>函数中恢复 panic，那么可以在其中引发 panic 吗？&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 23丨测试的基本规则和流程（上）</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/23%E4%B8%A8%E6%B5%8B%E8%AF%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A7%84%E5%88%99%E5%92%8C%E6%B5%81%E7%A8%8B%E4%B8%8A/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/23%E4%B8%A8%E6%B5%8B%E8%AF%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A7%84%E5%88%99%E5%92%8C%E6%B5%81%E7%A8%8B%E4%B8%8A/</guid><description>
&lt;p>你好，我是郝林，今天我分享的主题是：测试的基本规则和流程（上）。&lt;/p>
&lt;p>你很棒，已经学完了本专栏最大的一个模块！这涉及了 Go 语言的所有内建数据类型，以及非常有特色的那些流程和语句。&lt;/p>
&lt;p>你已经完全可以去独立编写各种各样的 Go 程序了。如果忘了什么，回到之前的文章再复习一下就好了。&lt;/p>
&lt;p>在接下来的日子里，我将带你去学习在 Go 语言编程进阶的道路上，必须掌握的附加知识，比如：Go 程序测试、程序监测，以及 Go 语言标准库中各种常用代码包的正确用法。&lt;/p>
&lt;p>从上个世纪到今日今时，程序员们，尤其是国内的程序员们，都对编写程序乐此不疲，甚至废寝忘食（比如我自己就是一个例子）。&lt;/p>
&lt;p>因为这是我们普通人训练自我、改变生活、甚至改变世界的一种特有的途径。不过，同样是程序，我们却往往对编写用于测试的程序敬而远之。这是为什么呢？&lt;/p>
&lt;p>我个人感觉，从人的本性来讲，我们都或多或少会否定&amp;quot;对自我的否定&amp;quot;。我们不愿意看到我们编写的程序有 Bug（即程序错误或缺陷），尤其是刚刚倾注心血编写的，并且信心满满交付的程序。&lt;/p>
&lt;p>不过，我想说的是，&lt;strong>人是否会进步以及进步得有多快，依赖的恰恰就是对自我的否定，这包括否定的深刻与否，以及否定自我的频率如何。这其实就是&amp;quot;不破不立&amp;quot;这个词表达的含义。&lt;/strong>&lt;/p>
&lt;p>对于程序和软件来讲，尽早发现问题、修正问题其实非常重要。在这个网络互联的大背景下，我们所做的程序、工具或者软件产品往往可以被散布得更快、更远。但是，与此同时，它们的错误和缺陷也会是这样，并且可能在短时间内就会影响到成千上万甚至更多的用户。&lt;/p>
&lt;p>你可能会说：&amp;ldquo;在开源模式下这就是优势啊，我就是要让更多的人帮我发现错误甚至修正错误，我们还可以一起协作、共同维护程序。&amp;ldquo;但这其实是两码事，协作者往往是由早期或核心的用户转换过来的，但绝对不能说程序的用户就肯定会成为协作者。&lt;/p>
&lt;p>当有很多用户开始对程序抱怨的时候，很可能就预示着你对此的人设要崩塌了。你会发现，或者总有一天会发现，越是人们关注和喜爱的程序，它的测试（尤其是自动化的测试）做得就越充分，测试流程就越规范。&lt;/p>
&lt;p>即使你想众人拾柴火焰高，那也得先让别人喜欢上你的程序。况且，对于优良的程序和软件来说，测试必然是非常受重视的一个环节。所以，尽快用测试为你的程序建起堡垒吧！&lt;/p>
&lt;hr>
&lt;p>对于程序或软件的测试也分很多种，比如：单元测试、API 测试、集成测试、灰度测试，等等。我在本模块会主要针对单元测试进行讲解。&lt;/p>
&lt;h2 id="前导内容go-程序测试基础知识">前导内容：go 程序测试基础知识&lt;/h2>
&lt;p>我们来说一下单元测试，它又称程序员测试。顾名思义，这就是程序员们本该做的自我检查工作之一。&lt;/p>
&lt;p>Go 语言的缔造者们从一开始就非常重视程序测试，并且为 Go 程序的开发者们提供了丰富的 API 和工具。利用这些 API 和工具，我们可以创建测试源码文件，并为命令源码文件和库源码文件中的程序实体，编写测试用例。&lt;/p>
&lt;p>在 Go 语言中，一个测试用例往往会由一个或多个测试函数来代表，不过在大多数情况下，每个测试用例仅用一个测试函数就足够了。测试函数往往用于描述和保障某个程序实体的某方面功能，比如，该功能在正常情况下会因什么样的输入，产生什么样的输出，又比如，该功能会在什么情况下报错或表现异常，等等。&lt;/p>
&lt;p>我们可以为 Go 程序编写三类测试，即：功能测试（test）、基准测试（benchmark，也称性能测试），以及示例测试（example）。&lt;/p>
&lt;p>对于前两类测试，从名称上你就应该可以猜到它们的用途。而示例测试严格来讲也是一种功能测试，只不过它更关注程序打印出来的内容。&lt;/p>
&lt;p>一般情况下，一个测试源码文件只会针对于某个命令源码文件，或库源码文件（以下简称被测源码文件）做测试，所以我们总会（并且应该）把它们放在同一个代码包内。&lt;/p>
&lt;p>测试源码文件的主名称应该以被测源码文件的主名称为前导，并且必须以&amp;rdquo;_test&amp;quot;为后缀。例如，如果被测源码文件的名称为 demo52.go，那么针对它的测试源码文件的名称就应该是 demo52_test.go。&lt;/p>
&lt;p>每个测试源码文件都必须至少包含一个测试函数。并且，从语法上讲，每个测试源码文件中，都可以包含用来做任何一类测试的测试函数，即使把这三类测试函数都塞进去也没有问题。我通常就是这么做的，只要把控好测试函数的分组和数量就可以了。&lt;/p>
&lt;p>我们可以依据这些测试函数针对的不同程序实体，把它们分成不同的逻辑组，并且，利用注释以及帮助类的变量或函数来做分割。同时，我们还可以依据被测源码文件中程序实体的先后顺序，来安排测试源码文件中测试函数的顺序。&lt;/p>
&lt;p>此外，不仅仅对测试源码文件的名称，对于测试函数的名称和签名，Go 语言也是有明文规定的。你知道这个规定的内容吗？&lt;/p>
&lt;p>&lt;strong>所以，我们今天的问题就是：Go 语言对测试函数的名称和签名都有哪些规定？&lt;/strong>&lt;/p>
&lt;p>&lt;strong>这里我给出的典型回答是下面三个内容。&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>对于功能测试函数来说，其名称必须以&lt;code>Test&lt;/code>为前缀，并且参数列表中只应有一个&lt;code>*testing.T&lt;/code>类型的参数声明。&lt;/li>
&lt;li>对于性能测试函数来说，其名称必须以&lt;code>Benchmark&lt;/code>为前缀，并且唯一参数的类型必须是&lt;code>*testing.B&lt;/code>类型的。&lt;/li>
&lt;li>对于示例测试函数来说，其名称必须以&lt;code>Example&lt;/code>为前缀，但对函数的参数列表没有强制规定。&lt;/li>
&lt;/ul>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>我问这个问题的目的一般有两个。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>第一个目的当然是考察 Go 程序测试的基本规则。如果你经常编写测试源码文件，那么这道题应该是很容易回答的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第二个目的是作为一个引子，引出第二个问题，即：&lt;code>go test&lt;/code>命令执行的主要测试流程是什么？不过在这里我就不问你了，我直接说一下答案。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>我们首先需要记住一点，只有测试源码文件的名称对了，测试函数的名称和签名也对了，当我们运行&lt;code>go test&lt;/code>命令的时候，其中的测试代码才有可能被运行。&lt;/p>
&lt;p>&lt;code>go test&lt;/code>命令在开始运行时，会先做一些准备工作，比如，确定内部需要用到的命令，检查我们指定的代码包或源码文件的有效性，以及判断我们给予的标记是否合法，等等。&lt;/p>
&lt;p>在准备工作顺利完成之后，&lt;code>go test&lt;/code>命令就会针对每个被测代码包，依次地进行构建、执行包中符合要求的测试函数，清理临时文件，打印测试结果。这就是通常情况下的主要测试流程。&lt;/p>
&lt;p>请注意上述的&amp;quot;依次&amp;quot;二字。对于每个被测代码包，&lt;code>go test&lt;/code>命令会串行地执行测试流程中的每个步骤。&lt;/p>
&lt;p>但是，为了加快测试速度，它通常会并发地对多个被测代码包进行功能测试，只不过，在最后打印测试结果的时候，它会依照我们给定的顺序逐个进行，这会让我们感觉到它是在完全串行地执行测试流程。&lt;/p>
&lt;p>另一方面，由于并发的测试会让性能测试的结果存在偏差，所以性能测试一般都是串行进行的。更具体地说，只有在所有构建步骤都做完之后，&lt;code>go test&lt;/code>命令才会真正地开始进行性能测试。&lt;/p>
&lt;p>并且，下一个代码包性能测试的进行，总会等到上一个代码包性能测试的结果打印完成才会开始，而且性能测试函数的执行也都会是串行的。&lt;/p>
&lt;p>一旦清楚了 Go 程序测试的具体过程，我们的一些疑惑就自然有了答案。比如，那个名叫&lt;code>TestIntroduce&lt;/code>的测试函数为什么没执行，又比如，为什么即使是简单的性能测试，执行起来也会比功能测试慢，等等。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>在本篇文章的一开始，我就试图向你阐释程序测试的重要性。在我经历的公司中起码有一半都不重视程序测试，或者说没有精力去做程序测试。&lt;/p>
&lt;p>尤其是中小型的公司，他们往往完全依靠软件质量保障团队，甚至真正的用户去帮他们测试。在这些情况下，软件错误或缺陷的发现、反馈和修复的周期通常会很长，成本也会很大，也许还会造成很不好的影响。&lt;/p>
&lt;p>Go 语言是一门很重视程序测试的编程语言，它不但自带了&lt;code>testing&lt;/code>包，还有专用于程序测试的命令&lt;code>go test&lt;/code>。我们要想真正用好一个工具，就需要先了解它的核心逻辑。所以，我今天问你的第一个问题就是关于&lt;code>go test&lt;/code>命令的基本规则和主要流程的。在知道这些之后，也许你对 Go 程序测试就会进入更深层次的了解。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>除了本文中提到的，你还知道或用过&lt;code>testing.T&lt;/code>类型和&lt;code>testing.B&lt;/code>类型的哪些方法？它们都是做什么用的？你可以给我留言，我们一起讨论。&lt;/p>
&lt;p>感谢你的收听，我们下次再见。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 24丨测试的基本规则和流程（下）</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/24%E4%B8%A8%E6%B5%8B%E8%AF%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A7%84%E5%88%99%E5%92%8C%E6%B5%81%E7%A8%8B%E4%B8%8B/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/24%E4%B8%A8%E6%B5%8B%E8%AF%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A7%84%E5%88%99%E5%92%8C%E6%B5%81%E7%A8%8B%E4%B8%8B/</guid><description>
&lt;p>你好，我是郝林。今天我分享的主题是测试的基本规则和流程的（下）篇。&lt;/p>
&lt;p>Go 语言是一门很重视程序测试的编程语言，所以在上一篇中，我与你再三强调了程序测试的重要性，同时，也介绍了关于&lt;code>go test&lt;/code>命令的基本规则和主要流程的内容。今天我们继续分享测试的基本规则和流程。本篇代码和指令较多，你可以点击文章查看原文。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;h3 id="问题-1怎样解释功能测试的测试结果">问题 1：怎样解释功能测试的测试结果？&lt;/h3>
&lt;p>我们先来看下面的测试命令和结果：&lt;/p>
&lt;pre>&lt;code>$ go test puzzlers/article20/q2
ok puzzlers/article20/q2 0.008s
&lt;/code>&lt;/pre>
&lt;p>以&lt;code>$&lt;/code>符号开头表明此行展现的是我输入的命令。在这里，我输入了&lt;code>go test puzzlers/article20/q2&lt;/code>，这表示我想对导入路径为&lt;code>puzzlers/article20/q2&lt;/code>的代码包进行测试。代码下面一行就是此次测试的简要结果。&lt;/p>
&lt;p>这个简要结果有三块内容。最左边的&lt;code>ok&lt;/code>表示此次测试成功，也就是说没有发现测试结果不如预期的情况。&lt;/p>
&lt;p>当然了，这里全由我们编写的测试代码决定，我们总是认定测试代码本身没有 Bug，并且忠诚地落实了我们的测试意图。在测试结果的中间，显示的是被测代码包的导入路径。&lt;/p>
&lt;p>而在最右边，展现的是此次对该代码包的测试所耗费的时间，这里显示的&lt;code>0.008s&lt;/code>，即 8 毫秒。不过，当我们紧接着第二次运行这个命令的时候，输出的测试结果会略有不同，如下所示：&lt;/p>
&lt;pre>&lt;code>$ go test puzzlers/article20/q2
ok puzzlers/article20/q2 (cached)
&lt;/code>&lt;/pre>
&lt;p>可以看到，结果最右边的不再是测试耗时，而是&lt;code>(cached)&lt;/code>。这表明，由于测试代码与被测代码都没有任何变动，所以&lt;code>go test&lt;/code>命令直接把之前缓存测试成功的结果打印出来了。&lt;/p>
&lt;p>go 命令通常会缓存程序构建的结果，以便在将来的构建中重用。我们可以通过运行&lt;code>go env GOCACHE&lt;/code>命令来查看缓存目录的路径。缓存的数据总是能够正确地反映出当时的各种源码文件、构建环境、编译器选项等等的真实情况。&lt;/p>
&lt;p>一旦有任何变动，缓存数据就会失效，go 命令就会再次真正地执行操作。所以我们并不用担心打印出的缓存数据不是实时的结果。go 命令会定期地删除最近未使用的缓存数据，但是，如果你想手动删除所有的缓存数据，运行一下&lt;code>go clean -cache&lt;/code>命令就好了。&lt;/p>
&lt;p>对于测试成功的结果，go 命令也是会缓存的。运行&lt;code>go clean -testcache&lt;/code>将会删除所有的测试结果缓存。不过，这样做肯定不会删除任何构建结果缓存。&lt;/p>
&lt;blockquote>
&lt;p>此外，设置环境变量&lt;code>GODEBUG&lt;/code>的值也可以稍稍地改变 go 命令的缓存行为。比如，设置值为&lt;code>gocacheverify=1&lt;/code>将会导致 go 命令绕过任何的缓存数据，而真正地执行操作并重新生成所有结果，然后再去检查新的结果与现有的缓存数据是否一致。&lt;/p>
&lt;/blockquote>
&lt;p>总之，我们并不用在意缓存数据的存在，因为它们肯定不会妨碍&lt;code>go test&lt;/code>命令打印正确的测试结果。&lt;/p>
&lt;p>你可能会问，如果测试失败，命令打印的结果将会是怎样的？如果功能测试函数的那个唯一参数被命名为&lt;code>t&lt;/code>，那么当我们在其中调用&lt;code>t.Fail&lt;/code>方法时，虽然当前的测试函数会继续执行下去，但是结果会显示该测试失败。如下所示：&lt;/p>
&lt;pre>&lt;code>$ go test puzzlers/article20/q2
--- FAIL: TestFail (0.00s)
demo53_test.go:49: Failed.
FAIL
FAIL puzzlers/article20/q2 0.007s
&lt;/code>&lt;/pre>
&lt;p>我们运行的命令与之前是相同的，但是我新增了一个功能测试函数&lt;code>TestFail&lt;/code>，并在其中调用了&lt;code>t.Fail&lt;/code>方法。测试结果显示，对被测代码包的测试，由于&lt;code>TestFail&lt;/code>函数的测试失败而宣告失败。&lt;/p>
&lt;p>注意，对于失败测试的结果，&lt;code>go test&lt;/code>命令并不会进行缓存，所以，这种情况下的每次测试都会产生全新的结果。另外，如果测试失败了，那么&lt;code>go test&lt;/code>命令将会导致：失败的测试函数中的常规测试日志一并被打印出来。&lt;/p>
&lt;p>在这里的测试结果中，之所以显示了&amp;quot;demo53_test.go:49: Failed.&amp;ldquo;这一行，是因为我在&lt;code>TestFail&lt;/code>函数中的调用表达式&lt;code>t.Fail()&lt;/code>的下边编写了代码&lt;code>t.Log(&amp;quot;Failed.&amp;quot;)&lt;/code>。&lt;/p>
&lt;p>&lt;code>t.Log&lt;/code>方法以及&lt;code>t.Logf&lt;/code>方法的作用，就是打印常规的测试日志，只不过当测试成功的时候，&lt;code>go test&lt;/code>命令就不会打印这类日志了。如果你想在测试结果中看到所有的常规测试日志，那么可以在运行&lt;code>go test&lt;/code>命令的时候加入标记&lt;code>-v&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;p>若我们想让某个测试函数在执行的过程中立即失败，则可以在该函数中调用&lt;code>t.FailNow&lt;/code>方法。&lt;/p>
&lt;p>我在下面把&lt;code>TestFail&lt;/code>函数中的&lt;code>t.Fail()&lt;/code>改为&lt;code>t.FailNow()&lt;/code>。&lt;/p>
&lt;p>与&lt;code>t.Fail()&lt;/code>不同，在&lt;code>t.FailNow()&lt;/code>执行之后，当前函数会立即终止执行。换句话说，该行代码之后的所有代码都会失去执行机会。在这样修改之后，我再次运行上面的命令，得到的结果如下：&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code>--- FAIL: TestFail (0.00s)
FAIL
FAIL puzzlers/article20/q2 0.008s
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;p>显然，之前显示在结果中的常规测试日志并没有出现在这里。&lt;/p>
&lt;/blockquote>
&lt;p>顺便说一下，如果你想在测试失败的同时打印失败测试日志，那么可以直接调用&lt;code>t.Error&lt;/code>方法或者&lt;code>t.Errorf&lt;/code>方法。&lt;/p>
&lt;p>前者相当于&lt;code>t.Log&lt;/code>方法和&lt;code>t.Fail&lt;/code>方法的连续调用，而后者也与之类似，只不过它相当于先调用了&lt;code>t.Logf&lt;/code>方法。&lt;/p>
&lt;p>除此之外，还有&lt;code>t.Fatal&lt;/code>方法和&lt;code>t.Fatalf&lt;/code>方法，它们的作用是在打印失败错误日志之后立即终止当前测试函数的执行并宣告测试失败。更具体地说，这相当于它们在最后都调用了&lt;code>t.FailNow&lt;/code>方法。&lt;/p>
&lt;p>好了，到此为止，你是不是已经会解读功能测试的测试结果了呢？&lt;/p>
&lt;h3 id="问题-2怎样解释性能测试的测试结果">问题 2：怎样解释性能测试的测试结果？&lt;/h3>
&lt;p>性能测试与功能测试的结果格式有很多相似的地方。我们在这里仅关注前者的特殊之处。请看下面的打印结果。&lt;/p>
&lt;pre>&lt;code>$ go test -bench=. -run=^$ puzzlers/article20/q3
goos: darwin
goarch: amd64
pkg: puzzlers/article20/q3
BenchmarkGetPrimes-8 500000 2314 ns/op
PASS
ok puzzlers/article20/q3 1.192s
&lt;/code>&lt;/pre>
&lt;p>我在运行&lt;code>go test&lt;/code>命令的时候加了两个标记。第一个标记及其值为&lt;code>-bench=.&lt;/code>，只有有了这个标记，命令才会进行性能测试。该标记的值&lt;code>.&lt;/code>表明需要执行任意名称的性能测试函数，当然了，函数名称还是要符合 Go 程序测试的基本规则的。&lt;/p>
&lt;p>第二个标记及其值是&lt;code>-run=^$&lt;/code>，这个标记用于表明需要执行哪些功能测试函数，这同样也是以函数名称为依据的。该标记的值&lt;code>^$&lt;/code>意味着：只执行名称为空的功能测试函数，换句话说，不执行任何功能测试函数。&lt;/p>
&lt;p>你可能已经看出来了，这两个标记的值都是正则表达式。实际上，它们只能以正则表达式为值。此外，如果运行&lt;code>go test&lt;/code>命令的时候不加&lt;code>-run&lt;/code>标记，那么就会使它执行被测代码包中的所有功能测试函数。&lt;/p>
&lt;p>再来看测试结果，重点说一下倒数第三行的内容。&lt;code>BenchmarkGetPrimes-8&lt;/code>被称为单个性能测试的名称，它表示命令执行了性能测试函数&lt;code>BenchmarkGetPrimes&lt;/code>，并且当时所用的最大 P 数量为&lt;code>8&lt;/code>。&lt;/p>
&lt;p>最大 P 数量相当于可以同时运行 goroutine 的逻辑 CPU 的最大个数。这里的逻辑 CPU，也可以被称为 CPU 核心，但它并不等同于计算机中真正的 CPU 核心，只是 Go 语言运行时系统内部的一个概念，代表着它同时运行 goroutine 的能力。&lt;/p>
&lt;p>顺便说一句，一台计算机的 CPU 核心的个数，意味着它能在同一时刻执行多少条程序指令，代表着它并行处理程序指令的能力。&lt;/p>
&lt;p>我们可以通过调用 &lt;code>runtime.GOMAXPROCS&lt;/code>函数改变最大 P 数量，也可以在运行&lt;code>go test&lt;/code>命令时，加入标记&lt;code>-cpu&lt;/code>来设置一个最大 P 数量的列表，以供命令在多次测试时使用。&lt;/p>
&lt;p>至于怎样使用这个标记，以及&lt;code>go test&lt;/code>命令执行的测试流程，会因此做出怎样的改变，我们在下一篇文章中再讨论。&lt;/p>
&lt;p>在性能测试名称右边的是，&lt;code>go test&lt;/code>命令最后一次执行性能测试函数（即&lt;code>BenchmarkGetPrimes&lt;/code>函数）的时候，被测函数（即&lt;code>GetPrimes&lt;/code>函数）被执行的实际次数。这是什么意思呢？&lt;/p>
&lt;p>&lt;code>go test&lt;/code>命令在执行性能测试函数的时候会给它一个正整数，若该测试函数的唯一参数的名称为&lt;code>b&lt;/code>，则该正整数就由&lt;code>b.N&lt;/code>代表。我们应该在测试函数中配合着编写代码，比如：&lt;/p>
&lt;pre>&lt;code>for i := 0; i &amp;lt; b.N; i++ {
GetPrimes(1000)
}
&lt;/code>&lt;/pre>
&lt;p>我在一个会迭代&lt;code>b.N&lt;/code>次的循环中调用了&lt;code>GetPrimes&lt;/code>函数，并给予它参数值&lt;code>1000&lt;/code>。&lt;code>go test&lt;/code>命令会先尝试把&lt;code>b.N&lt;/code>设置为&lt;code>1&lt;/code>，然后执行测试函数。&lt;/p>
&lt;p>如果测试函数的执行时间没有超过上限，此上限默认为 1 秒，那么命令就会改大&lt;code>b.N&lt;/code>的值，然后再次执行测试函数，如此往复，直到这个时间大于或等于上限为止。&lt;/p>
&lt;p>当某次执行的时间大于或等于上限时，我们就说这是命令此次对该测试函数的最后一次执行。这时的&lt;code>b.N&lt;/code>的值就会被包含在测试结果中，也就是上述测试结果中的&lt;code>500000&lt;/code>。&lt;/p>
&lt;p>我们可以简称该值为执行次数，但要注意，它指的是被测函数的执行次数，而不是性能测试函数的执行次数。&lt;/p>
&lt;p>最后再看这个执行次数的右边，&lt;code>2314 ns/op&lt;/code>表明单次执行&lt;code>GetPrimes&lt;/code>函数的平均耗时为&lt;code>2314&lt;/code>纳秒。这其实就是通过将最后一次执行测试函数时的执行时间，除以（被测函数的）执行次数而得出的。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/78/69/78d4c73a9aa9d48b59d3fd304d4b2069.png" alt="">&lt;/p>
&lt;p>（性能测试结果的基本解读）&lt;/p>
&lt;p>以上这些，就是对默认情况下的性能测试结果的基本解读。你看明白了吗？&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>注意，对于功能测试和性能测试，命令执行测试流程的方式会有些不同。另外一个重要的问题是，我们在与&lt;code>go test&lt;/code>命令交互时，怎样解读它提供给我们的信息。只有解读正确，你才能知道测试的成功与否，失败的具体原因以及严重程度等等。&lt;/p>
&lt;p>除此之外，对于性能测试，你还需要关注命令输出的计算资源使用提示，以及各种性能度量。&lt;/p>
&lt;p>这两篇的文章中，我们一起学习了不少东西，但是其实还不够。我们只是探讨了&lt;code>go test&lt;/code>命令以及&lt;code>testing&lt;/code>包的基本使用方式。&lt;/p>
&lt;p>在下一篇，我们还会讨论更高级的内容。这将涉及&lt;code>go test&lt;/code>命令的各种标记、&lt;code>testing&lt;/code>包的更多 API，以及更复杂的测试结果。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>在编写示例测试函数的时候，我们怎样指定预期的打印内容？&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 25丨更多的测试手法</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/25%E4%B8%A8%E6%9B%B4%E5%A4%9A%E7%9A%84%E6%B5%8B%E8%AF%95%E6%89%8B%E6%B3%95/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/25%E4%B8%A8%E6%9B%B4%E5%A4%9A%E7%9A%84%E6%B5%8B%E8%AF%95%E6%89%8B%E6%B3%95/</guid><description>
&lt;p>在前面的文章中，我们一起学习了 Go 程序测试的基础知识和基本测试手法。这主要包括了 Go 程序测试的基本规则和主要流程、&lt;code>testing.T&lt;/code>类型和&lt;code>testing.B&lt;/code>类型的常用方法、&lt;code>go test&lt;/code>命令的基本使用方式、常规测试结果的解读等等。&lt;/p>
&lt;p>在本篇文章，我会继续为你讲解更多更高级的测试方法。这会涉及&lt;code>testing&lt;/code>包中更多的 API、&lt;code>go test&lt;/code>命令支持的，更多标记更加复杂的测试结果，以及测试覆盖度分析等等。&lt;/p>
&lt;h2 id="前导内容-cpu-的功能">前导内容：-cpu 的功能&lt;/h2>
&lt;p>续接前文。我在前面提到了&lt;code>go test&lt;/code>命令的标记&lt;code>-cpu&lt;/code>，它是用来设置测试执行最大 P 数量的列表的。&lt;/p>
&lt;blockquote>
&lt;p>复习一下，我在讲 go 语句的时候说过，这里的 P 是 processor 的缩写，每个 processor 都是一个可以承载若干个 G，且能够使这些 G 适时地与 M 进行对接并得到真正运行的中介。&lt;/p>
&lt;p>正是由于 P 的存在，G 和 M 才可以呈现出多对多的关系，并能够及时、灵活地进行组合和分离。&lt;/p>
&lt;p>这里的 G 就是 goroutine 的缩写，可以被理解为 Go 语言自己实现的用户级线程。M 即为 machine 的缩写，代表着系统级线程，或者说操作系统内核级别的线程。&lt;/p>
&lt;/blockquote>
&lt;p>Go 语言并发编程模型中的 P，正是 goroutine 的数量能够数十万计的关键所在。P 的数量意味着 Go 程序背后的运行时系统中，会有多少个用于承载可运行的 G 的队列存在。&lt;/p>
&lt;p>每一个队列都相当于一条流水线，它会源源不断地把可运行的 G 输送给空闲的 M，并使这两者对接。&lt;/p>
&lt;p>一旦对接完成，被对接的 G 就真正地运行在操作系统的内核级线程之上了。每条流水线之间虽然会有联系，但都是独立运作的。&lt;/p>
&lt;p>因此，最大 P 数量就代表着 Go 语言运行时系统同时运行 goroutine 的能力，也可以被视为其中逻辑 CPU 的最大个数。而&lt;code>go test&lt;/code>命令的&lt;code>-cpu&lt;/code>标记正是用于设置这个最大个数的。&lt;/p>
&lt;p>也许你已经知道，在默认情况下，最大 P 数量就等于当前计算机 CPU 核心的实际数量。&lt;/p>
&lt;p>当然了，前者也可以大于或者小于后者，如此可以在一定程度上模拟拥有不同的 CPU 核心数的计算机。&lt;/p>
&lt;p>所以，也可以说，使用&lt;code>-cpu&lt;/code>标记可以模拟：被测程序在计算能力不同计算机中的表现。&lt;/p>
&lt;p>现在，你已经知道了&lt;code>-cpu&lt;/code>标记的用途及其背后的含义。那么它的具体用法，以及对&lt;code>go test&lt;/code>命令的影响你是否也清楚呢？&lt;/p>
&lt;p>&lt;strong>我们今天的问题是：怎样设置&lt;code>-cpu&lt;/code>标记的值，以及它会对测试流程产生什么样的影响？&lt;/strong>&lt;/p>
&lt;p>&lt;strong>这里的典型回答是：&lt;/strong>&lt;/p>
&lt;p>标记&lt;code>-cpu&lt;/code>的值应该是一个正整数的列表，该列表的表现形式为：以英文半角逗号分隔的多个整数字面量，比如&lt;code>1,2,4&lt;/code>。&lt;/p>
&lt;p>针对于此值中的每一个正整数，&lt;code>go test&lt;/code>命令都会先设置最大 P 数量为该数，然后再执行测试函数。&lt;/p>
&lt;p>如果测试函数有多个，那么&lt;code>go test&lt;/code>命令会依照此方式逐个执行。&lt;/p>
&lt;blockquote>
&lt;p>以&lt;code>1,2,4&lt;/code>为例，&lt;code>go test&lt;/code>命令会先以&lt;code>1&lt;/code>,&lt;code>2&lt;/code>,&lt;code>4&lt;/code>为最大 P 数量分别去执行第一个测试函数，之后再用同样的方式执行第二个测试函数，以此类推。&lt;/p>
&lt;/blockquote>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>实际上，不论我们是否追加了&lt;code>-cpu&lt;/code>标记，&lt;code>go test&lt;/code>命令执行测试函数时流程都是相同的，只不过具体执行步骤会略有不同。&lt;/p>
&lt;p>&lt;code>go test&lt;/code>命令在进行准备工作的时候会读取&lt;code>-cpu&lt;/code>标记的值，并把它转换为一个以&lt;code>int&lt;/code>为元素类型的切片，我们也可以称它为逻辑 CPU 切片。&lt;/p>
&lt;p>如果该命令发现我们并没有追加这个标记，那么就会让逻辑 CPU 切片只包含一个元素值，即最大 P 数量的默认值，也就是当前计算机 CPU 核心的实际数量。&lt;/p>
&lt;p>在准备执行某个测试函数的时候，无论该函数是功能测试函数，还是性能测试函数，&lt;code>go test&lt;/code>命令都会迭代逻辑 CPU 切片，并且在每次迭代时，先依据当前的元素值设置最大 P 数量，然后再去执行测试函数。&lt;/p>
&lt;p>注意，对于性能测试函数来说，这里可能不只执行了一次。你还记得测试函数的执行时间上限，以及那个由&lt;code>b.N&lt;/code>代表的被测程序的执行次数吗？&lt;/p>
&lt;p>如果你忘了，那么可以再复习一下上篇文章中的第二个扩展问题。概括来讲，&lt;code>go test&lt;/code>命令每一次对性能测试函数的执行，都是一个探索的过程。它会在测试函数的执行时间上限不变的前提下，尝试找到被测程序的最大执行次数。&lt;/p>
&lt;p>在这个过程中，性能测试函数可能会被执行多次。为了以后描述方便，我们把这样一个探索的过程称为：对性能测试函数的一次探索式执行，这其中包含了对该函数的若干次执行，当然，肯定也包括了对被测程序更多次的执行。&lt;/p>
&lt;p>说到多次执行测试函数，我们就不得不提及另外一个标记，即&lt;code>-count&lt;/code>。&lt;code>-count&lt;/code>标记是专门用于重复执行测试函数的。它的值必须大于或等于&lt;code>0&lt;/code>，并且默认值为&lt;code>1&lt;/code>。&lt;/p>
&lt;p>如果我们在运行&lt;code>go test&lt;/code>命令的时候追加了&lt;code>-count 5&lt;/code>，那么对于每一个测试函数，命令都会在预设的不同条件下（比如不同的最大 P 数量下）分别重复执行五次。&lt;/p>
&lt;p>如果我们把前文所述的&lt;code>-cpu&lt;/code>标记、&lt;code>-count&lt;/code>标记，以及探索式执行联合起来看，就可以用一个公式来描述单个性能测试函数，在&lt;code>go test&lt;/code>命令的一次运行过程中的执行次数，即：&lt;/p>
&lt;pre>&lt;code>性能测试函数的执行次数 = `-cpu`标记的值中正整数的个数 x `-count`标记的值 x 探索式执行中测试函数的实际执行次数
&lt;/code>&lt;/pre>
&lt;p>对于功能测试函数来说，这个公式会更加简单一些，即：&lt;/p>
&lt;pre>&lt;code>功能测试函数的执行次数 = `-cpu`标记的值中正整数的个数 x `-count`标记的值
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/8d/56/8dc543c7ac67dca3dae3eebc53067c56.png" alt="">&lt;/p>
&lt;p>（测试函数的实际执行次数）&lt;/p>
&lt;p>看完了这两个公式，我想，你也许遇到过这种情况，&lt;strong>在对 Go 程序执行某种自动化测试的过程中，测试日志会显得特别多，而且好多都是重复的。&lt;/strong>&lt;/p>
&lt;p>这时，我们首先就应该想到，上面这些导致测试函数多次执行的标记和流程。我们往往需要检查这些标记的使用是否合理、日志记录是否有必要等等，从而对测试日志进行精简。&lt;/p>
&lt;p>比如，对于功能测试函数来说，我们通常没有必要重复执行它，即使是在不同的最大 P 数量下也是如此。注意，这里所说的重复执行指的是，在被测程序的输入（比如说被测函数的参数值）相同情况下的多次执行。&lt;/p>
&lt;p>有些时候，在输入完全相同的情况下，被测程序会因其他外部环境的不同，而表现出不同的行为。这时我们需要考虑的往往应该是：这个程序在设计上是否合理，而不是通过重复执行测试来检测风险。&lt;/p>
&lt;p>还有些时候，我们的程序会无法避免地依赖一些外部环境，比如数据库或者其他服务。这时，我们依然不应该让测试的反复执行成为检测手段，而应该在测试中通过仿造（mock）外部环境，来规避掉它们的不确定性。&lt;/p>
&lt;p>其实，单元测试的意思就是：对单一的功能模块进行边界清晰的测试，并且不掺杂任何对外部环境的检测。这也是&amp;quot;单元&amp;quot;二字要表达的主要含义。&lt;/p>
&lt;p>正好相反，对于性能测试函数来说，我们常常需要反复地执行，并以此试图抹平当时的计算资源调度的细微差别对被测程序性能的影响。通过&lt;code>-cpu&lt;/code>标记，我们还能够模拟被测程序在计算能力不同计算机中的性能表现。&lt;/p>
&lt;p>不过要注意，这里设置的最大 P 数量，最好不要超过当前计算机 CPU 核心的实际数量。因为一旦超出计算机实际的并行处理能力，Go 程序在性能上就无法再得到显著地提升了。&lt;/p>
&lt;p>这就像一个漏斗，不论我们怎样灌水，水的漏出速度总是有限的。更何况，为了管理过多的 P，Go 语言运行时系统还会耗费额外的计算资源。&lt;/p>
&lt;p>显然，上述模拟得出的程序性能一定是不准确的。不过，这或多或少可以作为一个参考，因为，这样模拟出的性能一般都会低于程序在计算环境中的实际性能。&lt;/p>
&lt;p>好了，关于&lt;code>-cpu&lt;/code>标记，以及由此引出的&lt;code>-count&lt;/code>标记和测试函数多次执行的问题，我们就先聊到这里。不过，为了让你再巩固一下前面的知识，我现在给出一段测试结果：&lt;/p>
&lt;pre>&lt;code>pkg: puzzlers/article21/q1
BenchmarkGetPrimesWith100-2 10000000 218 ns/op
BenchmarkGetPrimesWith100-2 10000000 215 ns/op
BenchmarkGetPrimesWith100-4 10000000 215 ns/op
BenchmarkGetPrimesWith100-4 10000000 216 ns/op
BenchmarkGetPrimesWith10000-2 50000 31523 ns/op
BenchmarkGetPrimesWith10000-2 50000 32372 ns/op
BenchmarkGetPrimesWith10000-4 50000 32065 ns/op
BenchmarkGetPrimesWith10000-4 50000 31936 ns/op
BenchmarkGetPrimesWith1000000-2 300 4085799 ns/op
BenchmarkGetPrimesWith1000000-2 300 4121975 ns/op
BenchmarkGetPrimesWith1000000-4 300 4112283 ns/op
BenchmarkGetPrimesWith1000000-4 300 4086174 ns/op
&lt;/code>&lt;/pre>
&lt;p>现在，我希望让你反推一下，我在运行&lt;code>go test&lt;/code>命令时追加的&lt;code>-cpu&lt;/code>标记和&lt;code>-count&lt;/code>标记的值都是什么。反推之后，你可以用实验的方式进行验证。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;h3 id="问题-1-parallel标记的作用是什么">问题 1：&lt;code>-parallel&lt;/code>标记的作用是什么？&lt;/h3>
&lt;p>我们在运行&lt;code>go test&lt;/code>命令的时候，可以追加标记&lt;code>-parallel&lt;/code>，该标记的作用是：设置同一个被测代码包中的功能测试函数的最大并发执行数。该标记的默认值是测试运行时的最大 P 数量（这可以通过调用表达式&lt;code>runtime.GOMAXPROCS(0)&lt;/code>获得）。&lt;/p>
&lt;p>我在上篇文章中已经说过，对于功能测试，为了加快测试速度，命令通常会并发地测试多个被测代码包。&lt;/p>
&lt;p>但是，在默认情况下，对于同一个被测代码包中的多个功能测试函数，命令会串行地执行它们。除非我们在一些功能测试函数中显式地调用&lt;code>t.Parallel&lt;/code>方法。&lt;/p>
&lt;p>这个时候，这些包含了&lt;code>t.Parallel&lt;/code>方法调用的功能测试函数就会被&lt;code>go test&lt;/code>命令并发地执行，而并发执行的最大数量正是由&lt;code>-parallel&lt;/code>标记值决定的。不过要注意，同一个功能测试函数的多次执行之间一定是串行的。&lt;/p>
&lt;p>你可以运行命令&lt;code>go test -v puzzlers/article21/q2&lt;/code>或者&lt;code>go test -count=2 -v puzzlers/article21/q2&lt;/code>，查看测试结果，然后仔细地体会一下。&lt;/p>
&lt;p>最后，强调一下，&lt;code>-parallel&lt;/code>标记对性能测试是无效的。当然了，对于性能测试来说，也是可以并发进行的，不过机制上会有所不同。&lt;/p>
&lt;p>概括地讲，这涉及了&lt;code>b.RunParallel&lt;/code>方法、&lt;code>b.SetParallelism&lt;/code>方法和&lt;code>-cpu&lt;/code>标记的联合运用。如果想进一步了解，你可以查看&lt;code>testing&lt;/code>代码包的文档。（&lt;a href="https://golang.google.cn/pkg/testing%EF%BC%89">https://golang.google.cn/pkg/testing）&lt;/a>&lt;/p>
&lt;h3 id="问题-2性能测试函数中的计时器是做什么用的">问题 2：性能测试函数中的计时器是做什么用的？&lt;/h3>
&lt;p>如果你看过&lt;code>testing&lt;/code>包的文档，那么很可能会发现其中的&lt;code>testing.B&lt;/code>类型有这么几个指针方法：&lt;code>StartTimer&lt;/code>、&lt;code>StopTimer&lt;/code>和&lt;code>ResetTimer&lt;/code>。这些方法都是用于操作当前的性能测试函数专属的计时器的。&lt;/p>
&lt;p>所谓的计时器，是一个逻辑上的概念，它其实是&lt;code>testing.B&lt;/code>类型中一些字段的统称。这些字段用于记录：当前测试函数在当次执行过程中耗费的时间、分配的堆内存的字节数以及分配次数。&lt;/p>
&lt;p>我在下面会以测试函数的执行时间为例，来说明此计时器的用法。不过，你需要知道的是，这三个方法在开始记录、停止记录或重新记录执行时间的同时，也会对堆内存分配字节数和分配次数的记录起到相同的作用。&lt;/p>
&lt;p>实际上，&lt;code>go test&lt;/code>命令本身就会用到这样的计时器。当准备执行某个性能测试函数的时候，命令会重置并启动该函数专属的计时器。一旦这个函数执行完毕，命令又会立即停止这个计时器。&lt;/p>
&lt;p>如此一来，命令就能够准确地记录下（我们在前面多次提到的）测试函数执行时间了。然后，命令就会将这个时间与执行时间上限进行比较，并决定是否在改大&lt;code>b.N&lt;/code>的值之后，再次执行测试函数。&lt;/p>
&lt;p>还记得吗？这就是我在前面讲过的，对性能测试函数的探索式执行。显然，如果我们在测试函数中自行操作这个计时器，就一定会影响到这个探索式执行的结果。也就是说，这会让命令找到被测程序的最大执行次数有所不同。&lt;/p>
&lt;p>请看在 demo57_test.go 文件中的那个性能测试函数，如下所示：&lt;/p>
&lt;pre>&lt;code>func BenchmarkGetPrimes(b *testing.B) {
b.StopTimer()
time.Sleep(time.Millisecond * 500) // 模拟某个耗时但与被测程序关系不大的操作。
max := 10000
b.StartTimer()
for i := 0; i &amp;lt; b.N; i++ {
GetPrimes(max)
}
}
&lt;/code>&lt;/pre>
&lt;p>需要注意的是该函数体中的前四行代码。我先停止了当前测试函数的计时器，然后通过调用&lt;code>time.Sleep&lt;/code>函数，模拟了一个比较耗时的额外操作，并且在给变量&lt;code>max&lt;/code>赋值之后又启动了该计时器。&lt;/p>
&lt;p>你可以想象一下，我们需要耗费额外的时间去确定&lt;code>max&lt;/code>变量的值，虽然在后面它会被传入&lt;code>GetPrimes&lt;/code>函数，但是，针对&lt;code>GetPrimes&lt;/code>函数本身的性能测试并不应该包含确定参数值的过程。&lt;/p>
&lt;p>因此，我们需要把这个过程所耗费的时间，从当前测试函数的执行时间中去除掉。这样就能够避免这一过程对测试结果的不良影响了。&lt;/p>
&lt;p>每当这个测试函数执行完毕后，&lt;code>go test&lt;/code>命令拿到的执行时间都只应该包含调用&lt;code>GetPrimes&lt;/code>函数所耗费的那些时间。只有依据这个时间做出的后续判断，以及找到被测程序的最大执行次数才是准确的。&lt;/p>
&lt;p>在性能测试函数中，我们可以通过对&lt;code>b.StartTimer&lt;/code>和&lt;code>b.StopTimer&lt;/code>方法的联合运用，再去除掉任何一段代码的执行时间。&lt;/p>
&lt;p>相比之下，&lt;code>b.ResetTimer&lt;/code>方法的灵活性就要差一些了，它只能用于：去除在调用它之前那些代码的执行时间。不过，无论在调用它的时候，计时器是不是正在运行，它都可以起作用。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>在本篇文章中，我假设你已经理解了上一篇文章涉及的内容。因此，我在这里围绕着几个可以被&lt;code>go test&lt;/code>命令接受的重要标记，进一步地阐释了功能测试和性能测试在不同条件下的测试流程。&lt;/p>
&lt;p>其中，比较重要的有最大 P 数量的含义，&lt;code>-cpu&lt;/code>标记的作用及其对测试流程的影响，针对性能测试函数的探索式执行的意义，测试函数执行时间的计算方法，以及&lt;code>-count&lt;/code>标记的用途和适用场景。&lt;/p>
&lt;p>当然了，学会怎样并发地执行多个功能测试函数也是很有必要的。这需要联合运用&lt;code>-parallel&lt;/code>标记和功能测试函数中的&lt;code>t.Parallel&lt;/code>方法。&lt;/p>
&lt;p>另外，你还需要知道性能测试函数专属计时器的内涵，以及那三个方法对计时器起到的作用。通过对计时器的操作，我们可以达到精确化性能测试函数的执行时间的目的，从而帮助&lt;code>go test&lt;/code>命令找到被测程序真实的最大执行次数。&lt;/p>
&lt;p>到这里，我们对 Go 程序测试的讨论就要告一段落了。我们需要搞清楚的是，&lt;code>go test&lt;/code>命令所执行的基本测试流程是什么，以及我们可以通过什么样的手段让测试流程产生变化，从而满足我们的测试需求并为我们提供更加充分的测试结果。&lt;/p>
&lt;p>希望你已经从中学到了一些东西，并能够学以致用。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>&lt;code>-benchmem&lt;/code>标记和&lt;code>-benchtime&lt;/code>标记的作用分别是什么？&lt;br>
怎样在测试的时候开启测试覆盖度分析？如果开启，会有什么副作用吗？&lt;/p>
&lt;p>关于这两个问题，你都可以参考官方的&lt;a href="https://golang.google.cn/cmd/go/#hdr-Testing_flags">go 命令文档中的测试标记部分进行&lt;/a>回答。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 27丨条件变量sync</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/27%E4%B8%A8%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8Fsync/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/27%E4%B8%A8%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8Fsync/</guid><description>
&lt;p>在上篇文章中，我们主要说的是互斥锁，今天我和你来聊一聊条件变量（conditional variable）。&lt;/p>
&lt;h2 id="前导内容条件变量与互斥锁">前导内容：条件变量与互斥锁&lt;/h2>
&lt;p>我们常常会把条件变量这个同步工具拿来与互斥锁一起讨论。实际上，条件变量是基于互斥锁的，它必须有互斥锁的支撑才能发挥作用。&lt;/p>
&lt;p>条件变量并不是被用来保护临界区和共享资源的，它是用于协调想要访问共享资源的那些线程的。当共享资源的状态发生变化时，它可以被用来通知被互斥锁阻塞的线程。&lt;/p>
&lt;p>比如说，我们两个人在共同执行一项秘密任务，这需要在不直接联系和见面的前提下进行。我需要向一个信箱里放置情报，你需要从这个信箱中获取情报。这个信箱就相当于一个共享资源，而我们就分别是进行写操作的线程和进行读操作的线程。&lt;/p>
&lt;p>如果我在放置的时候发现信箱里还有未被取走的情报，那就不再放置，而先返回。另一方面，如果你在获取的时候发现信箱里没有情报，那也只能先回去了。这就相当于写的线程或读的线程阻塞的情况。&lt;/p>
&lt;p>虽然我们俩都有信箱的钥匙，但是同一时刻只能有一个人插入钥匙并打开信箱，这就是锁的作用了。更何况咱们俩是不能直接见面的，所以这个信箱本身就可以被视为一个临界区。&lt;/p>
&lt;p>尽管没有协调好，咱们俩仍然要想方设法的完成任务啊。所以，如果信箱里有情报，而你却迟迟未取走，那我就需要每过一段时间带着新情报去检查一次，若发现信箱空了，我就需要及时地把新情报放到里面。&lt;/p>
&lt;p>另一方面，如果信箱里一直没有情报，那你也要每过一段时间去打开看看，一旦有了情报就及时地取走。这么做是可以的，但就是太危险了，很容易被敌人发现。&lt;/p>
&lt;p>后来，我们又想了一个计策，各自雇佣了一个不起眼的小孩儿。如果早上七点有一个戴红色帽子的小孩儿从你家楼下路过，那么就意味着信箱里有了新情报。另一边，如果上午九点有一个戴蓝色帽子的小孩儿从我家楼下路过，那就说明你已经从信箱中取走了情报。&lt;/p>
&lt;p>这样一来，咱们执行任务的隐蔽性高多了，并且效率的提升非常显著。这两个戴不同颜色帽子的小孩儿就相当于条件变量，在共享资源的状态产生变化的时候，起到了通知的作用。&lt;/p>
&lt;p>当然了，我们是在用 Go 语言编写程序，而不是在执行什么秘密任务。因此，条件变量在这里的最大优势就是在效率方面的提升。当共享资源的状态不满足条件的时候，想操作它的线程再也不用循环往复地做检查了，只要等待通知就好了。&lt;/p>
&lt;p>说到这里，想考考你知道怎么使用条件变量吗？所以，&lt;strong>我们今天的问题就是：条件变量怎样与互斥锁配合使用？&lt;/strong>&lt;/p>
&lt;p>&lt;strong>这道题的典型回答是：条件变量的初始化离不开互斥锁，并且它的方法有的也是基于互斥锁的。&lt;/strong>&lt;/p>
&lt;p>条件变量提供的方法有三个：等待通知（wait）、单发通知（signal）和广播通知（broadcast）。&lt;/p>
&lt;p>我们在利用条件变量等待通知的时候，需要在它基于的那个互斥锁保护下进行。而在进行单发通知或广播通知的时候，却是恰恰相反的，也就是说，需要在对应的互斥锁解锁之后再做这两种操作。&lt;/p>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>这个问题看起来很简单，但其实可以基于它, 延伸出很多其他的问题。比如，每个方法的使用时机是什么？又比如，每个方法执行的内部流程是怎样的？&lt;/p>
&lt;p>下面，我们一边用代码实现前面那个例子，一边讨论条件变量的使用。&lt;/p>
&lt;p>首先，我们先来创建如下几个变量。&lt;/p>
&lt;pre>&lt;code>var mailbox uint8
var lock sync.RWMutex
sendCond := sync.NewCond(&amp;amp;lock)
recvCond := sync.NewCond(lock.RLocker())
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>变量&lt;code>mailbox&lt;/code>代表信箱，是&lt;code>uint8&lt;/code>类型的。&lt;/strong> 若它的值为&lt;code>0&lt;/code>则表示信箱中没有情报，而当它的值为&lt;code>1&lt;/code>时则说明信箱中有情报。&lt;code>lock&lt;/code>是一个类型为&lt;code>sync.RWMutex&lt;/code>的变量，是一个读写锁，也可以被视为信箱上的那把锁。&lt;/p>
&lt;p>另外，基于这把锁，我还创建了两个代表条件变量的变量，&lt;strong>名字分别叫&lt;code>sendCond&lt;/code>和&lt;code>recvCond&lt;/code>。&lt;/strong> 它们都是&lt;code>*sync.Cond&lt;/code>类型的，同时也都是由&lt;code>sync.NewCond&lt;/code>函数来初始化的。&lt;/p>
&lt;p>与&lt;code>sync.Mutex&lt;/code>类型和&lt;code>sync.RWMutex&lt;/code>类型不同，&lt;code>sync.Cond&lt;/code>类型并不是开箱即用的。我们只能利用&lt;code>sync.NewCond&lt;/code>函数创建它的指针值。这个函数需要一个&lt;code>sync.Locker&lt;/code>类型的参数值。&lt;/p>
&lt;p>还记得吗？我在前面说过，条件变量是基于互斥锁的，它必须有互斥锁的支撑才能够起作用。因此，这里的参数值是不可或缺的，它会参与到条件变量的方法实现当中。&lt;/p>
&lt;p>&lt;code>sync.Locker&lt;/code>其实是一个接口，在它的声明中只包含了两个方法定义，即：&lt;code>Lock()&lt;/code>和&lt;code>Unlock()&lt;/code>。&lt;code>sync.Mutex&lt;/code>类型和&lt;code>sync.RWMutex&lt;/code>类型都拥有&lt;code>Lock&lt;/code>方法和&lt;code>Unlock&lt;/code>方法，只不过它们都是指针方法。因此，这两个类型的指针类型才是&lt;code>sync.Locker&lt;/code>接口的实现类型。&lt;/p>
&lt;p>我在为&lt;code>sendCond&lt;/code>变量做初始化的时候，把基于&lt;code>lock&lt;/code>变量的指针值传给了&lt;code>sync.NewCond&lt;/code>函数。&lt;/p>
&lt;p>原因是，&lt;strong>&lt;code>lock&lt;/code>变量的&lt;code>Lock&lt;/code>方法和&lt;code>Unlock&lt;/code>方法分别用于对其中写锁的锁定和解锁，它们与&lt;code>sendCond&lt;/code>变量的含义是对应的。&lt;/strong> &lt;code>sendCond&lt;/code>是专门为放置情报而准备的条件变量，向信箱里放置情报，可以被视为对共享资源的写操作。&lt;/p>
&lt;p>相应的，&lt;strong>&lt;code>recvCond&lt;/code>变量代表的是专门为获取情报而准备的条件变量。&lt;/strong> 虽然获取情报也会涉及对信箱状态的改变，但是好在做这件事的人只会有你一个，而且我们也需要借此了解一下，条件变量与读写锁中的读锁的联用方式。所以，在这里，我们暂且把获取情报看做是对共享资源的读操作。&lt;/p>
&lt;p>因此，为了初始化&lt;code>recvCond&lt;/code>这个条件变量，我们需要的是&lt;code>lock&lt;/code>变量中的读锁，并且还需要是&lt;code>sync.Locker&lt;/code>类型的。&lt;/p>
&lt;p>可是，&lt;code>lock&lt;/code>变量中用于对读锁进行锁定和解锁的方法却是&lt;code>RLock&lt;/code>和&lt;code>RUnlock&lt;/code>，它们与&lt;code>sync.Locker&lt;/code>接口中定义的方法并不匹配。&lt;/p>
&lt;p>好在&lt;code>sync.RWMutex&lt;/code>类型的&lt;code>RLocker&lt;/code>方法可以实现这一需求。我们只要在调用&lt;code>sync.NewCond&lt;/code>函数时，传入调用表达式&lt;code>lock.RLocker()&lt;/code>的结果值，就可以使该函数返回符合要求的条件变量了。&lt;/p>
&lt;p>为什么说通过&lt;code>lock.RLocker()&lt;/code>得来的值就是&lt;code>lock&lt;/code>变量中的读锁呢？实际上，这个值所拥有的&lt;code>Lock&lt;/code>方法和&lt;code>Unlock&lt;/code>方法，在其内部会分别调用&lt;code>lock&lt;/code>变量的&lt;code>RLock&lt;/code>方法和&lt;code>RUnlock&lt;/code>方法。也就是说，前两个方法仅仅是后两个方法的代理而已。&lt;/p>
&lt;p>好了，我们现在有四个变量。一个是代表信箱的&lt;code>mailbox&lt;/code>，一个是代表信箱上的锁的&lt;code>lock&lt;/code>。还有两个是，代表了蓝帽子小孩儿的&lt;code>sendCond&lt;/code>，以及代表了红帽子小孩儿的&lt;code>recvCond&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/36/5d/3619456ade9d45a4d9c0fbd22bb6fd5d.png" alt="">&lt;/p>
&lt;p>（互斥锁与条件变量）&lt;/p>
&lt;p>我，现在是一个 goroutine（携带的&lt;code>go&lt;/code>函数），想要适时地向信箱里放置情报并通知你，应该怎么做呢？&lt;/p>
&lt;pre>&lt;code>lock.Lock()
for mailbox == 1 {
sendCond.Wait()
}
mailbox = 1
lock.Unlock()
recvCond.Signal()
&lt;/code>&lt;/pre>
&lt;p>我肯定需要先调用&lt;code>lock&lt;/code>变量的&lt;code>Lock&lt;/code>方法。注意，这个&lt;code>Lock&lt;/code>方法在这里意味的是：持有信箱上的锁，并且有打开信箱的权利，而不是锁上这个锁。&lt;/p>
&lt;p>然后，我要检查&lt;code>mailbox&lt;/code>变量的值是否等于&lt;code>1&lt;/code>，也就是说，要看看信箱里是不是还存有情报。如果还有情报，那么我就回家去等蓝帽子小孩儿了。&lt;/p>
&lt;p>这就是那条&lt;code>for&lt;/code>语句以及其中的调用表达式&lt;code>sendCond.Wait()&lt;/code>所表示的含义了。你可能会问，为什么这里是&lt;code>for&lt;/code>语句而不是&lt;code>if&lt;/code>语句呢？我在后面会对此进行解释的。&lt;/p>
&lt;p>我们再往后看，如果信箱里没有情报，那么我就把新情报放进去，关上信箱、锁上锁，然后离开。用代码表达出来就是&lt;code>mailbox = 1&lt;/code>和&lt;code>lock.Unlock()&lt;/code>。&lt;/p>
&lt;p>离开之后我还要做一件事，那就是让红帽子小孩儿准时去你家楼下路过。也就是说，我会及时地通知你&amp;quot;信箱里已经有新情报了&amp;quot;，我们调用&lt;code>recvCond&lt;/code>的&lt;code>Signal&lt;/code>方法就可以实现这一步骤。&lt;/p>
&lt;p>另一方面，你现在是另一个 goroutine，想要适时地从信箱中获取情报，然后通知我。&lt;/p>
&lt;pre>&lt;code>lock.RLock()
for mailbox == 0 {
recvCond.Wait()
}
mailbox = 0
lock.RUnlock()
sendCond.Signal()
&lt;/code>&lt;/pre>
&lt;p>你跟我做的事情在流程上其实基本一致，只不过每一步操作的对象是不同的。你需要调用的是&lt;code>lock&lt;/code>变量的&lt;code>RLock&lt;/code>方法。因为你要进行的是读操作，并且会使用&lt;code>recvCond&lt;/code>变量作为辅助。&lt;code>recvCond&lt;/code>与&lt;code>lock&lt;/code>变量的读锁是对应的。&lt;/p>
&lt;p>在打开信箱后，你要关注的是信箱里是不是没有情报，也就是检查&lt;code>mailbox&lt;/code>变量的值是否等于&lt;code>0&lt;/code>。如果它确实等于&lt;code>0&lt;/code>，那么你就需要回家去等红帽子小孩儿，也就是调用&lt;code>recvCond&lt;/code>的&lt;code>Wait&lt;/code>方法。这里使用的依然是&lt;code>for&lt;/code>语句。&lt;/p>
&lt;p>如果信箱里有情报，那么你就应该取走情报，关上信箱、锁上锁，然后离开。对应的代码是&lt;code>mailbox = 0&lt;/code>和&lt;code>lock.RUnlock()&lt;/code>。之后，你还需要让蓝帽子小孩儿准时去我家楼下路过。这样我就知道信箱中的情报已经被你获取了。&lt;/p>
&lt;p>以上这些，就是对咱们俩要执行秘密任务的代码实现。其中的条件变量的用法需要你特别注意。&lt;/p>
&lt;p>再强调一下，只要条件不满足，我就会通过调用&lt;code>sendCond&lt;/code>变量的&lt;code>Wait&lt;/code>方法，去等待你的通知，只有在收到通知之后我才会再次检查信箱。&lt;/p>
&lt;p>另外，当我需要通知你的时候，我会调用&lt;code>recvCond&lt;/code>变量的&lt;code>Signal&lt;/code>方法。你使用这两个条件变量的方式正好与我相反。你可能也看出来了，利用条件变量可以实现单向的通知，而双向的通知则需要两个条件变量。这也是条件变量的基本使用规则。&lt;/p>
&lt;p>你可以打开 demo61.go 文件，看到上述例子的全部实现代码。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>我们这两期的文章会围绕条件变量的内容展开，条件变量是基于互斥锁的一种同步工具，它必须有互斥锁的支撑才能发挥作用。 条件变量可以协调那些想要访问共享资源的线程。当共享资源的状态发生变化时，它可以被用来通知被互斥锁阻塞的线程。我在文章举了一个两人访问信箱的例子，并用代码实现了这个过程。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>&lt;code>*sync.Cond&lt;/code>类型的值可以被传递吗？那&lt;code>sync.Cond&lt;/code>类型的值呢？&lt;/p>
&lt;p>感谢你的收听，我们下期再见。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 28丨条件变量sync</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/28%E4%B8%A8%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8Fsync/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/28%E4%B8%A8%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8Fsync/</guid><description>
&lt;p>你好，我是郝林，今天我继续分享条件变量 sync.Cond 的内容。我们紧接着上一篇的内容进行知识扩展。&lt;/p>
&lt;h2 id="问题-1条件变量的wait方法做了什么">问题 1：条件变量的&lt;code>Wait&lt;/code>方法做了什么？&lt;/h2>
&lt;p>在了解了条件变量的使用方式之后，你可能会有这么几个疑问。&lt;/p>
&lt;ol>
&lt;li>为什么先要锁定条件变量基于的互斥锁，才能调用它的&lt;code>Wait&lt;/code>方法？&lt;/li>
&lt;li>为什么要用&lt;code>for&lt;/code>语句来包裹调用其&lt;code>Wait&lt;/code>方法的表达式，用&lt;code>if&lt;/code>语句不行吗？&lt;/li>
&lt;/ol>
&lt;p>这些问题我在面试的时候也经常问。你需要对这个&lt;code>Wait&lt;/code>方法的内部机制有所了解才能回答上来。&lt;/p>
&lt;p>条件变量的&lt;code>Wait&lt;/code>方法主要做了四件事。&lt;/p>
&lt;ol>
&lt;li>把调用它的 goroutine（也就是当前的 goroutine）加入到当前条件变量的通知队列中。&lt;/li>
&lt;li>解锁当前的条件变量基于的那个互斥锁。&lt;/li>
&lt;li>让当前的 goroutine 处于等待状态，等到通知到来时再决定是否唤醒它。此时，这个 goroutine 就会阻塞在调用这个&lt;code>Wait&lt;/code>方法的那行代码上。&lt;/li>
&lt;li>如果通知到来并且决定唤醒这个 goroutine，那么就在唤醒它之后重新锁定当前条件变量基于的互斥锁。自此之后，当前的 goroutine 就会继续执行后面的代码了。&lt;/li>
&lt;/ol>
&lt;p>你现在知道我刚刚说的第一个疑问的答案了吗？&lt;/p>
&lt;p>因为条件变量的&lt;code>Wait&lt;/code>方法在阻塞当前的 goroutine 之前，会解锁它基于的互斥锁，所以在调用该&lt;code>Wait&lt;/code>方法之前，我们必须先锁定那个互斥锁，否则在调用这个&lt;code>Wait&lt;/code>方法时，就会引发一个不可恢复的 panic。&lt;/p>
&lt;p>为什么条件变量的&lt;code>Wait&lt;/code>方法要这么做呢？你可以想象一下，如果&lt;code>Wait&lt;/code>方法在互斥锁已经锁定的情况下，阻塞了当前的 goroutine，那么又由谁来解锁呢？别的 goroutine 吗？&lt;/p>
&lt;p>先不说这违背了互斥锁的重要使用原则，即：成对的锁定和解锁，就算别的 goroutine 可以来解锁，那万一解锁重复了怎么办？由此引发的 panic 可是无法恢复的。&lt;/p>
&lt;p>如果当前的 goroutine 无法解锁，别的 goroutine 也都不来解锁，那么又由谁来进入临界区，并改变共享资源的状态呢？只要共享资源的状态不变，即使当前的 goroutine 因收到通知而被唤醒，也依然会再次执行这个&lt;code>Wait&lt;/code>方法，并再次被阻塞。&lt;/p>
&lt;p>所以说，如果条件变量的&lt;code>Wait&lt;/code>方法不先解锁互斥锁的话，那么就只会造成两种后果：不是当前的程序因 panic 而崩溃，就是相关的 goroutine 全面阻塞。&lt;/p>
&lt;p>再解释第二个疑问。很显然，&lt;code>if&lt;/code>语句只会对共享资源的状态检查一次，而&lt;code>for&lt;/code>语句却可以做多次检查，直到这个状态改变为止。那为什么要做多次检查呢？&lt;/p>
&lt;p>&lt;strong>这主要是为了保险起见。如果一个 goroutine 因收到通知而被唤醒，但却发现共享资源的状态，依然不符合它的要求，那么就应该再次调用条件变量的&lt;code>Wait&lt;/code>方法，并继续等待下次通知的到来。&lt;/strong>&lt;/p>
&lt;p>这种情况是很有可能发生的，具体如下面所示。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>有多个 goroutine 在等待共享资源的同一种状态。比如，它们都在等&lt;code>mailbox&lt;/code>变量的值不为&lt;code>0&lt;/code>的时候再把它的值变为&lt;code>0&lt;/code>，这就相当于有多个人在等着我向信箱里放置情报。虽然等待的 goroutine 有多个，但每次成功的 goroutine 却只可能有一个。别忘了，条件变量的&lt;code>Wait&lt;/code>方法会在当前的 goroutine 醒来后先重新锁定那个互斥锁。在成功的 goroutine 最终解锁互斥锁之后，其他的 goroutine 会先后进入临界区，但它们会发现共享资源的状态依然不是它们想要的。这个时候，&lt;code>for&lt;/code>循环就很有必要了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>共享资源可能有的状态不是两个，而是更多。比如，&lt;code>mailbox&lt;/code>变量的可能值不只有&lt;code>0&lt;/code>和&lt;code>1&lt;/code>，还有&lt;code>2&lt;/code>、&lt;code>3&lt;/code>、&lt;code>4&lt;/code>。这种情况下，由于状态在每次改变后的结果只可能有一个，所以，在设计合理的前提下，单一的结果一定不可能满足所有 goroutine 的条件。那些未被满足的 goroutine 显然还需要继续等待和检查。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>有一种可能，共享资源的状态只有两个，并且每种状态都只有一个 goroutine 在关注，就像我们在主问题当中实现的那个例子那样。不过，即使是这样，使用&lt;code>for&lt;/code>语句仍然是有必要的。原因是，在一些多 CPU 核心的计算机系统中，即使没有收到条件变量的通知，调用其&lt;code>Wait&lt;/code>方法的 goroutine 也是有可能被唤醒的。这是由计算机硬件层面决定的，即使是操作系统（比如 Linux）本身提供的条件变量也会如此。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>综上所述，在包裹条件变量的&lt;code>Wait&lt;/code>方法的时候，我们总是应该使用&lt;code>for&lt;/code>语句。&lt;/p>
&lt;p>好了，到这里，关于条件变量的&lt;code>Wait&lt;/code>方法，我想你知道的应该已经足够多了。&lt;/p>
&lt;h2 id="问题-2条件变量的signal方法和broadcast方法有哪些异同">问题 2：条件变量的&lt;code>Signal&lt;/code>方法和&lt;code>Broadcast&lt;/code>方法有哪些异同？&lt;/h2>
&lt;p>条件变量的&lt;code>Signal&lt;/code>方法和&lt;code>Broadcast&lt;/code>方法都是被用来发送通知的，不同的是，前者的通知只会唤醒一个因此而等待的 goroutine，而后者的通知却会唤醒所有为此等待的 goroutine。&lt;/p>
&lt;p>条件变量的&lt;code>Wait&lt;/code>方法总会把当前的 goroutine 添加到通知队列的队尾，而它的&lt;code>Signal&lt;/code>方法总会从通知队列的队首开始，查找可被唤醒的 goroutine。所以，因&lt;code>Signal&lt;/code>方法的通知，而被唤醒的 goroutine 一般都是最早等待的那一个。&lt;/p>
&lt;p>这两个方法的行为决定了它们的适用场景。如果你确定只有一个 goroutine 在等待通知，或者只需唤醒任意一个 goroutine 就可以满足要求，那么使用条件变量的&lt;code>Signal&lt;/code>方法就好了。&lt;/p>
&lt;p>否则，使用&lt;code>Broadcast&lt;/code>方法总没错，只要你设置好各个 goroutine 所期望的共享资源状态就可以了。&lt;/p>
&lt;p>此外，再次强调一下，与&lt;code>Wait&lt;/code>方法不同，条件变量的&lt;code>Signal&lt;/code>方法和&lt;code>Broadcast&lt;/code>方法并不需要在互斥锁的保护下执行。恰恰相反，我们最好在解锁条件变量基于的那个互斥锁之后，再去调用它的这两个方法。这更有利于程序的运行效率。&lt;/p>
&lt;p>最后，请注意，条件变量的通知具有即时性。也就是说，如果发送通知的时候没有 goroutine 为此等待，那么该通知就会被直接丢弃。在这之后才开始等待的 goroutine 只可能被后面的通知唤醒。&lt;/p>
&lt;p>你可以打开 demo62.go 文件，并仔细观察它与 demo61.go 的不同。尤其是&lt;code>lock&lt;/code>变量的类型，以及发送通知的方式。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>我们今天主要讲了条件变量，它是基于互斥锁的一种同步工具。在 Go 语言中，我们需要用&lt;code>sync.NewCond&lt;/code>函数来初始化一个&lt;code>sync.Cond&lt;/code>类型的条件变量。&lt;/p>
&lt;p>&lt;code>sync.NewCond&lt;/code>函数需要一个&lt;code>sync.Locker&lt;/code>类型的参数值。&lt;/p>
&lt;p>&lt;code>*sync.Mutex&lt;/code>类型的值以及&lt;code>*sync.RWMutex&lt;/code>类型的值都可以满足这个要求。都可以满足这个要求。另外，后者的&lt;code>RLocker&lt;/code>方法可以返回这个值中的读锁，也同样可以作为&lt;code>sync.NewCond&lt;/code>函数的参数值，如此就可以生成与读写锁中的读锁对应的条件变量了。&lt;/p>
&lt;p>条件变量的&lt;code>Wait&lt;/code>方法需要在它基于的互斥锁保护下执行，否则就会引发不可恢复的 panic。此外，我们最好使用&lt;code>for&lt;/code>语句来检查共享资源的状态，并包裹对条件变量的&lt;code>Wait&lt;/code>方法的调用。&lt;/p>
&lt;p>不要用&lt;code>if&lt;/code>语句，因为它不能重复地执行&amp;quot;检查状态 - 等待通知 - 被唤醒&amp;quot;的这个流程。重复执行这个流程的原因是，一个&amp;quot;因为等待通知，而被阻塞&amp;quot;的 goroutine，可能会在共享资源的状态不满足其要求的情况下被唤醒。&lt;/p>
&lt;p>条件变量的&lt;code>Signal&lt;/code>方法只会唤醒一个因等待通知而被阻塞的 goroutine，而它的&lt;code>Broadcast&lt;/code>方法却可以唤醒所有为此而等待的 goroutine。后者比前者的适应场景要多得多。&lt;/p>
&lt;p>这两个方法并不需要受到互斥锁的保护，我们也最好不要在解锁互斥锁之前调用它们。还有，条件变量的通知具有即时性。当通知被发送的时候，如果没有任何 goroutine 需要被唤醒，那么该通知就会立即失效。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>&lt;code>sync.Cond&lt;/code>类型中的公开字段&lt;code>L&lt;/code>是做什么用的？我们可以在使用条件变量的过程中改变这个字段的值吗？&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 29丨原子操作（上）</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/29%E4%B8%A8%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E4%B8%8A/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/29%E4%B8%A8%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E4%B8%8A/</guid><description>
&lt;p>我们在前两篇文章中讨论了互斥锁、读写锁以及基于它们的条件变量，先来总结一下。&lt;/p>
&lt;p>互斥锁是一个很有用的同步工具，它可以保证每一时刻进入临界区的 goroutine 只有一个。读写锁对共享资源的写操作和读操作则区别看待，并消除了读操作之间的互斥。&lt;/p>
&lt;p>条件变量主要是用于协调想要访问共享资源的那些线程。当共享资源的状态发生变化时，它可以被用来通知被互斥锁阻塞的线程，它既可以基于互斥锁，也可以基于读写锁。当然了，读写锁也是一种互斥锁，前者是对后者的扩展。&lt;/p>
&lt;p>通过对互斥锁的合理使用，我们可以使一个 goroutine 在执行临界区中的代码时，不被其他的 goroutine 打扰。不过，虽然不会被打扰，但是它仍然可能会被中断（interruption）。&lt;/p>
&lt;h2 id="前导内容原子性执行与原子操作">前导内容：原子性执行与原子操作&lt;/h2>
&lt;p>我们已经知道，对于一个 Go 程序来说，Go 语言运行时系统中的调度器会恰当地安排其中所有的 goroutine 的运行。不过，在同一时刻，只可能有少数的 goroutine 真正地处于运行状态，并且这个数量只会与 M 的数量一致，而不会随着 G 的增多而增长。&lt;/p>
&lt;p>所以，为了公平起见，调度器总是会频繁地换上或换下这些 goroutine。&lt;strong>换上&lt;/strong>的意思是，让一个 goroutine 由非运行状态转为运行状态，并促使其中的代码在某个 CPU 核心上执行。&lt;/p>
&lt;p>&lt;strong>换下&lt;/strong>的意思正好相反，即：使一个 goroutine 中的代码中断执行，并让它由运行状态转为非运行状态。&lt;/p>
&lt;p>这个中断的时机有很多，任何两条语句执行的间隙，甚至在某条语句执行的过程中都是可以的。&lt;/p>
&lt;p>即使这些语句在临界区之内也是如此。所以，我们说，互斥锁虽然可以保证临界区中代码的串行执行，但却不能保证这些代码执行的原子性（atomicity）。&lt;/p>
&lt;p>在众多的同步工具中，真正能够保证原子性执行的只有&lt;a href="https://baike.baidu.com/item/%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/1880992?fr=aladdin">原子操作&lt;/a>（atomic operation）。原子操作在进行的过程中是不允许中断的。在底层，这会由 CPU 提供芯片级别的支持，所以绝对有效。即使在拥有多 CPU 核心，或者多 CPU 的计算机系统中，原子操作的保证也是不可撼动的。&lt;/p>
&lt;p>这使得原子操作可以完全地消除竞态条件，并能够绝对地保证并发安全性。并且，它的执行速度要比其他的同步工具快得多，通常会高出好几个数量级。不过，它的缺点也很明显。&lt;/p>
&lt;p>&lt;strong>更具体地说，正是因为原子操作不能被中断，所以它需要足够简单，并且要求快速。&lt;/strong>&lt;/p>
&lt;p>你可以想象一下，如果原子操作迟迟不能完成，而它又不会被中断，那么将会给计算机执行指令的效率带来多么大的影响。因此，操作系统层面只对针对二进制位或整数的原子操作提供了支持。&lt;/p>
&lt;p>Go 语言的原子操作当然是基于 CPU 和操作系统的，所以它也只针对少数数据类型的值提供了原子操作函数。这些函数都存在于标准库代码包&lt;code>sync/atomic&lt;/code>中。&lt;/p>
&lt;p>我一般会通过下面这道题初探一下应聘者对&lt;code>sync/atomic&lt;/code>包的熟悉程度。&lt;/p>
&lt;p>&lt;strong>我们今天的问题是：&lt;code>sync/atomic&lt;/code>包中提供了几种原子操作？可操作的数据类型又有哪些？&lt;/strong>&lt;/p>
&lt;p>&lt;strong>这里的典型回答是：&lt;/strong>&lt;/p>
&lt;p>&lt;code>sync/atomic&lt;/code>包中的函数可以做的原子操作有：加法（add）、比较并交换（compare and swap，简称 CAS）、加载（load）、存储（store）和交换（swap）。&lt;/p>
&lt;p>这些函数针对的数据类型并不多。但是，对这些类型中的每一个，&lt;code>sync/atomic&lt;/code>包都会有一套函数给予支持。这些数据类型有：&lt;code>int32&lt;/code>、&lt;code>int64&lt;/code>、&lt;code>uint32&lt;/code>、&lt;code>uint64&lt;/code>、&lt;code>uintptr&lt;/code>，以及&lt;code>unsafe&lt;/code>包中的&lt;code>Pointer&lt;/code>。不过，针对&lt;code>unsafe.Pointer&lt;/code>类型，该包并未提供进行原子加法操作的函数。&lt;/p>
&lt;p>此外，&lt;code>sync/atomic&lt;/code>包还提供了一个名为&lt;code>Value&lt;/code>的类型，它可以被用来存储任意类型的值。&lt;/p>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>这个问题很简单，因为答案是明摆在代码包文档里的。不过如果你连文档都没看过，那也可能回答不上来，至少是无法做出全面的回答。&lt;/p>
&lt;p>我一般会通过此问题再衍生出来几道题。下面我就来逐个说明一下。&lt;/p>
&lt;p>&lt;strong>第一个衍生问题&lt;/strong> ：我们都知道，传入这些原子操作函数的第一个参数值对应的都应该是那个被操作的值。比如，&lt;code>atomic.AddInt32&lt;/code>函数的第一个参数，对应的一定是那个要被增大的整数。可是，这个参数的类型为什么不是&lt;code>int32&lt;/code>而是&lt;code>*int32&lt;/code>呢？&lt;/p>
&lt;p>回答是：因为原子操作函数需要的是被操作值的指针，而不是这个值本身；被传入函数的参数值都会被复制，像这种基本类型的值一旦被传入函数，就已经与函数外的那个值毫无关系了。&lt;/p>
&lt;p>所以，传入值本身没有任何意义。&lt;code>unsafe.Pointer&lt;/code>类型虽然是指针类型，但是那些原子操作函数要操作的是这个指针值，而不是它指向的那个值，所以需要的仍然是指向这个指针值的指针。&lt;/p>
&lt;p>只要原子操作函数拿到了被操作值的指针，就可以定位到存储该值的内存地址。只有这样，它们才能够通过底层的指令，准确地操作这个内存地址上的数据。&lt;/p>
&lt;p>&lt;strong>第二个衍生问题：&lt;/strong> 用于原子加法操作的函数可以做原子减法吗？比如，&lt;code>atomic.AddInt32&lt;/code>函数可以用于减小那个被操作的整数值吗？&lt;/p>
&lt;p>回答是：当然是可以的。&lt;code>atomic.AddInt32&lt;/code>函数的第二个参数代表差量，它的类型是&lt;code>int32&lt;/code>，是有符号的。如果我们想做原子减法，那么把这个差量设置为负整数就可以了。&lt;/p>
&lt;p>对于&lt;code>atomic.AddInt64&lt;/code>函数来说也是类似的。不过，要想用&lt;code>atomic.AddUint32&lt;/code>和&lt;code>atomic.AddUint64&lt;/code>函数做原子减法，就不能这么直接了，因为它们的第二个参数的类型分别是&lt;code>uint32&lt;/code>和&lt;code>uint64&lt;/code>，都是无符号的，不过，这也是可以做到的，就是稍微麻烦一些。&lt;/p>
&lt;p>例如，如果想对&lt;code>uint32&lt;/code>类型的被操作值&lt;code>18&lt;/code>做原子减法，比如说差量是&lt;code>-3&lt;/code>，那么我们可以先把这个差量转换为有符号的&lt;code>int32&lt;/code>类型的值，然后再把该值的类型转换为&lt;code>uint32&lt;/code>，用表达式来描述就是&lt;code>uint32(int32(-3))&lt;/code>。&lt;/p>
&lt;p>不过要注意，直接这样写会使 Go 语言的编译器报错，它会告诉你：&amp;ldquo;常量&lt;code>-3&lt;/code>不在&lt;code>uint32&lt;/code>类型可表示的范围内&amp;rdquo;，换句话说，这样做会让表达式的结果值溢出。&lt;/p>
&lt;p>不过，如果我们先把&lt;code>int32(-3)&lt;/code>的结果值赋给变量&lt;code>delta&lt;/code>，再把&lt;code>delta&lt;/code>的值转换为&lt;code>uint32&lt;/code>类型的值，就可以绕过编译器的检查并得到正确的结果了。&lt;/p>
&lt;p>最后，我们把这个结果作为&lt;code>atomic.AddUint32&lt;/code>函数的第二个参数值，就可以达到对&lt;code>uint32&lt;/code>类型的值做原子减法的目的了。&lt;/p>
&lt;p>还有一种更加直接的方式。我们可以依据下面这个表达式来给定&lt;code>atomic.AddUint32&lt;/code>函数的第二个参数值：&lt;/p>
&lt;pre>&lt;code>^uint32(-N-1))
&lt;/code>&lt;/pre>
&lt;p>其中的&lt;code>N&lt;/code>代表由负整数表示的差量。也就是说，我们先要把差量的绝对值减去&lt;code>1&lt;/code>，然后再把得到的这个无类型的整数常量，转换为&lt;code>uint32&lt;/code>类型的值，最后，在这个值之上做按位异或操作，就可以获得最终的参数值了。&lt;/p>
&lt;p>这么做的原理也并不复杂。简单来说，此表达式的结果值的补码，与使用前一种方法得到的值的补码相同，所以这两种方式是等价的。我们都知道，整数在计算机中是以补码的形式存在的，所以在这里，结果值的补码相同就意味着表达式的等价。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>今天，我们一起学习了&lt;code>sync/atomic&lt;/code>代码包中提供的原子操作函数和原子值类型。原子操作函数使用起来都非常简单，但也有一些细节需要我们注意。我在主问题的衍生问题中对它们进行了逐一说明。&lt;/p>
&lt;p>在下一篇文章中，我们会继续分享原子操作的衍生内容。如果你对原子操作有什么样的问题，都可以给我留言，我们一起讨论，感谢你的收听，我们下期再见。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 30丨原子操作（下）</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/30%E4%B8%A8%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E4%B8%8B/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/30%E4%B8%A8%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E4%B8%8B/</guid><description>
&lt;p>你好，我是郝林，今天我们继续分享原子操作的内容。&lt;/p>
&lt;p>我们接着上一篇文章的内容继续聊，上一篇我们提到了，&lt;code>sync/atomic&lt;/code>包中的函数可以做的原子操作有：加法（add）、比较并交换（compare and swap，简称 CAS）、加载（load）、存储（store）和交换（swap）。并且以此衍生出了两个问题。&lt;/p>
&lt;p>今天我们继续来看&lt;strong>第三个衍生问题： 比较并交换操作与交换操作相比有什么不同？优势在哪里？&lt;/strong>&lt;/p>
&lt;p>回答是：比较并交换操作即 CAS 操作，是有条件的交换操作，只有在条件满足的情况下才会进行值的交换。&lt;/p>
&lt;p>所谓的交换指的是，把新值赋给变量，并返回变量的旧值。&lt;/p>
&lt;p>在进行 CAS 操作的时候，函数会先判断被操作变量的当前值，是否与我们预期的旧值相等。如果相等，它就把新值赋给该变量，并返回&lt;code>true&lt;/code>以表明交换操作已进行；否则就忽略交换操作，并返回&lt;code>false&lt;/code>。&lt;/p>
&lt;p>可以看到，CAS 操作并不是单一的操作，而是一种操作组合。这与其他的原子操作都不同。正因为如此，它的用途要更广泛一些。例如，我们将它与&lt;code>for&lt;/code>语句联用就可以实现一种简易的自旋锁（spinlock）。&lt;/p>
&lt;pre>&lt;code>for {
if atomic.CompareAndSwapInt32(&amp;amp;num2, 10, 0) {
fmt.Println(&amp;quot;The second number has gone to zero.&amp;quot;)
break
}
time.Sleep(time.Millisecond * 500)
}
&lt;/code>&lt;/pre>
&lt;p>在&lt;code>for&lt;/code>语句中的 CAS 操作可以不停地检查某个需要满足的条件，一旦条件满足就退出&lt;code>for&lt;/code>循环。这就相当于，只要条件未被满足，当前的流程就会被一直&amp;quot;阻塞&amp;quot;在这里。&lt;/p>
&lt;p>这在效果上与互斥锁有些类似。不过，它们的适用场景是不同的。我们在使用互斥锁的时候，总是假设共享资源的状态会被其他的 goroutine 频繁地改变。&lt;/p>
&lt;p>而&lt;code>for&lt;/code>语句加 CAS 操作的假设往往是：共享资源状态的改变并不频繁，或者，它的状态总会变成期望的那样。这是一种更加乐观，或者说更加宽松的做法。&lt;/p>
&lt;p>&lt;strong>第四个衍生问题：假设我已经保证了对一个变量的写操作都是原子操作，比如：加或减、存储、交换等等，那我对它进行读操作的时候，还有必要使用原子操作吗？&lt;/strong>&lt;/p>
&lt;p>回答是：很有必要。其中的道理你可以对照一下读写锁。为什么在读写锁保护下的写操作和读操作之间是互斥的？这是为了防止读操作读到没有被修改完的值，对吗？&lt;/p>
&lt;p>如果写操作还没有进行完，读操作就来读了，那么就只能读到仅修改了一部分的值。这显然破坏了值的完整性，读出来的值也是完全错误的。&lt;/p>
&lt;p>所以，一旦你决定了要对一个共享资源进行保护，那就要做到完全的保护。不完全的保护基本上与不保护没有什么区别。&lt;/p>
&lt;p>好了，上面的主问题以及相关的衍生问题涉及了原子操作函数的用法、原理、对比和一些最佳实践，希望你已经理解了。&lt;/p>
&lt;p>由于这里的原子操作函数只支持非常有限的数据类型，所以在很多应用场景下，互斥锁往往是更加适合的。&lt;/p>
&lt;p>不过，一旦我们确定了在某个场景下可以使用原子操作函数，比如：只涉及并发地读写单一的整数类型值，或者多个互不相关的整数类型值，那就不要再考虑互斥锁了。&lt;/p>
&lt;p>这主要是因为原子操作函数的执行速度要比互斥锁快得多。而且，它们使用起来更加简单，不会涉及临界区的选择，以及死锁等问题。当然了，在使用 CAS 操作的时候，我们还是要多加注意的，因为它可以被用来模仿锁，并有可能&amp;quot;阻塞&amp;quot;流程。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;p>问题：怎样用好&lt;code>sync/atomic.Value&lt;/code>？&lt;/p>
&lt;p>为了扩大原子操作的适用范围，Go 语言在 1.4 版本发布的时候向&lt;code>sync/atomic&lt;/code>包中添加了一个新的类型&lt;code>Value&lt;/code>。此类型的值相当于一个容器，可以被用来&amp;quot;原子地&amp;quot;存储和加载任意的值。&lt;/p>
&lt;p>&lt;code>atomic.Value&lt;/code>类型是开箱即用的，我们声明一个该类型的变量（以下简称原子变量）之后就可以直接使用了。这个类型使用起来很简单，它只有两个指针方法：&lt;code>Store&lt;/code>和&lt;code>Load&lt;/code>。不过，虽然简单，但还是有一些值得注意的地方的。&lt;/p>
&lt;p>首先一点，一旦&lt;code>atomic.Value&lt;/code>类型的值（以下简称原子值）被真正使用，它就不应该再被复制了。什么叫做&amp;quot;真正使用&amp;quot;呢？&lt;/p>
&lt;p>我们只要用它来存储值了，就相当于开始真正使用了。&lt;code>atomic.Value&lt;/code>类型属于结构体类型，而结构体类型属于值类型。&lt;/p>
&lt;p>所以，复制该类型的值会产生一个完全分离的新值。这个新值相当于被复制的那个值的一个快照。之后，不论后者存储的值怎样改变，都不会影响到前者，反之亦然。&lt;/p>
&lt;p>另外，关于用原子值来存储值，有两条强制性的使用规则。&lt;strong>第一条规则，不能用原子值存储&lt;code>nil&lt;/code>。&lt;/strong>&lt;/p>
&lt;p>也就是说，我们不能把&lt;code>nil&lt;/code>作为参数值传入原子值的&lt;code>Store&lt;/code>方法，否则就会引发一个 panic。&lt;/p>
&lt;p>这里要注意，如果有一个接口类型的变量，它的动态值是&lt;code>nil&lt;/code>，但动态类型却不是&lt;code>nil&lt;/code>，那么它的值就不等于&lt;code>nil&lt;/code>。我在前面讲接口的时候和你说明过这个问题。正因为如此，这样一个变量的值是可以被存入原子值的。&lt;/p>
&lt;p>&lt;strong>第二条规则，我们向原子值存储的第一个值，决定了它今后能且只能存储哪一个类型的值。&lt;/strong>&lt;/p>
&lt;p>例如，我第一次向一个原子值存储了一个&lt;code>string&lt;/code>类型的值，那我在后面就只能用该原子值来存储字符串了。如果我又想用它存储结构体，那么在调用它的&lt;code>Store&lt;/code>方法的时候就会引发一个 panic。这个 panic 会告诉我，这次存储的值的类型与之前的不一致。&lt;/p>
&lt;p>你可能会想：我先存储一个接口类型的值，然后再存储这个接口的某个实现类型的值，这样是不是可以呢？&lt;/p>
&lt;p>很可惜，这样是不可以的，同样会引发一个 panic。因为原子值内部是依据被存储值的实际类型来做判断的。所以，即使是实现了同一个接口的不同类型，它们的值也不能被先后存储到同一个原子值中。&lt;/p>
&lt;p>遗憾的是，我们无法通过某个方法获知一个原子值是否已经被真正使用，并且，也没有办法通过常规的途径得到一个原子值可以存储值的实际类型。这使得我们误用原子值的可能性大大增加，尤其是在多个地方使用同一个原子值的时候。&lt;/p>
&lt;p>&lt;strong>下面，我给你几条具体的使用建议。&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>不要把内部使用的原子值暴露给外界。比如，声明一个全局的原子变量并不是一个正确的做法。这个变量的访问权限最起码也应该是包级私有的。&lt;/li>
&lt;li>如果不得不让包外，或模块外的代码使用你的原子值，那么可以声明一个包级私有的原子变量，然后再通过一个或多个公开的函数，让外界间接地使用到它。注意，这种情况下不要把原子值传递到外界，不论是传递原子值本身还是它的指针值。&lt;/li>
&lt;li>如果通过某个函数可以向内部的原子值存储值的话，那么就应该在这个函数中先判断被存储值类型的合法性。若不合法，则应该直接返回对应的错误值，从而避免 panic 的发生。&lt;/li>
&lt;li>如果可能的话，我们可以把原子值封装到一个数据类型中，比如一个结构体类型。这样，我们既可以通过该类型的方法更加安全地存储值，又可以在该类型中包含可存储值的合法类型信息。&lt;/li>
&lt;/ol>
&lt;p>除了上述使用建议之外，我还要再特别强调一点：尽量不要向原子值中存储引用类型的值。因为这很容易造成安全漏洞。请看下面的代码：&lt;/p>
&lt;pre>&lt;code>var box6 atomic.Value
v6 := []int{1, 2, 3}
box6.Store(v6)
v6[1] = 4 // 注意，此处的操作不是并发安全的！
&lt;/code>&lt;/pre>
&lt;p>我把一个&lt;code>[]int&lt;/code>类型的切片值&lt;code>v6&lt;/code>, 存入了原子值&lt;code>box6&lt;/code>。注意，切片类型属于引用类型。所以，我在外面改动这个切片值，就等于修改了&lt;code>box6&lt;/code>中存储的那个值。这相当于绕过了原子值而进行了非并发安全的操作。那么，应该怎样修补这个漏洞呢？可以这样做：&lt;/p>
&lt;pre>&lt;code>store := func(v []int) {
replica := make([]int, len(v))
copy(replica, v)
box6.Store(replica)
}
store(v6)
v6[2] = 5 // 此处的操作是安全的。
&lt;/code>&lt;/pre>
&lt;p>我先为切片值&lt;code>v6&lt;/code>创建了一个完全的副本。这个副本涉及的数据已经与原值毫不相干了。然后，我再把这个副本存入&lt;code>box6&lt;/code>。如此一来，无论我再对&lt;code>v6&lt;/code>的值做怎样的修改，都不会破坏&lt;code>box6&lt;/code>提供的安全保护。&lt;/p>
&lt;p>以上，就是我要告诉你的关于&lt;code>atomic.Value&lt;/code>的注意事项和使用建议。你可以在 demo64.go 文件中看到相应的示例。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>我们把这两篇文章一起总结一下。相对于原子操作函数，原子值类型的优势很明显，但它的使用规则也更多一些。首先，在首次真正使用后，原子值就不应该再被复制了。&lt;/p>
&lt;p>其次，原子值的&lt;code>Store&lt;/code>方法对其参数值（也就是被存储值）有两个强制的约束。一个约束是，参数值不能为&lt;code>nil&lt;/code>。另一个约束是，参数值的类型不能与首个被存储值的类型不同。也就是说，一旦一个原子值存储了某个类型的值，那它以后就只能存储这个类型的值了。&lt;/p>
&lt;p>基于上面这几个注意事项，我提出了几条使用建议，包括：不要对外暴露原子变量、不要传递原子值及其指针值、尽量不要在原子值中存储引用类型的值，等等。与之相关的一些解决方案我也一并提出了。希望你能够受用。&lt;/p>
&lt;p>原子操作明显比互斥锁要更加轻便，但是限制也同样明显。所以，我们在进行二选一的时候通常不会太困难。但是原子值与互斥锁之间的选择有时候就需要仔细的考量了。不过，如果你能牢记我今天讲的这些内容的话，应该会有很大的助力。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>今天的思考题只有一个，那就是：如果要对原子值和互斥锁进行二选一，你认为最重要的三个决策条件应该是什么？&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 32丨context</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/32%E4%B8%A8context/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/32%E4%B8%A8context/</guid><description>
&lt;p>我们在上篇文章中讲到了&lt;code>sync.WaitGroup&lt;/code>类型：一个可以帮我们实现一对多 goroutine 协作流程的同步工具。&lt;/p>
&lt;p>&lt;strong>在使用&lt;code>WaitGroup&lt;/code>值的时候，我们最好用&amp;quot;先统一&lt;code>Add&lt;/code>，再并发&lt;code>Done&lt;/code>，最后&lt;code>Wait&lt;/code>&amp;ldquo;的标准模式来构建协作流程。&lt;/strong>&lt;/p>
&lt;p>如果在调用该值的&lt;code>Wait&lt;/code>方法的同时，为了增大其计数器的值，而并发地调用该值的&lt;code>Add&lt;/code>方法，那么就很可能会引发 panic。&lt;/p>
&lt;p>这就带来了一个问题，如果我们不能在一开始就确定执行子任务的 goroutine 的数量，那么使用&lt;code>WaitGroup&lt;/code>值来协调它们和分发子任务的 goroutine，就是有一定风险的。一个解决方案是：分批地启用执行子任务的 goroutine。&lt;/p>
&lt;h2 id="前导内容waitgroup-值补充知识">前导内容：WaitGroup 值补充知识&lt;/h2>
&lt;p>我们都知道，&lt;code>WaitGroup&lt;/code>值是可以被复用的，但需要保证其计数周期的完整性。尤其是涉及对其&lt;code>Wait&lt;/code>方法调用的时候，它的下一个计数周期必须要等到，与当前计数周期对应的那个&lt;code>Wait&lt;/code>方法调用完成之后，才能够开始。&lt;/p>
&lt;p>我在前面提到的可能会引发 panic 的情况，就是由于没有遵循这条规则而导致的。&lt;/p>
&lt;p>只要我们在严格遵循上述规则的前提下，分批地启用执行子任务的 goroutine，就肯定不会有问题。具体的实现方式有不少，其中最简单的方式就是使用&lt;code>for&lt;/code>循环来作为辅助。这里的代码如下：&lt;/p>
&lt;pre>&lt;code>func coordinateWithWaitGroup() {
total := 12
stride := 3
var num int32
fmt.Printf(&amp;quot;The number: %d [with sync.WaitGroup]\n&amp;quot;, num)
var wg sync.WaitGroup
for i := 1; i &amp;lt;= total; i = i + stride {
wg.Add(stride)
for j := 0; j &amp;lt; stride; j++ {
go addNum(&amp;amp;num, i+j, wg.Done)
}
wg.Wait()
}
fmt.Println(&amp;quot;End.&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;p>这里展示的&lt;code>coordinateWithWaitGroup&lt;/code>函数，就是上一篇文章中同名函数的改造版本。而其中调用的&lt;code>addNum&lt;/code>函数，则是上一篇文章中同名函数的简化版本。这两个函数都已被放置在了 demo67.go 文件中。&lt;/p>
&lt;p>我们可以看到，经过改造后的&lt;code>coordinateWithWaitGroup&lt;/code>函数，循环地使用了由变量&lt;code>wg&lt;/code>代表的&lt;code>WaitGroup&lt;/code>值。它运用的依然是&amp;quot;先统一&lt;code>Add&lt;/code>，再并发&lt;code>Done&lt;/code>，最后&lt;code>Wait&lt;/code>&amp;ldquo;的这种模式，只不过它利用&lt;code>for&lt;/code>语句，对此进行了复用。&lt;/p>
&lt;p>好了，至此你应该已经对&lt;code>WaitGroup&lt;/code>值的运用有所了解了。不过，我现在想让你使用另一种工具来实现上面的协作流程。&lt;/p>
&lt;p>&lt;strong>我们今天的问题就是：怎样使用&lt;code>context&lt;/code>包中的程序实体，实现一对多的 goroutine 协作流程？&lt;/strong>&lt;/p>
&lt;p>更具体地说，我需要你编写一个名为&lt;code>coordinateWithContext&lt;/code>的函数。这个函数应该具有上面&lt;code>coordinateWithWaitGroup&lt;/code>函数相同的功能。&lt;/p>
&lt;p>显然，你不能再使用&lt;code>sync.WaitGroup&lt;/code>了，而要用&lt;code>context&lt;/code>包中的函数和&lt;code>Context&lt;/code>类型作为实现工具。这里注意一点，是否分批启用执行子任务的 goroutine 其实并不重要。&lt;/p>
&lt;p>我在这里给你一个参考答案。&lt;/p>
&lt;pre>&lt;code>func coordinateWithContext() {
total := 12
var num int32
fmt.Printf(&amp;quot;The number: %d [with context.Context]\n&amp;quot;, num)
cxt, cancelFunc := context.WithCancel(context.Background())
for i := 1; i &amp;lt;= total; i++ {
go addNum(&amp;amp;num, i, func() {
if atomic.LoadInt32(&amp;amp;num) == int32(total) {
cancelFunc()
}
})
}
&amp;lt;-cxt.Done()
fmt.Println(&amp;quot;End.&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;p>在这个函数体中，我先后调用了&lt;code>context.Background&lt;/code>函数和&lt;code>context.WithCancel&lt;/code>函数，并得到了一个可撤销的&lt;code>context.Context&lt;/code>类型的值（由变量&lt;code>cxt&lt;/code>代表），以及一个&lt;code>context.CancelFunc&lt;/code>类型的撤销函数（由变量&lt;code>cancelFunc&lt;/code>代表）。&lt;/p>
&lt;p>在后面那条唯一的&lt;code>for&lt;/code>语句中，我在每次迭代中都通过一条&lt;code>go&lt;/code>语句，异步地调用&lt;code>addNum&lt;/code>函数，调用的总次数只依据了&lt;code>total&lt;/code>变量的值。&lt;/p>
&lt;p>请注意我给予&lt;code>addNum&lt;/code>函数的最后一个参数值。它是一个匿名函数，其中只包含了一条&lt;code>if&lt;/code>语句。这条&lt;code>if&lt;/code>语句会&amp;quot;原子地&amp;quot;加载&lt;code>num&lt;/code>变量的值，并判断它是否等于&lt;code>total&lt;/code>变量的值。&lt;/p>
&lt;p>如果两个值相等，那么就调用&lt;code>cancelFunc&lt;/code>函数。其含义是，如果所有的&lt;code>addNum&lt;/code>函数都执行完毕，那么就立即通知分发子任务的 goroutine。&lt;/p>
&lt;p>这里分发子任务的 goroutine，即为执行&lt;code>coordinateWithContext&lt;/code>函数的 goroutine。它在执行完&lt;code>for&lt;/code>语句后，会立即调用&lt;code>cxt&lt;/code>变量的&lt;code>Done&lt;/code>函数，并试图针对该函数返回的通道，进行接收操作。&lt;/p>
&lt;p>由于一旦&lt;code>cancelFunc&lt;/code>函数被调用，针对该通道的接收操作就会马上结束，所以，这样做就可以实现&amp;quot;等待所有的&lt;code>addNum&lt;/code>函数都执行完毕&amp;quot;的功能。&lt;/p>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>&lt;code>context.Context&lt;/code>类型（以下简称&lt;code>Context&lt;/code>类型）是在 Go 1.7 发布时才被加入到标准库的。而后，标准库中的很多其他代码包都为了支持它而进行了扩展，包括：&lt;code>os/exec&lt;/code>包、&lt;code>net&lt;/code>包、&lt;code>database/sql&lt;/code>包，以及&lt;code>runtime/pprof&lt;/code>包和&lt;code>runtime/trace&lt;/code>包，等等。&lt;/p>
&lt;p>&lt;code>Context&lt;/code>类型之所以受到了标准库中众多代码包的积极支持，主要是因为它是一种非常通用的同步工具。它的值不但可以被任意地扩散，而且还可以被用来传递额外的信息和信号。&lt;/p>
&lt;p>更具体地说，&lt;code>Context&lt;/code>类型可以提供一类代表上下文的值。此类值是并发安全的，也就是说它可以被传播给多个 goroutine。&lt;/p>
&lt;p>由于&lt;code>Context&lt;/code>类型实际上是一个接口类型，而&lt;code>context&lt;/code>包中实现该接口的所有私有类型，都是基于某个数据类型的指针类型，所以，如此传播并不会影响该类型值的功能和安全。&lt;/p>
&lt;p>&lt;code>Context&lt;/code>类型的值（以下简称&lt;code>Context&lt;/code>值）是可以繁衍的，这意味着我们可以通过一个&lt;code>Context&lt;/code>值产生出任意个子值。这些子值可以携带其父值的属性和数据，也可以响应我们通过其父值传达的信号。&lt;/p>
&lt;p>正因为如此，所有的&lt;code>Context&lt;/code>值共同构成了一颗代表了上下文全貌的树形结构。这棵树的树根（或者称上下文根节点）是一个已经在&lt;code>context&lt;/code>包中预定义好的&lt;code>Context&lt;/code>值，它是全局唯一的。通过调用&lt;code>context.Background&lt;/code>函数，我们就可以获取到它（我在&lt;code>coordinateWithContext&lt;/code>函数中就是这么做的）。&lt;/p>
&lt;p>这里注意一下，这个上下文根节点仅仅是一个最基本的支点，它不提供任何额外的功能。也就是说，它既不可以被撤销（cancel），也不能携带任何数据。&lt;/p>
&lt;p>除此之外，&lt;code>context&lt;/code>包中还包含了四个用于繁衍&lt;code>Context&lt;/code>值的函数，即：&lt;code>WithCancel&lt;/code>、&lt;code>WithDeadline&lt;/code>、&lt;code>WithTimeout&lt;/code>和&lt;code>WithValue&lt;/code>。&lt;/p>
&lt;p>这些函数的第一个参数的类型都是&lt;code>context.Context&lt;/code>，而名称都为&lt;code>parent&lt;/code>。顾名思义，这个位置上的参数对应的都是它们将会产生的&lt;code>Context&lt;/code>值的父值。&lt;/p>
&lt;p>&lt;code>WithCancel&lt;/code>函数用于产生一个可撤销的&lt;code>parent&lt;/code>的子值。在&lt;code>coordinateWithContext&lt;/code>函数中，我通过调用该函数，获得了一个衍生自上下文根节点的&lt;code>Context&lt;/code>值，和一个用于触发撤销信号的函数。&lt;/p>
&lt;p>而&lt;code>WithDeadline&lt;/code>函数和&lt;code>WithTimeout&lt;/code>函数则都可以被用来产生一个会定时撤销的&lt;code>parent&lt;/code>的子值。至于&lt;code>WithValue&lt;/code>函数，我们可以通过调用它，产生一个会携带额外数据的&lt;code>parent&lt;/code>的子值。&lt;/p>
&lt;p>到这里，我们已经对&lt;code>context&lt;/code>包中的函数和&lt;code>Context&lt;/code>类型有了一个基本的认识了。不过这还不够，我们再来扩展一下。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;h3 id="问题-1可撤销的在context包中代表着什么撤销一个context值又意味着什么">问题 1：&amp;ldquo;可撤销的&amp;quot;在&lt;code>context&lt;/code>包中代表着什么？&amp;ldquo;撤销&amp;quot;一个&lt;code>Context&lt;/code>值又意味着什么？&lt;/h3>
&lt;p>我相信很多初识&lt;code>context&lt;/code>包的 Go 程序开发者，都会有这样的疑问。确实，&amp;ldquo;可撤销的&amp;rdquo;（cancelable）这个词在这里是比较抽象的，很容易让人迷惑。我这里再来解释一下。&lt;/p>
&lt;p>这需要从&lt;code>Context&lt;/code>类型的声明讲起。这个接口中有两个方法与&amp;quot;撤销&amp;quot;息息相关。&lt;code>Done&lt;/code>方法会返回一个元素类型为&lt;code>struct{}&lt;/code>的接收通道。不过，这个接收通道的用途并不是传递元素值，而是让调用方去感知&amp;quot;撤销&amp;quot;当前&lt;code>Context&lt;/code>值的那个信号。&lt;/p>
&lt;p>一旦当前的&lt;code>Context&lt;/code>值被撤销，这里的接收通道就会被立即关闭。我们都知道，对于一个未包含任何元素值的通道来说，它的关闭会使任何针对它的接收操作立即结束。&lt;/p>
&lt;p>正因为如此，在&lt;code>coordinateWithContext&lt;/code>函数中，基于调用表达式&lt;code>cxt.Done()&lt;/code>的接收操作，才能够起到感知撤销信号的作用。&lt;/p>
&lt;p>除了让&lt;code>Context&lt;/code>值的使用方感知到撤销信号，让它们得到&amp;quot;撤销&amp;quot;的具体原因，有时也是很有必要的。后者即是&lt;code>Context&lt;/code>类型的&lt;code>Err&lt;/code>方法的作用。该方法的结果是&lt;code>error&lt;/code>类型的，并且其值只可能等于&lt;code>context.Canceled&lt;/code>变量的值，或者&lt;code>context.DeadlineExceeded&lt;/code>变量的值。&lt;/p>
&lt;p>前者用于表示手动撤销，而后者则代表：由于我们给定的过期时间已到，而导致的撤销。&lt;/p>
&lt;p>你可能已经感觉到了，对于&lt;code>Context&lt;/code>值来说，&amp;ldquo;撤销&amp;quot;这个词如果当名词讲，指的其实就是被用来表达&amp;quot;撤销&amp;quot;状态的信号；如果当动词讲，指的就是对撤销信号的传达；而&amp;quot;可撤销的&amp;quot;指的则是具有传达这种撤销信号的能力。&lt;/p>
&lt;p>我在前面讲过，当我们通过调用&lt;code>context.WithCancel&lt;/code>函数产生一个可撤销的&lt;code>Context&lt;/code>值时，还会获得一个用于触发撤销信号的函数。&lt;/p>
&lt;p>通过调用这个函数，我们就可以触发针对这个&lt;code>Context&lt;/code>值的撤销信号。一旦触发，撤销信号就会立即被传达给这个&lt;code>Context&lt;/code>值，并由它的&lt;code>Done&lt;/code>方法的结果值（一个接收通道）表达出来。&lt;/p>
&lt;p>撤销函数只负责触发信号，而对应的可撤销的&lt;code>Context&lt;/code>值也只负责传达信号，它们都不会去管后边具体的&amp;quot;撤销&amp;quot;操作。实际上，我们的代码可以在感知到撤销信号之后，进行任意的操作，&lt;code>Context&lt;/code>值对此并没有任何的约束。&lt;/p>
&lt;p>最后，若再深究的话，这里的&amp;quot;撤销&amp;quot;最原始的含义其实就是，终止程序针对某种请求（比如 HTTP 请求）的响应，或者取消对某种指令（比如 SQL 指令）的处理。这也是 Go 语言团队在创建&lt;code>context&lt;/code>代码包，和&lt;code>Context&lt;/code>类型时的初衷。&lt;/p>
&lt;p>如果我们去查看&lt;code>net&lt;/code>包和&lt;code>database/sql&lt;/code>包的 API 和源码的话，就可以了解它们在这方面的典型应用。&lt;/p>
&lt;h3 id="问题-2撤销信号是如何在上下文树中传播的">问题 2：撤销信号是如何在上下文树中传播的？&lt;/h3>
&lt;p>我在前面讲了，&lt;code>context&lt;/code>包中包含了四个用于繁衍&lt;code>Context&lt;/code>值的函数。其中的&lt;code>WithCancel&lt;/code>、&lt;code>WithDeadline&lt;/code>和&lt;code>WithTimeout&lt;/code>都是被用来基于给定的&lt;code>Context&lt;/code>值产生可撤销的子值的。&lt;/p>
&lt;p>&lt;code>context&lt;/code>包的&lt;code>WithCancel&lt;/code>函数在被调用后会产生两个结果值。第一个结果值就是那个可撤销的&lt;code>Context&lt;/code>值，而第二个结果值则是用于触发撤销信号的函数。&lt;/p>
&lt;p>在撤销函数被调用之后，对应的&lt;code>Context&lt;/code>值会先关闭它内部的接收通道，也就是它的&lt;code>Done&lt;/code>方法会返回的那个通道。&lt;/p>
&lt;p>然后，它会向它的所有子值（或者说子节点）传达撤销信号。这些子值会如法炮制，把撤销信号继续传播下去。最后，这个&lt;code>Context&lt;/code>值会断开它与其父值之间的关联。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/a8/9e/a801f8f2b5e89017ec2857bc1815fc9e.png" alt="">&lt;/p>
&lt;p>（在上下文树中传播撤销信号）&lt;/p>
&lt;p>我们通过调用&lt;code>context&lt;/code>包的&lt;code>WithDeadline&lt;/code>函数或者&lt;code>WithTimeout&lt;/code>函数生成的&lt;code>Context&lt;/code>值也是可撤销的。它们不但可以被手动撤销，还会依据在生成时被给定的过期时间，自动地进行定时撤销。这里定时撤销的功能是借助它们内部的计时器来实现的。&lt;/p>
&lt;p>当过期时间到达时，这两种&lt;code>Context&lt;/code>值的行为与&lt;code>Context&lt;/code>值被手动撤销时的行为是几乎一致的，只不过前者会在最后停止并释放掉其内部的计时器。&lt;/p>
&lt;p>最后要注意，通过调用&lt;code>context.WithValue&lt;/code>函数得到的&lt;code>Context&lt;/code>值是不可撤销的。撤销信号在被传播时，若遇到它们则会直接跨过，并试图将信号直接传给它们的子值。&lt;/p>
&lt;h3 id="问题-3怎样通过context值携带数据怎样从中获取数据">问题 3：怎样通过&lt;code>Context&lt;/code>值携带数据？怎样从中获取数据？&lt;/h3>
&lt;p>既然谈到了&lt;code>context&lt;/code>包的&lt;code>WithValue&lt;/code>函数，我们就来说说&lt;code>Context&lt;/code>值携带数据的方式。&lt;/p>
&lt;p>&lt;code>WithValue&lt;/code>函数在产生新的&lt;code>Context&lt;/code>值（以下简称含数据的&lt;code>Context&lt;/code>值）的时候需要三个参数，即：父值、键和值。与&amp;quot;字典对于键的约束&amp;quot;类似，这里键的类型必须是可判等的。&lt;/p>
&lt;p>原因很简单，当我们从中获取数据的时候，它需要根据给定的键来查找对应的值。不过，这种&lt;code>Context&lt;/code>值并不是用字典来存储键和值的，后两者只是被简单地存储在前者的相应字段中而已。&lt;/p>
&lt;p>&lt;code>Context&lt;/code>类型的&lt;code>Value&lt;/code>方法就是被用来获取数据的。在我们调用含数据的&lt;code>Context&lt;/code>值的&lt;code>Value&lt;/code>方法时，它会先判断给定的键，是否与当前值中存储的键相等，如果相等就把该值中存储的值直接返回，否则就到其父值中继续查找。&lt;/p>
&lt;p>如果其父值中仍然未存储相等的键，那么该方法就会沿着上下文根节点的方向一路查找下去。&lt;/p>
&lt;p>注意，除了含数据的&lt;code>Context&lt;/code>值以外，其他几种&lt;code>Context&lt;/code>值都是无法携带数据的。因此，&lt;code>Context&lt;/code>值的&lt;code>Value&lt;/code>方法在沿路查找的时候，会直接跨过那几种值。&lt;/p>
&lt;p>如果我们调用的&lt;code>Value&lt;/code>方法的所属值本身就是不含数据的，那么实际调用的就将会是其父辈或祖辈的&lt;code>Value&lt;/code>方法。这是由于这几种&lt;code>Context&lt;/code>值的实际类型，都属于结构体类型，并且它们都是通过&amp;quot;将其父值嵌入到自身&amp;rdquo;，来表达父子关系的。&lt;/p>
&lt;p>最后，提醒一下，&lt;code>Context&lt;/code>接口并没有提供改变数据的方法。因此，在通常情况下，我们只能通过在上下文树中添加含数据的&lt;code>Context&lt;/code>值来存储新的数据，或者通过撤销此种值的父值丢弃掉相应的数据。如果你存储在这里的数据可以从外部改变，那么必须自行保证安全。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>我们今天主要讨论的是&lt;code>context&lt;/code>包中的函数和&lt;code>Context&lt;/code>类型。该包中的函数都是用于产生新的&lt;code>Context&lt;/code>类型值的。&lt;code>Context&lt;/code>类型是一个可以帮助我们实现多 goroutine 协作流程的同步工具。不但如此，我们还可以通过此类型的值传达撤销信号或传递数据。&lt;/p>
&lt;p>&lt;code>Context&lt;/code>类型的实际值大体上分为三种，即：根&lt;code>Context&lt;/code>值、可撤销的&lt;code>Context&lt;/code>值和含数据的&lt;code>Context&lt;/code>值。所有的&lt;code>Context&lt;/code>值共同构成了一颗上下文树。这棵树的作用域是全局的，而根&lt;code>Context&lt;/code>值就是这棵树的根。它是全局唯一的，并且不提供任何额外的功能。&lt;/p>
&lt;p>可撤销的&lt;code>Context&lt;/code>值又分为：只可手动撤销的&lt;code>Context&lt;/code>值，和可以定时撤销的&lt;code>Context&lt;/code>值。&lt;/p>
&lt;p>我们可以通过生成它们时得到的撤销函数来对其进行手动的撤销。对于后者，定时撤销的时间必须在生成时就完全确定，并且不能更改。不过，我们可以在过期时间达到之前，对其进行手动的撤销。&lt;/p>
&lt;p>一旦撤销函数被调用，撤销信号就会立即被传达给对应的&lt;code>Context&lt;/code>值，并由该值的&lt;code>Done&lt;/code>方法返回的接收通道表达出来。&lt;/p>
&lt;p>&amp;ldquo;撤销&amp;quot;这个操作是&lt;code>Context&lt;/code>值能够协调多个 goroutine 的关键所在。撤销信号总是会沿着上下文树叶子节点的方向传播开来。&lt;/p>
&lt;p>含数据的&lt;code>Context&lt;/code>值可以携带数据。每个值都可以存储一对键和值。在我们调用它的&lt;code>Value&lt;/code>方法的时候，它会沿着上下文树的根节点的方向逐个值的进行查找。如果发现相等的键，它就会立即返回对应的值，否则将在最后返回&lt;code>nil&lt;/code>。&lt;/p>
&lt;p>含数据的&lt;code>Context&lt;/code>值不能被撤销，而可撤销的&lt;code>Context&lt;/code>值又无法携带数据。但是，由于它们共同组成了一个有机的整体（即上下文树），所以在功能上要比&lt;code>sync.WaitGroup&lt;/code>强大得多。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>今天的思考题是：&lt;code>Context&lt;/code>值在传达撤销信号的时候是广度优先的，还是深度优先的？其优势和劣势都是什么？&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 33丨临时对象池sync</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/33%E4%B8%A8%E4%B8%B4%E6%97%B6%E5%AF%B9%E8%B1%A1%E6%B1%A0sync/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/33%E4%B8%A8%E4%B8%B4%E6%97%B6%E5%AF%B9%E8%B1%A1%E6%B1%A0sync/</guid><description>
&lt;p>到目前为止，我们已经一起学习了 Go 语言标准库中最重要的那几个同步工具，这包括非常经典的互斥锁、读写锁、条件变量和原子操作，以及 Go 语言特有的几个同步工具：&lt;/p>
&lt;ol>
&lt;li>&lt;code>sync/atomic.Value&lt;/code>；&lt;/li>
&lt;li>&lt;code>sync.Once&lt;/code>；&lt;/li>
&lt;li>&lt;code>sync.WaitGroup&lt;/code>&lt;/li>
&lt;li>&lt;code>context.Context&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>今天，我们来讲 Go 语言标准库中的另一个同步工具：&lt;code>sync.Pool&lt;/code>。&lt;/p>
&lt;p>&lt;code>sync.Pool&lt;/code>类型可以被称为临时对象池，它的值可以被用来存储临时的对象。与 Go 语言的很多同步工具一样，&lt;code>sync.Pool&lt;/code>类型也属于结构体类型，它的值在被真正使用之后，就不应该再被复制了。&lt;/p>
&lt;p>这里的&amp;quot;临时对象&amp;quot;的意思是：不需要持久使用的某一类值。这类值对于程序来说可有可无，但如果有的话会明显更好。它们的创建和销毁可以在任何时候发生，并且完全不会影响到程序的功能。&lt;/p>
&lt;p>同时，它们也应该是无需被区分的，其中的任何一个值都可以代替另一个。如果你的某类值完全满足上述条件，那么你就可以把它们存储到临时对象池中。&lt;/p>
&lt;p>你可能已经想到了，我们可以把临时对象池当作针对某种数据的缓存来用。实际上，在我看来，临时对象池最主要的用途就在于此。&lt;/p>
&lt;p>&lt;code>sync.Pool&lt;/code>类型只有两个方法&amp;mdash;&amp;mdash;&lt;code>Put&lt;/code>和&lt;code>Get&lt;/code>。Put 用于在当前的池中存放临时对象，它接受一个&lt;code>interface{}&lt;/code>类型的参数；而 Get 则被用于从当前的池中获取临时对象，它会返回一个&lt;code>interface{}&lt;/code>类型的值。&lt;/p>
&lt;p>更具体地说，这个类型的&lt;code>Get&lt;/code>方法可能会从当前的池中删除掉任何一个值，然后把这个值作为结果返回。如果此时当前的池中没有任何值，那么这个方法就会使用当前池的&lt;code>New&lt;/code>字段创建一个新值，并直接将其返回。&lt;/p>
&lt;p>&lt;code>sync.Pool&lt;/code>类型的&lt;code>New&lt;/code>字段代表着创建临时对象的函数。它的类型是没有参数但有唯一结果的函数类型，即：&lt;code>func() interface{}&lt;/code>。&lt;/p>
&lt;p>这个函数是&lt;code>Get&lt;/code>方法最后的临时对象获取手段。&lt;code>Get&lt;/code>方法如果到了最后，仍然无法获取到一个值，那么就会调用该函数。该函数的结果值并不会被存入当前的临时对象池中，而是直接返回给&lt;code>Get&lt;/code>方法的调用方。&lt;/p>
&lt;p>这里的&lt;code>New&lt;/code>字段的实际值需要我们在初始化临时对象池的时候就给定。否则，在我们调用它的&lt;code>Get&lt;/code>方法的时候就有可能会得到&lt;code>nil&lt;/code>。所以，&lt;code>sync.Pool&lt;/code>类型并不是开箱即用的。不过，这个类型也就只有这么一个公开的字段，因此初始化起来也并不麻烦。&lt;/p>
&lt;p>举个例子。标准库代码包&lt;code>fmt&lt;/code>就使用到了&lt;code>sync.Pool&lt;/code>类型。这个包会创建一个用于缓存某类临时对象的&lt;code>sync.Pool&lt;/code>类型值，并将这个值赋给一个名为&lt;code>ppFree&lt;/code>的变量。这类临时对象可以识别、格式化和暂存需要打印的内容。&lt;/p>
&lt;pre>&lt;code>var ppFree = sync.Pool{
New: func() interface{} { return new(pp) },
}
&lt;/code>&lt;/pre>
&lt;p>临时对象池&lt;code>ppFree&lt;/code>的&lt;code>New&lt;/code>字段在被调用的时候，总是会返回一个全新的&lt;code>pp&lt;/code>类型值的指针（即临时对象）。这就保证了&lt;code>ppFree&lt;/code>的&lt;code>Get&lt;/code>方法总能返回一个可以包含需要打印内容的值。&lt;/p>
&lt;p>&lt;code>pp&lt;/code>类型是&lt;code>fmt&lt;/code>包中的私有类型，它有很多实现了不同功能的方法。不过，这里的重点是，它的每一个值都是独立的、平等的和可重用的。&lt;/p>
&lt;blockquote>
&lt;p>更具体地说，这些对象既互不干扰，又不会受到外部状态的影响。它们几乎只针对某个需要打印内容的缓冲区而已。由于&lt;code>fmt&lt;/code>包中的代码在真正使用这些临时对象之前，总是会先对其进行重置，所以它们并不在意取到的是哪一个临时对象。这就是临时对象的平等性的具体体现。&lt;/p>
&lt;/blockquote>
&lt;p>另外，这些代码在使用完临时对象之后，都会先抹掉其中已缓冲的内容，然后再把它存放到&lt;code>ppFree&lt;/code>中。这样就为重用这类临时对象做好了准备。&lt;/p>
&lt;p>众所周知的&lt;code>fmt.Println&lt;/code>、&lt;code>fmt.Printf&lt;/code>等打印函数都是如此使用&lt;code>ppFree&lt;/code>，以及其中的临时对象的。因此，在程序同时执行很多的打印函数调用的时候，&lt;code>ppFree&lt;/code>可以及时地把它缓存的临时对象提供给它们，以加快执行的速度。&lt;/p>
&lt;p>而当程序在一段时间内不再执行打印函数调用时，&lt;code>ppFree&lt;/code>中的临时对象又能够被及时地清理掉，以节省内存空间。&lt;/p>
&lt;p>显然，在这个维度上，临时对象池可以帮助程序实现可伸缩性。这就是它的最大价值。&lt;/p>
&lt;p>我想，到了这里你已经清楚了临时对象池的基本功能、使用方式、适用场景和存在意义。我们下面来讨论一下它的一些内部机制，这样，我们就可以更好地利用它做更多的事。&lt;/p>
&lt;p>首先，我来问你一个问题。这个问题很可能也是你想问的。今天的问题是：为什么说临时对象池中的值会被及时地清理掉？&lt;/p>
&lt;p>这里的典型回答是：因为，Go 语言运行时系统中的垃圾回收器，所以在每次开始执行之前，都会对所有已创建的临时对象池中的值进行全面地清除。&lt;/p>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>我在前面已经向你讲述了临时对象会在什么时候被创建，下面我再来详细说说它会在什么时候被销毁。&lt;/p>
&lt;p>&lt;code>sync&lt;/code>包在被初始化的时候，会向 Go 语言运行时系统注册一个函数，这个函数的功能就是清除所有已创建的临时对象池中的值。我们可以把它称为池清理函数。&lt;/p>
&lt;p>一旦池清理函数被注册到了 Go 语言运行时系统，后者在每次即将执行垃圾回收时就都会执行前者。&lt;/p>
&lt;p>另外，在&lt;code>sync&lt;/code>包中还有一个包级私有的全局变量。这个变量代表了当前的程序中使用的所有临时对象池的汇总，它是元素类型为&lt;code>*sync.Pool&lt;/code>的切片。我们可以称之为池汇总列表。&lt;/p>
&lt;p>通常，在一个临时对象池的&lt;code>Put&lt;/code>方法或&lt;code>Get&lt;/code>方法第一次被调用的时候，这个池就会被添加到池汇总列表中。正因为如此，池清理函数总是能访问到所有正在被真正使用的临时对象池。&lt;/p>
&lt;p>更具体地说，池清理函数会遍历池汇总列表。对于其中的每一个临时对象池，它都会先将池中所有的私有临时对象和共享临时对象列表都置为&lt;code>nil&lt;/code>，然后再把这个池中的所有本地池列表都销毁掉。&lt;/p>
&lt;p>最后，池清理函数会把池汇总列表重置为空的切片。如此一来，这些池中存储的临时对象就全部被清除干净了。&lt;/p>
&lt;p>如果临时对象池以外的代码再无对它们的引用，那么在稍后的垃圾回收过程中，这些临时对象就会被当作垃圾销毁掉，它们占用的内存空间也会被回收以备他用。&lt;/p>
&lt;p>以上，就是我对临时对象清理的进一步说明。首先需要记住的是，池清理函数和池汇总列表的含义，以及它们起到的关键作用。一旦理解了这些，那么在有人问到你这个问题的时候，你应该就可以从容地应对了。&lt;/p>
&lt;p>不过，我们在这里还碰到了几个新的词，比如：私有临时对象、共享临时对象列表和本地池。这些都代表着什么呢？这就涉及了下面的问题。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;h3 id="问题-1临时对象池存储值所用的数据结构是怎样的">问题 1：临时对象池存储值所用的数据结构是怎样的？&lt;/h3>
&lt;p>在临时对象池中，有一个多层的数据结构。正因为有了它的存在，临时对象池才能够非常高效地存储大量的值。&lt;/p>
&lt;p>这个数据结构的顶层，我们可以称之为本地池列表，不过更确切地说，它是一个数组。这个列表的长度，总是与 Go 语言调度器中的 P 的数量相同。&lt;/p>
&lt;p>还记得吗？Go 语言调度器中的 P 是 processor 的缩写，它指的是一种可以承载若干个 G、且能够使这些 G 适时地与 M 进行对接，并得到真正运行的中介。&lt;/p>
&lt;p>这里的 G 正是 goroutine 的缩写，而 M 则是 machine 的缩写，后者指代的是系统级的线程。正因为有了 P 的存在，G 和 M 才能够进行灵活、高效的配对，从而实现强大的并发编程模型。&lt;/p>
&lt;p>P 存在的一个很重要的原因是为了分散并发程序的执行压力，而让临时对象池中的本地池列表的长度与 P 的数量相同的主要原因也是分散压力。这里所说的压力包括了存储和性能两个方面。在说明它们之前，我们先来探索一下临时对象池中的那个数据结构。&lt;/p>
&lt;p>在本地池列表中的每个本地池都包含了三个字段（或者说组件），它们是：存储私有临时对象的字段&lt;code>private&lt;/code>、代表了共享临时对象列表的字段&lt;code>shared&lt;/code>，以及一个&lt;code>sync.Mutex&lt;/code>类型的嵌入字段。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/82/22/825cae64e0a879faba34c0a157b7ca22.png" alt="">&lt;br>
&lt;strong>sync.Pool 中的本地池与各个 G 的对应关系&lt;/strong>&lt;/p>
&lt;p>实际上，每个本地池都对应着一个 P。我们都知道，一个 goroutine 要想真正运行就必须先与某个 P 产生关联。也就是说，一个正在运行的 goroutine 必然会关联着某个 P。&lt;/p>
&lt;p>在程序调用临时对象池的&lt;code>Put&lt;/code>方法或&lt;code>Get&lt;/code>方法的时候，总会先试图从该临时对象池的本地池列表中，获取与之对应的本地池，依据的就是与当前的 goroutine 关联的那个 P 的 ID。&lt;/p>
&lt;p>换句话说，一个临时对象池的&lt;code>Put&lt;/code>方法或&lt;code>Get&lt;/code>方法会获取到哪一个本地池，完全取决于调用它的代码所在的 goroutine 关联的那个 P。&lt;/p>
&lt;p>既然说到了这里，那么紧接着就会有下面这个问题。&lt;/p>
&lt;h3 id="问题-2临时对象池是怎样利用内部数据结构来存取值的">问题 2：临时对象池是怎样利用内部数据结构来存取值的？&lt;/h3>
&lt;p>临时对象池的&lt;code>Put&lt;/code>方法总会先试图把新的临时对象，存储到对应的本地池的&lt;code>private&lt;/code>字段中，以便在后面获取临时对象的时候，可以快速地拿到一个可用的值。&lt;/p>
&lt;p>只有当这个&lt;code>private&lt;/code>字段已经存有某个值时，该方法才会去访问本地池的&lt;code>shared&lt;/code>字段。&lt;/p>
&lt;p>相应的，临时对象池的&lt;code>Get&lt;/code>方法，总会先试图从对应的本地池的&lt;code>private&lt;/code>字段处获取一个临时对象。只有当这个&lt;code>private&lt;/code>字段的值为&lt;code>nil&lt;/code>时，它才会去访问本地池的&lt;code>shared&lt;/code>字段。&lt;/p>
&lt;p>一个本地池的&lt;code>shared&lt;/code>字段原则上可以被任何 goroutine 中的代码访问到，不论这个 goroutine 关联的是哪一个 P。这也是我把它叫做共享临时对象列表的原因。&lt;/p>
&lt;p>相比之下，一个本地池的&lt;code>private&lt;/code>字段，只可能被与之对应的那个 P 所关联的 goroutine 中的代码访问到，所以可以说，它是 P 级私有的。&lt;/p>
&lt;p>以临时对象池的&lt;code>Put&lt;/code>方法为例，它一旦发现对应的本地池的&lt;code>private&lt;/code>字段已存有值，就会去访问这个本地池的&lt;code>shared&lt;/code>字段。当然，由于&lt;code>shared&lt;/code>字段是共享的，所以此时必须受到互斥锁的保护。&lt;/p>
&lt;p>还记得本地池嵌入的那个&lt;code>sync.Mutex&lt;/code>类型的字段吗？它就是这里用到的互斥锁，也就是说，本地池本身就拥有互斥锁的功能。&lt;code>Put&lt;/code>方法会在互斥锁的保护下，把新的临时对象追加到共享临时对象列表的末尾。&lt;/p>
&lt;p>相应的，临时对象池的&lt;code>Get&lt;/code>方法在发现对应本地池的&lt;code>private&lt;/code>字段未存有值时，也会去访问后者的&lt;code>shared&lt;/code>字段。它会在互斥锁的保护下，试图把该共享临时对象列表中的最后一个元素值取出并作为结果。&lt;/p>
&lt;p>不过，这里的共享临时对象列表也可能是空的，这可能是由于这个本地池中的所有临时对象都已经被取走了，也可能是当前的临时对象池刚被清理过。&lt;/p>
&lt;p>无论原因是什么，&lt;code>Get&lt;/code>方法都会去访问当前的临时对象池中的所有本地池，它会去逐个搜索它们的共享临时对象列表。&lt;/p>
&lt;p>只要发现某个共享临时对象列表中包含元素值，它就会把该列表的最后一个元素值取出并作为结果返回。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/df/21/df956fe29f35b41a14f941a9efd80d21.png" alt="">&lt;br>
&lt;strong>从 sync.Pool 中获取临时对象的步骤&lt;/strong>&lt;/p>
&lt;p>当然了，即使这样也可能无法拿到一个可用的临时对象，比如，在所有的临时对象池都刚被大清洗的情况下就会是如此。&lt;/p>
&lt;p>这时，&lt;code>Get&lt;/code>方法就会使出最后的手段&amp;mdash;&amp;mdash;调用可创建临时对象的那个函数。还记得吗？这个函数是由临时对象池的&lt;code>New&lt;/code>字段代表的，并且需要我们在初始化临时对象池的时候给定。如果这个字段的值是&lt;code>nil&lt;/code>，那么&lt;code>Get&lt;/code>方法此时也只能返回&lt;code>nil&lt;/code>了。&lt;/p>
&lt;p>以上，就是我对这个问题的较完整回答。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>今天，我们一起讨论了另一个比较有用的同步工具&amp;mdash;&amp;mdash;&lt;code>sync.Pool&lt;/code>类型，它的值被我称为临时对象池。&lt;/p>
&lt;p>临时对象池有一个&lt;code>New&lt;/code>字段，我们在初始化这个池的时候最好给定它。临时对象池还拥有两个方法，即：&lt;code>Put&lt;/code>和&lt;code>Get&lt;/code>，它们分别被用于向池中存放临时对象，和从池中获取临时对象。&lt;/p>
&lt;p>临时对象池中存储的每一个值都应该是独立的、平等的和可重用的。我们应该既不用关心从池中拿到的是哪一个值，也不用在意这个值是否已经被使用过。&lt;/p>
&lt;p>要完全做到这两点，可能会需要我们额外地写一些代码。不过，这个代码量应该是微乎其微的，就像&lt;code>fmt&lt;/code>包对临时对象池的用法那样。所以，在选用临时对象池的时候，我们必须要把它将要存储的值的特性考虑在内。&lt;/p>
&lt;p>在临时对象池的内部，有一个多层的数据结构支撑着对临时对象的存储。它的顶层是本地池列表，其中包含了与某个 P 对应的那些本地池，并且其长度与 P 的数量总是相同的。&lt;/p>
&lt;p>在每个本地池中，都包含一个私有的临时对象和一个共享的临时对象列表。前者只能被其对应的 P 所关联的那个 goroutine 中的代码访问到，而后者却没有这个约束。从另一个角度讲，前者用于临时对象的快速存取，而后者则用于临时对象的池内共享。&lt;/p>
&lt;p>正因为有了这样的数据结构，临时对象池才能够有效地分散存储压力和性能压力。同时，又因为临时对象池的&lt;code>Get&lt;/code>方法对这个数据结构的妙用，才使得其中的临时对象能够被高效地利用。比如，该方法有时候会从其他的本地池的共享临时对象列表中，&amp;ldquo;偷取&amp;quot;一个临时对象。&lt;/p>
&lt;p>这样的内部结构和存取方式，让临时对象池成为了一个特点鲜明的同步工具。它存储的临时对象都应该是拥有较长生命周期的值，并且，这些值不应该被某个 goroutine 中的代码长期的持有和使用。&lt;/p>
&lt;p>因此，临时对象池非常适合用作针对某种数据的缓存。从某种角度讲，临时对象池可以帮助程序实现可伸缩性，这也正是它的最大价值。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>今天的思考题是：怎样保证一个临时对象池中总有比较充足的临时对象？&lt;/p>
&lt;p>请从临时对象池的初始化和方法调用两个方面作答。必要时可以参考&lt;code>fmt&lt;/code>包以及 demo70.go 文件中使用临时对象池的方式。&lt;/p>
&lt;p>感谢你的收听，我们下次再见。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 34丨并发安全字典sync</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/34%E4%B8%A8%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E5%AD%97%E5%85%B8sync/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/34%E4%B8%A8%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E5%AD%97%E5%85%B8sync/</guid><description>
&lt;p>在前面，我几乎已经把 Go 语言自带的同步工具全盘托出了。你是否已经听懂了会用了呢？&lt;/p>
&lt;p>无论怎样，我都希望你能够多多练习、多多使用。它们和 Go 语言独有的并发编程方式并不冲突，相反，配合起来使用，绝对能达到&amp;quot;一加一大于二&amp;quot;的效果。&lt;/p>
&lt;p>当然了，至于怎样配合就是一门学问了。我在前面已经讲了不少的方法和技巧，不过，更多的东西可能就需要你在实践中逐渐领悟和总结了。&lt;/p>
&lt;hr>
&lt;p>我们今天再来讲一个并发安全的高级数据结构：&lt;code>sync.Map&lt;/code>。众所周知，Go 语言自带的字典类型&lt;code>map&lt;/code>并不是并发安全的。&lt;/p>
&lt;h2 id="前导知识并发安全字典诞生史">前导知识：并发安全字典诞生史&lt;/h2>
&lt;p>换句话说，在同一时间段内，让不同 goroutine 中的代码，对同一个字典进行读写操作是不安全的。字典值本身可能会因这些操作而产生混乱，相关的程序也可能会因此发生不可预知的问题。&lt;/p>
&lt;p>在&lt;code>sync.Map&lt;/code>出现之前，我们如果要实现并发安全的字典，就只能自行构建。不过，这其实也不是什么麻烦事，使用 &lt;code>sync.Mutex&lt;/code>或&lt;code>sync.RWMutex&lt;/code>，再加上原生的&lt;code>map&lt;/code>就可以轻松地做到。&lt;/p>
&lt;p>GitHub 网站上已经有很多库提供了类似的数据结构。我在《Go 并发编程实战》的第 2 版中也提供了一个比较完整的并发安全字典的实现。它的性能比同类的数据结构还要好一些，因为它在很大程度上有效地避免了对锁的依赖。&lt;/p>
&lt;p>尽管已经有了不少的参考实现，Go 语言爱好者们还是希望 Go 语言官方能够发布一个标准的并发安全字典。&lt;/p>
&lt;p>经过大家多年的建议和吐槽，Go 语言官方终于在 2017 年发布的 Go 1.9 中，正式加入了并发安全的字典类型&lt;code>sync.Map&lt;/code>。&lt;/p>
&lt;p>这个字典类型提供了一些常用的键值存取操作方法，并保证了这些操作的并发安全。同时，它的存、取、删等操作都可以基本保证在常数时间内执行完毕。换句话说，它们的算法复杂度与&lt;code>map&lt;/code>类型一样都是&lt;code>O(1)&lt;/code>的。&lt;/p>
&lt;p>在有些时候，与单纯使用原生&lt;code>map&lt;/code>和互斥锁的方案相比，使用&lt;code>sync.Map&lt;/code>可以显著地减少锁的争用。&lt;code>sync.Map&lt;/code>本身虽然也用到了锁，但是，它其实在尽可能地避免使用锁。&lt;/p>
&lt;p>我们都知道，使用锁就意味着要把一些并发的操作强制串行化。这往往会降低程序的性能，尤其是在计算机拥有多个 CPU 核心的情况下。&lt;/p>
&lt;p>因此，我们常说，能用原子操作就不要用锁，不过这很有局限性，毕竟原子只能对一些基本的数据类型提供支持。&lt;/p>
&lt;p>无论在何种场景下使用&lt;code>sync.Map&lt;/code>，我们都需要注意，与原生&lt;code>map&lt;/code>明显不同，它只是 Go 语言标准库中的一员，而不是语言层面的东西。也正因为这一点，Go 语言的编译器并不会对它的键和值，进行特殊的类型检查。&lt;/p>
&lt;p>如果你看过&lt;code>sync.Map&lt;/code>的文档或者实际使用过它，那么就一定会知道，它所有的方法涉及的键和值的类型都是&lt;code>interface{}&lt;/code>，也就是空接口，这意味着可以包罗万象。所以，我们必须在程序中自行保证它的键类型和值类型的正确性。&lt;/p>
&lt;p>好了，现在第一个问题来了。&lt;strong>今天的问题是：并发安全字典对键的类型有要求吗？&lt;/strong>&lt;/p>
&lt;p>这道题的典型回答是：有要求。键的实际类型不能是函数类型、字典类型和切片类型。&lt;/p>
&lt;p>&lt;strong>解析一下这个问题。&lt;/strong> 我们都知道，Go 语言的原生字典的键类型不能是函数类型、字典类型和切片类型。&lt;/p>
&lt;p>由于并发安全字典内部使用的存储介质正是原生字典，又因为它使用的原生字典键类型也是可以包罗万象的&lt;code>interface{}&lt;/code>；所以，我们绝对不能带着任何实际类型为函数类型、字典类型或切片类型的键值去操作并发安全字典。&lt;/p>
&lt;p>由于这些键值的实际类型只有在程序运行期间才能够确定，所以 Go 语言编译器是无法在编译期对它们进行检查的，不正确的键值实际类型肯定会引发 panic。&lt;/p>
&lt;p>因此，我们在这里首先要做的一件事就是：一定不要违反上述规则。我们应该在每次操作并发安全字典的时候，都去显式地检查键值的实际类型。无论是存、取还是删，都应该如此。&lt;/p>
&lt;p>当然，更好的做法是，把针对同一个并发安全字典的这几种操作都集中起来，然后统一地编写检查代码。除此之外，把并发安全字典封装在一个结构体类型中，往往是一个很好的选择。&lt;/p>
&lt;p>总之，我们必须保证键的类型是可比较的（或者说可判等的）。如果你实在拿不准，那么可以先通过调用&lt;code>reflect.TypeOf&lt;/code>函数得到一个键值对应的反射类型值（即：&lt;code>reflect.Type&lt;/code>类型的值），然后再调用这个值的&lt;code>Comparable&lt;/code>方法，得到确切的判断结果。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;h2 id="问题-1怎样保证并发安全字典中的键和值的类型正确性方案一">问题 1：怎样保证并发安全字典中的键和值的类型正确性？（方案一）&lt;/h2>
&lt;p>简单地说，可以使用类型断言表达式或者反射操作来保证它们的类型正确性。&lt;/p>
&lt;p>为了进一步明确并发安全字典中键值的实际类型，这里大致有两种方案可选。&lt;/p>
&lt;p>&lt;strong>第一种方案是，让并发安全字典只能存储某个特定类型的键。&lt;/strong>&lt;/p>
&lt;p>比如，指定这里的键只能是&lt;code>int&lt;/code>类型的，或者只能是字符串，又或是某类结构体。一旦完全确定了键的类型，你就可以在进行存、取、删操作的时候，使用类型断言表达式去对键的类型做检查了。&lt;/p>
&lt;p>一般情况下，这种检查并不繁琐。而且，你要是把并发安全字典封装在一个结构体类型里面，那就更加方便了。你这时完全可以让 Go 语言编译器帮助你做类型检查。请看下面的代码：&lt;/p>
&lt;pre>&lt;code>type IntStrMap struct {
m sync.Map
}
func (iMap *IntStrMap) Delete(key int) {
iMap.m.Delete(key)
}
func (iMap *IntStrMap) Load(key int) (value string, ok bool) {
v, ok := iMap.m.Load(key)
if v != nil {
value = v.(string)
}
return
}
func (iMap *IntStrMap) LoadOrStore(key int, value string) (actual string, loaded bool) {
a, loaded := iMap.m.LoadOrStore(key, value)
actual = a.(string)
return
}
func (iMap *IntStrMap) Range(f func(key int, value string) bool) {
f1 := func(key, value interface{}) bool {
return f(key.(int), value.(string))
}
iMap.m.Range(f1)
}
func (iMap *IntStrMap) Store(key int, value string) {
iMap.m.Store(key, value)
}
&lt;/code>&lt;/pre>
&lt;p>如上所示，我编写了一个名为&lt;code>IntStrMap&lt;/code>的结构体类型，它代表了键类型为&lt;code>int&lt;/code>、值类型为&lt;code>string&lt;/code>的并发安全字典。在这个结构体类型中，只有一个&lt;code>sync.Map&lt;/code>类型的字段&lt;code>m&lt;/code>。并且，这个类型拥有的所有方法，都与&lt;code>sync.Map&lt;/code>类型的方法非常类似。&lt;/p>
&lt;p>两者对应的方法名称完全一致，方法签名也非常相似，只不过，与键和值相关的那些参数和结果的类型不同而已。在&lt;code>IntStrMap&lt;/code>类型的方法签名中，明确了键的类型为&lt;code>int&lt;/code>，且值的类型为&lt;code>string&lt;/code>。&lt;/p>
&lt;p>显然，这些方法在接受键和值的时候，就不用再做类型检查了。另外，这些方法在从&lt;code>m&lt;/code>中取出键和值的时候，完全不用担心它们的类型会不正确，因为它的正确性在当初存入的时候，就已经由 Go 语言编译器保证了。&lt;/p>
&lt;p>稍微总结一下。第一种方案适用于我们可以完全确定键和值的具体类型的情况。在这种情况下，我们可以利用 Go 语言编译器去做类型检查，并用类型断言表达式作为辅助，就像&lt;code>IntStrMap&lt;/code>那样。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>我们今天讨论的是&lt;code>sync.Map&lt;/code>类型，它是一种并发安全的字典。它提供了一些常用的键、值存取操作方法，并保证了这些操作的并发安全。同时，它还保证了存、取、删等操作的常数级执行时间。&lt;/p>
&lt;p>与原生的字典相同，并发安全字典对键的类型也是有要求的。它们同样不能是函数类型、字典类型和切片类型。&lt;/p>
&lt;p>另外，由于并发安全字典提供的方法涉及的键和值的类型都是&lt;code>interface{}&lt;/code>，所以我们在调用这些方法的时候，往往还需要对键和值的实际类型进行检查。&lt;/p>
&lt;p>这里大致有两个方案。我们今天主要提到了第一种方案，这是在编码时就完全确定键和值的类型，然后利用 Go 语言的编译器帮我们做检查。&lt;/p>
&lt;p>在下一次的文章中，我们会提到另外一种方案，并对比这两种方案的优劣。除此之外，我会继续探讨并发安全字典的相关问题。&lt;/p>
&lt;p>感谢你的收听，我们下期再见。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 35丨并发安全字典sync</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/35%E4%B8%A8%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E5%AD%97%E5%85%B8sync/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/35%E4%B8%A8%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E5%AD%97%E5%85%B8sync/</guid><description>
&lt;p>你好，我是郝林，今天我们继续来分享并发安全字典 sync.Map 的内容。&lt;/p>
&lt;p>我们在上一篇文章中谈到了，由于并发安全字典提供的方法涉及的键和值的类型都是&lt;code>interface{}&lt;/code>，所以我们在调用这些方法的时候，往往还需要对键和值的实际类型进行检查。&lt;/p>
&lt;p>这里大致有两个方案。我们上一篇文章中提到了第一种方案，在编码时就完全确定键和值的类型，然后利用 Go 语言的编译器帮我们做检查。&lt;/p>
&lt;p>这样做很方便，不是吗？不过，虽然方便，但是却让这样的字典类型缺少了一些灵活性。&lt;/p>
&lt;p>如果我们还需要一个键类型为&lt;code>uint32&lt;/code>并发安全字典的话，那就不得不再如法炮制地写一遍代码了。因此，在需求多样化之后，工作量反而更大，甚至会产生很多雷同的代码。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;h2 id="问题-1怎样保证并发安全字典中的键和值的类型正确性方案二">问题 1：怎样保证并发安全字典中的键和值的类型正确性？（方案二）&lt;/h2>
&lt;p>那么，如果我们既想保持&lt;code>sync.Map&lt;/code>类型原有的灵活性，又想约束键和值的类型，那么应该怎样做呢？这就涉及了第二个方案。&lt;/p>
&lt;p>&lt;strong>在第二种方案中，我们封装的结构体类型的所有方法，都可以与&lt;code>sync.Map&lt;/code>类型的方法完全一致（包括方法名称和方法签名）。&lt;/strong>&lt;/p>
&lt;p>不过，在这些方法中，我们就需要添加一些做类型检查的代码了。另外，这样并发安全字典的键类型和值类型，必须在初始化的时候就完全确定。并且，这种情况下，我们必须先要保证键的类型是可比较的。&lt;/p>
&lt;p>所以在设计这样的结构体类型的时候，只包含&lt;code>sync.Map&lt;/code>类型的字段就不够了。&lt;/p>
&lt;p>比如：&lt;/p>
&lt;pre>&lt;code>type ConcurrentMap struct {
m sync.Map
keyType reflect.Type
valueType reflect.Type
}
&lt;/code>&lt;/pre>
&lt;p>这里&lt;code>ConcurrentMap&lt;/code>类型代表的是：可自定义键类型和值类型的并发安全字典。这个类型同样有一个&lt;code>sync.Map&lt;/code>类型的字段&lt;code>m&lt;/code>，代表着其内部使用的并发安全字典。&lt;/p>
&lt;p>另外，它的字段&lt;code>keyType&lt;/code>和&lt;code>valueType&lt;/code>，分别用于保存键类型和值类型。这两个字段的类型都是&lt;code>reflect.Type&lt;/code>，我们可称之为反射类型。&lt;/p>
&lt;p>这个类型可以代表 Go 语言的任何数据类型。并且，这个类型的值也非常容易获得：通过调用&lt;code>reflect.TypeOf&lt;/code>函数并把某个样本值传入即可。&lt;/p>
&lt;p>调用表达式&lt;code>reflect.TypeOf(int(123))&lt;/code>的结果值，就代表了&lt;code>int&lt;/code>类型的反射类型值。&lt;/p>
&lt;p>&lt;strong>我们现在来看一看&lt;code>ConcurrentMap&lt;/code>类型方法应该怎么写。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>先说&lt;code>Load&lt;/code>方法&lt;/strong> ，这个方法接受一个&lt;code>interface{}&lt;/code>类型的参数&lt;code>key&lt;/code>，参数&lt;code>key&lt;/code>代表了某个键的值。&lt;/p>
&lt;p>因此，当我们根据 ConcurrentMap 在&lt;code>m&lt;/code>字段的值中查找键值对的时候，就必须保证 ConcurrentMap 的类型是正确的。由于反射类型值之间可以直接使用操作符&lt;code>==&lt;/code>或&lt;code>!=&lt;/code>进行判等，所以这里的类型检查代码非常简单。&lt;/p>
&lt;pre>&lt;code>func (cMap *ConcurrentMap) Load(key interface{}) (value interface{}, ok bool) {
if reflect.TypeOf(key) != cMap.keyType {
return
}
return cMap.m.Load(key)
}
&lt;/code>&lt;/pre>
&lt;p>我们把一个接口类型值传入&lt;code>reflect.TypeOf&lt;/code>函数，就可以得到与这个值的实际类型对应的反射类型值。&lt;/p>
&lt;p>因此，如果参数值的反射类型与&lt;code>keyType&lt;/code>字段代表的反射类型不相等，那么我们就忽略后续操作，并直接返回。&lt;/p>
&lt;p>这时，&lt;code>Load&lt;/code>方法的第一个结果&lt;code>value&lt;/code>的值为&lt;code>nil&lt;/code>，而第二个结果&lt;code>ok&lt;/code>的值为&lt;code>false&lt;/code>。这完全符合&lt;code>Load&lt;/code>方法原本的含义。&lt;/p>
&lt;p>&lt;strong>再来说&lt;code>Store&lt;/code>方法。&lt;/strong> &lt;code>Store&lt;/code>方法接受两个参数&lt;code>key&lt;/code>和&lt;code>value&lt;/code>，它们的类型也都是&lt;code>interface{}&lt;/code>。因此，我们的类型检查应该针对它们来做。&lt;/p>
&lt;pre>&lt;code>func (cMap *ConcurrentMap) Store(key, value interface{}) {
if reflect.TypeOf(key) != cMap.keyType {
panic(fmt.Errorf(&amp;quot;wrong key type: %v&amp;quot;, reflect.TypeOf(key)))
}
if reflect.TypeOf(value) != cMap.valueType {
panic(fmt.Errorf(&amp;quot;wrong value type: %v&amp;quot;, reflect.TypeOf(value)))
}
cMap.m.Store(key, value)
}
&lt;/code>&lt;/pre>
&lt;p>这里的类型检查代码与&lt;code>Load&lt;/code>方法中的代码很类似，不同的是对检查结果的处理措施。当参数&lt;code>key&lt;/code>或&lt;code>value&lt;/code>的实际类型不符合要求时，&lt;code>Store&lt;/code>方法会立即引发 panic。&lt;/p>
&lt;p>这主要是由于&lt;code>Store&lt;/code>方法没有结果声明，所以在参数值有问题的时候，它无法通过比较平和的方式告知调用方。不过，这也是符合&lt;code>Store&lt;/code>方法的原本含义的。&lt;/p>
&lt;p>如果你不想这么做，也是可以的，那么就需要为&lt;code>Store&lt;/code>方法添加一个&lt;code>error&lt;/code>类型的结果。&lt;/p>
&lt;p>并且，在发现参数值类型不正确的时候，让它直接返回相应的&lt;code>error&lt;/code>类型值，而不是引发 panic。要知道，这里展示的只一个参考实现，你可以根据实际的应用场景去做优化和改进。&lt;/p>
&lt;p>至于与&lt;code>ConcurrentMap&lt;/code>类型相关的其他方法和函数，我在这里就不展示了。它们在类型检查方式和处理流程上并没有特别之处。你可以在 demo72.go 文件中看到这些代码。&lt;/p>
&lt;p>稍微总结一下。第一种方案适用于我们可以完全确定键和值具体类型的情况。在这种情况下，我们可以利用 Go 语言编译器去做类型检查，并用类型断言表达式作为辅助，就像&lt;code>IntStrMap&lt;/code>那样。&lt;/p>
&lt;p>在第二种方案中，我们无需在程序运行之前就明确键和值的类型，只要在初始化并发安全字典的时候，动态地给定它们就可以了。这里主要需要用到&lt;code>reflect&lt;/code>包中的函数和数据类型，外加一些简单的判等操作。&lt;/p>
&lt;p>第一种方案存在一个很明显的缺陷，那就是无法灵活地改变字典的键和值的类型。一旦需求出现多样化，编码的工作量就会随之而来。&lt;/p>
&lt;p>第二种方案很好地弥补了这一缺陷，但是，那些反射操作或多或少都会降低程序的性能。我们往往需要根据实际的应用场景，通过严谨且一致的测试，来获得和比较程序的各项指标，并以此作为方案选择的重要依据之一。&lt;/p>
&lt;h2 id="问题-2并发安全字典如何做到尽量避免使用锁">问题 2：并发安全字典如何做到尽量避免使用锁？&lt;/h2>
&lt;p>&lt;code>sync.Map&lt;/code>类型在内部使用了大量的原子操作来存取键和值，并使用了两个原生的&lt;code>map&lt;/code>作为存储介质。&lt;/p>
&lt;p>&lt;strong>其中一个原生&lt;code>map&lt;/code>被存在了&lt;code>sync.Map&lt;/code>的&lt;code>read&lt;/code>字段中，该字段是&lt;code>sync/atomic.Value&lt;/code>类型的。&lt;/strong> 这个原生字典可以被看作一个快照，它总会在条件满足时，去重新保存所属的&lt;code>sync.Map&lt;/code>值中包含的所有键值对。&lt;/p>
&lt;p>为了描述方便，我们在后面简称它为只读字典。不过，只读字典虽然不会增减其中的键，但却允许变更其中的键所对应的值。所以，它并不是传统意义上的快照，它的只读特性只是对于其中键的集合而言的。&lt;/p>
&lt;p>由&lt;code>read&lt;/code>字段的类型可知，&lt;code>sync.Map&lt;/code>在替换只读字典的时候根本用不着锁。另外，这个只读字典在存储键值对的时候，还在值之上封装了一层。&lt;/p>
&lt;p>它先把值转换为了&lt;code>unsafe.Pointer&lt;/code>类型的值，然后再把后者封装，并储存在其中的原生字典中。如此一来，在变更某个键所对应的值的时候，就也可以使用原子操作了。&lt;/p>
&lt;p>&lt;strong>&lt;code>sync.Map&lt;/code>中的另一个原生字典由它的&lt;code>dirty&lt;/code>字段代表。&lt;/strong> 它存储键值对的方式与&lt;code>read&lt;/code>字段中的原生字典一致，它的键类型也是&lt;code>interface{}&lt;/code>，并且同样是把值先做转换和封装后再进行储存的。我们暂且把它称为脏字典。&lt;/p>
&lt;p>&lt;strong>注意，脏字典和只读字典如果都存有同一个键值对，那么这里的两个键指的肯定是同一个基本值，对于两个值来说也是如此。&lt;/strong>&lt;/p>
&lt;p>正如前文所述，这两个字典在存储键和值的时候都只会存入它们的某个指针，而不是基本值。&lt;/p>
&lt;p>&lt;code>sync.Map&lt;/code>在查找指定的键所对应的值的时候，总会先去只读字典中寻找，并不需要锁定互斥锁。只有当确定&amp;quot;只读字典中没有，但脏字典中可能会有这个键&amp;quot;的时候，它才会在锁的保护下去访问脏字典。&lt;/p>
&lt;p>相对应的，&lt;code>sync.Map&lt;/code>在存储键值对的时候，只要只读字典中已存有这个键，并且该键值对未被标记为&amp;quot;已删除&amp;quot;，就会把新值存到里面并直接返回，这种情况下也不需要用到锁。&lt;/p>
&lt;p>否则，它才会在锁的保护下把键值对存储到脏字典中。这个时候，该键值对的&amp;quot;已删除&amp;quot;标记会被抹去。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/41/51/418e648a9c370f67dffa70e84c96f451.png" alt="">&lt;/p>
&lt;p>&lt;strong>sync.Map 中的 read 与 dirty&lt;/strong>&lt;/p>
&lt;p>顺便说一句，只有当一个键值对应该被删除，但却仍然存在于只读字典中的时候，才会被用标记为&amp;quot;已删除&amp;quot;的方式进行逻辑删除，而不会直接被物理删除。&lt;/p>
&lt;p>这种情况会在重建脏字典以后的一段时间内出现。不过，过不了多久，它们就会被真正删除掉。在查找和遍历键值对的时候，已被逻辑删除的键值对永远会被无视。&lt;/p>
&lt;p>对于删除键值对，&lt;code>sync.Map&lt;/code>会先去检查只读字典中是否有对应的键。如果没有，脏字典中可能有，那么它就会在锁的保护下，试图从脏字典中删掉该键值对。&lt;/p>
&lt;p>最后，&lt;code>sync.Map&lt;/code>会把该键值对中指向值的那个指针置为&lt;code>nil&lt;/code>，这是另一种逻辑删除的方式。&lt;/p>
&lt;p>除此之外，还有一个细节需要注意，只读字典和脏字典之间是会互相转换的。在脏字典中查找键值对次数足够多的时候，&lt;code>sync.Map&lt;/code>会把脏字典直接作为只读字典，保存在它的&lt;code>read&lt;/code>字段中，然后把代表脏字典的&lt;code>dirty&lt;/code>字段的值置为&lt;code>nil&lt;/code>。&lt;/p>
&lt;p>在这之后，一旦再有新的键值对存入，它就会依据只读字典去重建脏字典。这个时候，它会把只读字典中已被逻辑删除的键值对过滤掉。理所当然，这些转换操作肯定都需要在锁的保护下进行。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/c5/f2/c5a9857311175ac94451fcefe52c30f2.png" alt="">&lt;br>
&lt;strong>sync.Map 中 read 与 dirty 的互换&lt;/strong>&lt;/p>
&lt;p>综上所述，&lt;code>sync.Map&lt;/code>的只读字典和脏字典中的键值对集合，并不是实时同步的，它们在某些时间段内可能会有不同。&lt;/p>
&lt;p>由于只读字典中键的集合不能被改变，所以其中的键值对有时候可能是不全的。相反，脏字典中的键值对集合总是完全的，并且其中不会包含已被逻辑删除的键值对。&lt;/p>
&lt;p>因此，可以看出，在读操作有很多但写操作却很少的情况下，并发安全字典的性能往往会更好。在几个写操作当中，新增键值对的操作对并发安全字典的性能影响是最大的，其次是删除操作，最后才是修改操作。&lt;/p>
&lt;p>如果被操作的键值对已经存在于&lt;code>sync.Map&lt;/code>的只读字典中，并且没有被逻辑删除，那么修改它并不会使用到锁，对其性能的影响就会很小。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>这两篇文章中，我们讨论了&lt;code>sync.Map&lt;/code>类型，并谈到了怎样保证并发安全字典中的键和值的类型正确性。&lt;/p>
&lt;p>为了进一步明确并发安全字典中键值的实际类型，这里大致有两种方案可选。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>其中一种方案是，在编码时就完全确定键和值的类型，然后利用 Go 语言的编译器帮我们做检查。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>另一种方案是，接受动态的类型设置，并在程序运行的时候通过反射操作进行检查。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>这两种方案各有利弊，前一种方案在扩展性方面有所欠缺，而后一种方案通常会影响到程序的性能。在实际使用的时候，我们一般都需要通过客观的测试来帮助决策。&lt;/p>
&lt;p>另外，在有些时候，与单纯使用原生字典和互斥锁的方案相比，使用&lt;code>sync.Map&lt;/code>可以显著地减少锁的争用。&lt;code>sync.Map&lt;/code>本身确实也用到了锁，但是，它会尽可能地避免使用锁。&lt;/p>
&lt;p>这就要说到&lt;code>sync.Map&lt;/code>对其持有两个原生字典的巧妙使用了。这两个原生字典一个被称为只读字典，另一个被称为脏字典。通过对它们的分析，我们知道了并发安全字典的适用场景，以及每种操作对其性能的影响程度。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>今天的思考题是：关于保证并发安全字典中的键和值的类型正确性，你还能想到其他的方案吗？&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 36丨unicode与字符编码</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/36%E4%B8%A8unicode%E4%B8%8E%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/36%E4%B8%A8unicode%E4%B8%8E%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</guid><description>
&lt;p>到目前为止，我们已经一起陆陆续续地学完了 Go 语言中那些最重要也最有特色的概念、语法和编程方式。我对于它们非常喜爱，简直可以用如数家珍来形容了。&lt;/p>
&lt;p>在开始今天的内容之前，我先来做一个简单的总结。&lt;/p>
&lt;h2 id="go-语言经典知识总结">Go 语言经典知识总结&lt;/h2>
&lt;p>基于混合线程的并发编程模型自然不必多说。&lt;/p>
&lt;p>在&lt;strong>数据类型&lt;/strong>方面有：&lt;/p>
&lt;ul>
&lt;li>基于底层数组的切片；&lt;/li>
&lt;li>用来传递数据的通道；&lt;/li>
&lt;li>作为一等类型的函数；&lt;/li>
&lt;li>可实现面向对象的结构体；&lt;/li>
&lt;li>能无侵入实现的接口等。&lt;/li>
&lt;/ul>
&lt;p>在&lt;strong>语法&lt;/strong>方面有：&lt;/p>
&lt;ul>
&lt;li>异步编程神器&lt;code>go&lt;/code>语句；&lt;/li>
&lt;li>函数的最后关卡&lt;code>defer&lt;/code>语句；&lt;/li>
&lt;li>可做类型判断的&lt;code>switch&lt;/code>语句；&lt;/li>
&lt;li>多通道操作利器&lt;code>select&lt;/code>语句；&lt;/li>
&lt;li>非常有特色的异常处理函数&lt;code>panic&lt;/code>和&lt;code>recover&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>除了这些，我们还一起讨论了&lt;strong>测试 Go 程序&lt;/strong>的主要方式。这涉及了 Go 语言自带的程序测试套件，相关的概念和工具包括：&lt;/p>
&lt;ul>
&lt;li>独立的测试源码文件；&lt;/li>
&lt;li>三种功用不同的测试函数；&lt;/li>
&lt;li>专用的&lt;code>testing&lt;/code>代码包；&lt;/li>
&lt;li>功能强大的&lt;code>go test&lt;/code>命令。&lt;/li>
&lt;/ul>
&lt;p>另外，就在前不久，我还为你深入讲解了 Go 语言提供的那些&lt;strong>同步工具&lt;/strong>。它们也是 Go 语言并发编程工具箱中不可或缺的一部分。这包括了：&lt;/p>
&lt;ul>
&lt;li>经典的互斥锁；&lt;/li>
&lt;li>读写锁；&lt;/li>
&lt;li>条件变量；&lt;/li>
&lt;li>原子操作。&lt;/li>
&lt;/ul>
&lt;p>以及&lt;strong>Go 语言特有的一些数据类型&lt;/strong>，即：&lt;/p>
&lt;ul>
&lt;li>单次执行小助手&lt;code>sync.Once&lt;/code>；&lt;/li>
&lt;li>临时对象池&lt;code>sync.Pool&lt;/code>；&lt;/li>
&lt;li>帮助我们实现多 goroutine 协作流程的&lt;code>sync.WaitGroup&lt;/code>、&lt;code>context.Context&lt;/code>；&lt;/li>
&lt;li>一种高效的并发安全字典&lt;code>sync.Map&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>毫不夸张地说，如果你真正地掌握了上述这些知识，那么就已经获得了 Go 语言编程的精髓。&lt;/p>
&lt;p>在这之后，你再去研读 Go 语言标准库和那些优秀第三方库中的代码的时候，就一定会事半功倍。同时，在使用 Go 语言编写软件的时候，你肯定也会如鱼得水、游刃有余的。&lt;/p>
&lt;p>我用了大量的篇幅讲解了 Go 语言中最核心的知识点，真心希望你已经搞懂了这些内容。&lt;/p>
&lt;p>&lt;strong>在后面的日子里，我会与你一起去探究 Go 语言标准库中最常用的那些代码包，弄清它们的用法、了解它们的机理。当然了，我还会顺便讲一讲那些必备的周边知识。&lt;/strong>&lt;/p>
&lt;h2 id="前导内容-1go-语言字符编码基础">前导内容 1：Go 语言字符编码基础&lt;/h2>
&lt;p>首先，让我们来关注字符编码方面的问题。这应该是在计算机软件领域中非常基础的一个问题了。&lt;/p>
&lt;p>我在前面说过，Go 语言中的标识符可以包含&amp;quot;任何 Unicode 编码可以表示的字母字符&amp;quot;。我还说过，虽然我们可以直接把一个整数值转换为一个&lt;code>string&lt;/code>类型的值。&lt;/p>
&lt;p>但是，被转换的整数值应该可以代表一个有效的 Unicode 代码点，否则转换的结果就将会是&lt;code>&amp;quot;�&amp;quot;&lt;/code>，即：一个仅由高亮的问号组成的字符串值。&lt;/p>
&lt;p>另外，当一个&lt;code>string&lt;/code>类型的值被转换为&lt;code>[]rune&lt;/code>类型值的时候，其中的字符串会被拆分成一个一个的 Unicode 字符。&lt;/p>
&lt;p>显然，Go 语言采用的字符编码方案从属于 Unicode 编码规范。更确切地说，Go 语言的代码正是由 Unicode 字符组成的。Go 语言的所有源代码，都必须按照 Unicode 编码规范中的 UTF-8 编码格式进行编码。&lt;/p>
&lt;p>换句话说，Go 语言的源码文件必须使用 UTF-8 编码格式进行存储。如果源码文件中出现了非 UTF-8 编码的字符，那么在构建、安装以及运行的时候，go 命令就会报告错误&amp;quot;illegal UTF-8 encoding&amp;quot;。&lt;/p>
&lt;p>在这里，我们首先要对 Unicode 编码规范有所了解。不过，在讲述它之前，我先来简要地介绍一下 ASCII 编码。&lt;/p>
&lt;h3 id="前导内容-2-ascii-编码">前导内容 2： ASCII 编码&lt;/h3>
&lt;p>ASCII 是英文&amp;quot;American Standard Code for Information Interchange&amp;quot;的缩写，中文译为美国信息交换标准代码。它是由美国国家标准学会（ANSI）制定的单字节字符编码方案，可用于基于文本的数据交换。&lt;/p>
&lt;p>它最初是美国的国家标准，后又被国际标准化组织（ISO）定为国际标准，称为 ISO 646 标准，并适用于所有的拉丁文字字母。&lt;/p>
&lt;p>ASCII 编码方案使用单个字节（byte）的二进制数来编码一个字符。标准的 ASCII 编码用一个字节的最高比特（bit）位作为奇偶校验位，而扩展的 ASCII 编码则将此位也用于表示字符。ASCII 编码支持的可打印字符和控制字符的集合也被叫做 ASCII 编码集。&lt;/p>
&lt;p>我们所说的 Unicode 编码规范，实际上是另一个更加通用的、针对书面字符和文本的字符编码标准。它为世界上现存的所有自然语言中的每一个字符，都设定了一个唯一的二进制编码。&lt;/p>
&lt;p>它定义了不同自然语言的文本数据在国际间交换的统一方式，并为全球化软件创建了一个重要的基础。&lt;/p>
&lt;p>Unicode 编码规范以 ASCII 编码集为出发点，并突破了 ASCII 只能对拉丁字母进行编码的限制。它不但提供了可以对世界上超过百万的字符进行编码的能力，还支持所有已知的转义序列和控制代码。&lt;/p>
&lt;p>我们都知道，在计算机系统的内部，抽象的字符会被编码为整数。这些整数的范围被称为代码空间。在代码空间之内，每一个特定的整数都被称为一个代码点。&lt;/p>
&lt;p>一个受支持的抽象字符会被映射并分配给某个特定的代码点，反过来讲，一个代码点总是可以被看成一个被编码的字符。&lt;/p>
&lt;p>Unicode 编码规范通常使用十六进制表示法来表示 Unicode 代码点的整数值，并使用&amp;quot;U+&amp;ldquo;作为前缀。比如，英文字母字符&amp;quot;a&amp;quot;的 Unicode 代码点是 U+0061。在 Unicode 编码规范中，一个字符能且只能由与它对应的那个代码点表示。&lt;/p>
&lt;p>Unicode 编码规范现在的最新版本是 11.0，并会于 2019 年 3 月发布 12.0 版本。而 Go 语言从 1.10 版本开始，已经对 Unicode 的 10.0 版本提供了全面的支持。对于绝大多数的应用场景来说，这已经完全够用了。&lt;/p>
&lt;p>Unicode 编码规范提供了三种不同的编码格式，即：UTF-8、UTF-16 和 UTF-32。其中的 UTF 是 UCS Transformation Format 的缩写。而 UCS 又是 Universal Character Set 的缩写，但也可以代表 Unicode Character Set。所以，UTF 也可以被翻译为 Unicode 转换格式。它代表的是字符与字节序列之间的转换方式。&lt;/p>
&lt;p>在这几种编码格式的名称中，&amp;rdquo;-&amp;ldquo;右边的整数的含义是，以多少个比特位作为一个编码单元。以 UTF-8 为例，它会以 8 个比特，也就是一个字节，作为一个编码单元。并且，它与标准的 ASCII 编码是完全兼容的。也就是说，在 [0x00, 0x7F] 的范围内，这两种编码表示的字符都是相同的。这也是 UTF-8 编码格式的一个巨大优势。&lt;/p>
&lt;p>UTF-8 是一种可变宽的编码方案。换句话说，它会用一个或多个字节的二进制数来表示某个字符，最多使用四个字节。比如，对于一个英文字符，它仅用一个字节的二进制数就可以表示，而对于一个中文字符，它需要使用三个字节才能够表示。不论怎样，一个受支持的字符总是可以由 UTF-8 编码为一个字节序列。以下会简称后者为 UTF-8 编码值。&lt;/p>
&lt;p>现在，在你初步地了解了这些知识之后，请认真地思考并回答下面的问题。别担心，我会在后面进一步阐述 Unicode、UTF-8 以及 Go 语言对它们的运用。&lt;/p>
&lt;p>&lt;strong>问题：一个&lt;code>string&lt;/code>类型的值在底层是怎样被表达的？&lt;/strong>&lt;/p>
&lt;p>&lt;strong>典型回答&lt;/strong> 是在底层，一个&lt;code>string&lt;/code>类型的值是由一系列相对应的 Unicode 代码点的 UTF-8 编码值来表达的。&lt;/p>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>在 Go 语言中，一个&lt;code>string&lt;/code>类型的值既可以被拆分为一个包含多个字符的序列，也可以被拆分为一个包含多个字节的序列。&lt;/p>
&lt;p>前者可以由一个以&lt;code>rune&lt;/code>为元素类型的切片来表示，而后者则可以由一个以&lt;code>byte&lt;/code>为元素类型的切片代表。&lt;/p>
&lt;p>&lt;code>rune&lt;/code>是 Go 语言特有的一个基本数据类型，它的一个值就代表一个字符，即：一个 Unicode 字符。&lt;/p>
&lt;p>比如，&lt;code>'G'&lt;/code>、&lt;code>'o'&lt;/code>、&lt;code>'爱'&lt;/code>、&lt;code>'好'&lt;/code>、&lt;code>'者'&lt;/code>代表的就都是一个 Unicode 字符。&lt;/p>
&lt;p>我们已经知道，UTF-8 编码方案会把一个 Unicode 字符编码为一个长度在 [1, 4] 范围内的字节序列。所以，一个&lt;code>rune&lt;/code>类型的值也可以由一个或多个字节来代表。&lt;/p>
&lt;pre>&lt;code>type rune = int32
&lt;/code>&lt;/pre>
&lt;p>根据&lt;code>rune&lt;/code>类型的声明可知，它实际上就是&lt;code>int32&lt;/code>类型的一个别名类型。也就是说，一个&lt;code>rune&lt;/code>类型的值会由四个字节宽度的空间来存储。它的存储空间总是能够存下一个 UTF-8 编码值。&lt;/p>
&lt;p>一个&lt;code>rune&lt;/code>类型的值在底层其实就是一个 UTF-8 编码值。前者是（便于我们人类理解的）外部展现，后者是（便于计算机系统理解的）内在表达。&lt;/p>
&lt;p>请看下面的代码：&lt;/p>
&lt;pre>&lt;code>str := &amp;quot;Go 爱好者 &amp;quot;
fmt.Printf(&amp;quot;The string: %q\n&amp;quot;, str)
fmt.Printf(&amp;quot; =&amp;gt; runes(char): %q\n&amp;quot;, []rune(str))
fmt.Printf(&amp;quot; =&amp;gt; runes(hex): %x\n&amp;quot;, []rune(str))
fmt.Printf(&amp;quot; =&amp;gt; bytes(hex): [% x]\n&amp;quot;, []byte(str))
&lt;/code>&lt;/pre>
&lt;p>字符串值&lt;code>&amp;quot;Go爱好者&amp;quot;&lt;/code>如果被转换为&lt;code>[]rune&lt;/code>类型的值的话，其中的每一个字符（不论是英文字符还是中文字符）就都会独立成为一个&lt;code>rune&lt;/code>类型的元素值。因此，这段代码打印出的第二行内容就会如下所示：&lt;/p>
&lt;pre>&lt;code> =&amp;gt; runes(char): ['G' 'o' '爱' '好' '者']
&lt;/code>&lt;/pre>
&lt;p>又由于，每个&lt;code>rune&lt;/code>类型的值在底层都是由一个 UTF-8 编码值来表达的，所以我们可以换一种方式来展现这个字符序列：&lt;/p>
&lt;pre>&lt;code> =&amp;gt; runes(hex): [47 6f 7231 597d 8005]
&lt;/code>&lt;/pre>
&lt;p>可以看到，五个十六进制数与五个字符相对应。很明显，前两个十六进制数&lt;code>47&lt;/code>和&lt;code>6f&lt;/code>代表的整数都比较小，它们分别表示字符&lt;code>'G'&lt;/code>和&lt;code>'o'&lt;/code>。&lt;/p>
&lt;p>因为它们都是英文字符，所以对应的 UTF-8 编码值用一个字节表达就足够了。一个字节的编码值被转换为整数之后，不会大到哪里去。&lt;/p>
&lt;p>而后三个十六进制数&lt;code>7231&lt;/code>、&lt;code>597d&lt;/code>和&lt;code>8005&lt;/code>都相对较大，它们分别表示中文字符&lt;code>'爱'&lt;/code>、&lt;code>'好'&lt;/code>和&lt;code>'者'&lt;/code>。&lt;/p>
&lt;p>这些中文字符对应的 UTF-8 编码值，都需要使用三个字节来表达。所以，这三个数就是把对应的三个字节的编码值，转换为整数后得到的结果。&lt;/p>
&lt;p>我们还可以进一步地拆分，把每个字符的 UTF-8 编码值都拆成相应的字节序列。上述代码中的第五行就是这么做的。它会得到如下的输出：&lt;/p>
&lt;pre>&lt;code> =&amp;gt; bytes(hex): [47 6f e7 88 b1 e5 a5 bd e8 80 85]
&lt;/code>&lt;/pre>
&lt;p>这里得到的字节切片比前面的字符切片明显长了很多。这正是因为一个中文字符的 UTF-8 编码值需要用三个字节来表达。&lt;/p>
&lt;p>这个字节切片的前两个元素值与字符切片的前两个元素值是一致的，而在这之后，前者的每三个元素值才对应字符切片中的一个元素值。&lt;/p>
&lt;p>注意，对于一个多字节的 UTF-8 编码值来说，我们可以把它当做一个整体转换为单一的整数，也可以先把它拆成字节序列，再把每个字节分别转换为一个整数，从而得到多个整数。&lt;/p>
&lt;p>这两种表示法展现出来的内容往往会很不一样。比如，对于中文字符&lt;code>'爱'&lt;/code>来说，它的 UTF-8 编码值可以展现为单一的整数&lt;code>7231&lt;/code>，也可以展现为三个整数，即：&lt;code>e7&lt;/code>、&lt;code>88&lt;/code>和&lt;code>b1&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/0d/85/0d8dac40ccb2972dbceef33d03741085.png" alt="">&lt;br>
（字符串值的底层表示）&lt;/p>
&lt;p>总之，一个&lt;code>string&lt;/code>类型的值会由若干个 Unicode 字符组成，每个 Unicode 字符都可以由一个&lt;code>rune&lt;/code>类型的值来承载。&lt;/p>
&lt;p>这些字符在底层都会被转换为 UTF-8 编码值，而这些 UTF-8 编码值又会以字节序列的形式表达和存储。因此，一个&lt;code>string&lt;/code>类型的值在底层就是一个能够表达若干个 UTF-8 编码值的字节序列。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;p>&lt;strong>问题 1：使用带有&lt;code>range&lt;/code>子句的&lt;code>for&lt;/code>语句遍历字符串值的时候应该注意什么？&lt;/strong>&lt;/p>
&lt;p>带有&lt;code>range&lt;/code>子句的&lt;code>for&lt;/code>语句会先把被遍历的字符串值拆成一个字节序列，然后再试图找出这个字节序列中包含的每一个 UTF-8 编码值，或者说每一个 Unicode 字符。&lt;/p>
&lt;p>这样的&lt;code>for&lt;/code>语句可以为两个迭代变量赋值。如果存在两个迭代变量，那么赋给第一个变量的值，就将会是当前字节序列中的某个 UTF-8 编码值的第一个字节所对应的那个索引值。&lt;/p>
&lt;p>而赋给第二个变量的值，则是这个 UTF-8 编码值代表的那个 Unicode 字符，其类型会是&lt;code>rune&lt;/code>。&lt;/p>
&lt;p>例如，有这么几行代码：&lt;/p>
&lt;pre>&lt;code>str := &amp;quot;Go 爱好者 &amp;quot;
for i, c := range str {
fmt.Printf(&amp;quot;%d: %q [% x]\n&amp;quot;, i, c, []byte(string(c)))
}
&lt;/code>&lt;/pre>
&lt;p>这里被遍历的字符串值是&lt;code>&amp;quot;Go爱好者&amp;quot;&lt;/code>。在每次迭代的时候，这段代码都会打印出两个迭代变量的值，以及第二个值的字节序列形式。完整的打印内容如下：&lt;/p>
&lt;pre>&lt;code>0: 'G' [47]
1: 'o' [6f]
2: '爱' [e7 88 b1]
5: '好' [e5 a5 bd]
8: '者' [e8 80 85]
&lt;/code>&lt;/pre>
&lt;p>第一行内容中的关键信息有&lt;code>0&lt;/code>、&lt;code>'G'&lt;/code>和&lt;code>[47]&lt;/code>。这是由于这个字符串值中的第一个 Unicode 字符是&lt;code>'G'&lt;/code>。该字符是一个单字节字符，并且由相应的字节序列中的第一个字节表达。这个字节的十六进制表示为&lt;code>47&lt;/code>。&lt;/p>
&lt;p>第二行展示的内容与之类似，即：第二个 Unicode 字符是&lt;code>'o'&lt;/code>，由字节序列中的第二个字节表达，其十六进制表示为&lt;code>6f&lt;/code>。&lt;/p>
&lt;p>再往下看，第三行展示的是&lt;code>'爱'&lt;/code>，也是第三个 Unicode 字符。因为它是一个中文字符，所以由字节序列中的第三、四、五个字节共同表达，其十六进制表示也不再是单一的整数，而是&lt;code>e7&lt;/code>、&lt;code>88&lt;/code>和&lt;code>b1&lt;/code>组成的序列。&lt;/p>
&lt;p>下面要注意了，正是因为&lt;code>'爱'&lt;/code>是由三个字节共同表达的，所以第四个 Unicode 字符&lt;code>'好'&lt;/code>对应的索引值并不是&lt;code>3&lt;/code>，而是&lt;code>2&lt;/code>加&lt;code>3&lt;/code>后得到的&lt;code>5&lt;/code>。&lt;/p>
&lt;p>这里的&lt;code>2&lt;/code>代表的是&lt;code>'爱'&lt;/code>对应的索引值，而&lt;code>3&lt;/code>代表的则是&lt;code>'爱'&lt;/code>对应的 UTF-8 编码值的宽度。对于这个字符串值中的最后一个字符&lt;code>'者'&lt;/code>来说也是类似的，因此，它对应的索引值是&lt;code>8&lt;/code>。&lt;/p>
&lt;p>由此可以看出，这样的&lt;code>for&lt;/code>语句可以逐一地迭代出字符串值里的每个 Unicode 字符。但是，相邻的 Unicode 字符的索引值并不一定是连续的。这取决于前一个 Unicode 字符是否为单字节字符。&lt;/p>
&lt;p>正因为如此，如果我们想得到其中某个 Unicode 字符对应的 UTF-8 编码值的宽度，就可以用下一个字符的索引值减去当前字符的索引值。&lt;/p>
&lt;p>初学者可能会对&lt;code>for&lt;/code>语句的这种行为感到困惑，因为它给予两个迭代变量的值看起来并不总是对应的。不过，一旦我们了解了它的内在机制就会拨云见日、豁然开朗。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>我们今天把目光聚焦在了 Unicode 编码规范、UTF-8 编码格式，以及 Go 语言对字符串和字符的相关处理方式上。&lt;/p>
&lt;p>Go 语言的代码是由 Unicode 字符组成的，它们都必须由 Unicode 编码规范中的 UTF-8 编码格式进行编码并存储，否则就会导致 go 命令的报错。&lt;/p>
&lt;p>Unicode 编码规范中的编码格式定义的是：字符与字节序列之间的转换方式。其中的 UTF-8 是一种可变宽的编码方案。&lt;/p>
&lt;p>它会用一个或多个字节的二进制数来表示某个字符，最多使用四个字节。一个受支持的字符，总是可以由 UTF-8 编码为一个字节序列，后者也可以被称为 UTF-8 编码值。&lt;/p>
&lt;p>Go 语言中的一个&lt;code>string&lt;/code>类型值会由若干个 Unicode 字符组成，每个 Unicode 字符都可以由一个&lt;code>rune&lt;/code>类型的值来承载。&lt;/p>
&lt;p>这些字符在底层都会被转换为 UTF-8 编码值，而这些 UTF-8 编码值又会以字节序列的形式表达和存储。因此，一个&lt;code>string&lt;/code>类型的值在底层就是一个能够表达若干个 UTF-8 编码值的字节序列。&lt;/p>
&lt;p>初学者可能会对带有&lt;code>range&lt;/code>子句的&lt;code>for&lt;/code>语句遍历字符串值的行为感到困惑，因为它给予两个迭代变量的值看起来并不总是对应的。但事实并非如此。&lt;/p>
&lt;p>这样的&lt;code>for&lt;/code>语句会先把被遍历的字符串值拆成一个字节序列，然后再试图找出这个字节序列中包含的每一个 UTF-8 编码值，或者说每一个 Unicode 字符。&lt;/p>
&lt;p>相邻的 Unicode 字符的索引值并不一定是连续的。这取决于前一个 Unicode 字符是否为单字节字符。一旦我们清楚了这些内在机制就不会再困惑了。&lt;/p>
&lt;p>对于 Go 语言来说，Unicode 编码规范和 UTF-8 编码格式算是基础之一了。我们应该了解到它们对 Go 语言的重要性。这对于正确理解 Go 语言中的相关数据类型以及日后的相关程序编写都会很有好处。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>今天的思考题是：判断一个 Unicode 字符是否为单字节字符通常有几种方式？&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 37丨strings包与字符串操作</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/37%E4%B8%A8strings%E5%8C%85%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/37%E4%B8%A8strings%E5%8C%85%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</guid><description>
&lt;p>在上一篇文章中，我介绍了 Go 语言与 Unicode 编码规范、UTF-8 编码格式的渊源及运用。&lt;/p>
&lt;p>Go 语言不但拥有可以独立代表 Unicode 字符的类型&lt;code>rune&lt;/code>，而且还有可以对字符串值进行 Unicode 字符拆分的&lt;code>for&lt;/code>语句。&lt;/p>
&lt;p>除此之外，标准库中的&lt;code>unicode&lt;/code>包及其子包还提供了很多的函数和数据类型，可以帮助我们解析各种内容中的 Unicode 字符。&lt;/p>
&lt;p>这些程序实体都很好用，也都很简单明了，而且有效地隐藏了 Unicode 编码规范中的一些复杂的细节。我就不在这里对它们进行专门的讲解了。&lt;/p>
&lt;p>我们今天主要来说一说标准库中的&lt;code>strings&lt;/code>代码包。这个代码包也用到了不少&lt;code>unicode&lt;/code>包和&lt;code>unicode/utf8&lt;/code>包中的程序实体。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>比如，&lt;code>strings.Builder&lt;/code>类型的&lt;code>WriteRune&lt;/code>方法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>又比如，&lt;code>strings.Reader&lt;/code>类型的&lt;code>ReadRune&lt;/code>方法，等等。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>下面这个问题就是针对&lt;code>strings.Builder&lt;/code>类型的。&lt;strong>我们今天的问题是：与&lt;code>string&lt;/code>值相比，&lt;code>strings.Builder&lt;/code>类型的值有哪些优势？&lt;/strong>&lt;/p>
&lt;p>这里的&lt;strong>典型回答&lt;/strong>是这样的。&lt;/p>
&lt;p>&lt;code>strings.Builder&lt;/code>类型的值（以下简称&lt;code>Builder&lt;/code>值）的优势有下面的三种：&lt;/p>
&lt;ul>
&lt;li>已存在的内容不可变，但可以拼接更多的内容；&lt;/li>
&lt;li>减少了内存分配和内容拷贝的次数；&lt;/li>
&lt;li>可将内容重置，可重用值。&lt;/li>
&lt;/ul>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>&lt;strong>先来说说&lt;code>string&lt;/code>类型。&lt;/strong> 我们都知道，在 Go 语言中，&lt;code>string&lt;/code>类型的值是不可变的。 如果我们想获得一个不一样的字符串，那么就只能基于原字符串进行裁剪、拼接等操作，从而生成一个新的字符串。&lt;/p>
&lt;ul>
&lt;li>裁剪操作可以使用切片表达式；&lt;/li>
&lt;li>拼接操作可以用操作符&lt;code>+&lt;/code>实现。&lt;/li>
&lt;/ul>
&lt;p>在底层，一个&lt;code>string&lt;/code>值的内容会被存储到一块连续的内存空间中。同时，这块内存容纳的字节数量也会被记录下来，并用于表示该&lt;code>string&lt;/code>值的长度。&lt;/p>
&lt;p>你可以把这块内存的内容看成一个字节数组，而相应的&lt;code>string&lt;/code>值则包含了指向字节数组头部的指针值。如此一来，我们在一个&lt;code>string&lt;/code>值上应用切片表达式，就相当于在对其底层的字节数组做切片。&lt;/p>
&lt;p>另外，我们在进行字符串拼接的时候，Go 语言会把所有被拼接的字符串依次拷贝到一个崭新且足够大的连续内存空间中，并把持有相应指针值的&lt;code>string&lt;/code>值作为结果返回。&lt;/p>
&lt;p>显然，当程序中存在过多的字符串拼接操作的时候，会对内存的分配产生非常大的压力。&lt;/p>
&lt;p>注意，虽然&lt;code>string&lt;/code>值在内部持有一个指针值，但其类型仍然属于值类型。不过，由于&lt;code>string&lt;/code>值的不可变，其中的指针值也为内存空间的节省做出了贡献。&lt;/p>
&lt;p>更具体地说，一个&lt;code>string&lt;/code>值会在底层与它的所有副本共用同一个字节数组。由于这里的字节数组永远不会被改变，所以这样做是绝对安全的。&lt;/p>
&lt;p>&lt;strong>与&lt;code>string&lt;/code>值相比，&lt;code>Builder&lt;/code>值的优势其实主要体现在字符串拼接方面。&lt;/strong>&lt;/p>
&lt;p>&lt;code>Builder&lt;/code>值中有一个用于承载内容的容器（以下简称内容容器）。它是一个以&lt;code>byte&lt;/code>为元素类型的切片（以下简称字节切片）。&lt;/p>
&lt;p>由于这样的字节切片的底层数组就是一个字节数组，所以我们可以说它与&lt;code>string&lt;/code>值存储内容的方式是一样的。&lt;/p>
&lt;p>实际上，它们都是通过一个&lt;code>unsafe.Pointer&lt;/code>类型的字段来持有那个指向了底层字节数组的指针值的。&lt;/p>
&lt;p>正是因为这样的内部构造，&lt;code>Builder&lt;/code>值同样拥有高效利用内存的前提条件。虽然，对于字节切片本身来说，它包含的任何元素值都可以被修改，但是&lt;code>Builder&lt;/code>值并不允许这样做，其中的内容只能够被拼接或者完全重置。&lt;/p>
&lt;p>这就意味着，已存在于&lt;code>Builder&lt;/code>值中的内容是不可变的。因此，我们可以利用&lt;code>Builder&lt;/code>值提供的方法拼接更多的内容，而丝毫不用担心这些方法会影响到已存在的内容。&lt;/p>
&lt;blockquote>
&lt;p>这里所说的方法指的是，&lt;code>Builder&lt;/code>值拥有的一系列指针方法，包括：&lt;code>Write&lt;/code>、&lt;code>WriteByte&lt;/code>、&lt;code>WriteRune&lt;/code>和&lt;code>WriteString&lt;/code>。我们可以把它们统称为拼接方法。&lt;/p>
&lt;/blockquote>
&lt;p>我们可以通过调用上述方法把新的内容拼接到已存在的内容的尾部（也就是右边）。这时，如有必要，&lt;code>Builder&lt;/code>值会自动地对自身的内容容器进行扩容。这里的自动扩容策略与切片的扩容策略一致。&lt;/p>
&lt;p>换句话说，我们在向&lt;code>Builder&lt;/code>值拼接内容的时候并不一定会引起扩容。只要内容容器的容量够用，扩容就不会进行，针对于此的内存分配也不会发生。同时，只要没有扩容，&lt;code>Builder&lt;/code>值中已存在的内容就不会再被拷贝。&lt;/p>
&lt;p>除了&lt;code>Builder&lt;/code>值的自动扩容，我们还可以选择手动扩容，这通过调用&lt;code>Builder&lt;/code>值的&lt;code>Grow&lt;/code>方法就可以做到。&lt;code>Grow&lt;/code>方法也可以被称为扩容方法，它接受一个&lt;code>int&lt;/code>类型的参数&lt;code>n&lt;/code>，该参数用于代表将要扩充的字节数量。&lt;/p>
&lt;p>如有必要，&lt;code>Grow&lt;/code>方法会把其所属值中内容容器的容量增加&lt;code>n&lt;/code>个字节。更具体地讲，它会生成一个字节切片作为新的内容容器，该切片的容量会是原容器容量的二倍再加上&lt;code>n&lt;/code>。之后，它会把原容器中的所有字节全部拷贝到新容器中。&lt;/p>
&lt;pre>&lt;code>var builder1 strings.Builder
// 省略若干代码。
fmt.Println(&amp;quot;Grow the builder ...&amp;quot;)
builder1.Grow(10)
fmt.Printf(&amp;quot;The length of contents in the builder is %d.\n&amp;quot;, builder1.Len())
&lt;/code>&lt;/pre>
&lt;p>当然，&lt;code>Grow&lt;/code>方法还可能什么都不做。这种情况的前提条件是：当前的内容容器中的未用容量已经够用了，即：未用容量大于或等于&lt;code>n&lt;/code>。这里的前提条件与前面提到的自动扩容策略中的前提条件是类似的。&lt;/p>
&lt;pre>&lt;code>fmt.Println(&amp;quot;Reset the builder ...&amp;quot;)
builder1.Reset()
fmt.Printf(&amp;quot;The third output(%d):\n%q\n&amp;quot;, builder1.Len(), builder1.String())
&lt;/code>&lt;/pre>
&lt;p>最后，&lt;code>Builder&lt;/code>值是可以被重用的。通过调用它的&lt;code>Reset&lt;/code>方法，我们可以让&lt;code>Builder&lt;/code>值重新回到零值状态，就像它从未被使用过那样。&lt;/p>
&lt;p>一旦被重用，&lt;code>Builder&lt;/code>值中原有的内容容器会被直接丢弃。之后，它和其中的所有内容，将会被 Go 语言的垃圾回收器标记并回收掉。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;h3 id="问题-1stringsbuilder类型在使用上有约束吗">问题 1：&lt;code>strings.Builder&lt;/code>类型在使用上有约束吗？&lt;/h3>
&lt;p>答案是：有约束，概括如下：&lt;/p>
&lt;ul>
&lt;li>在已被真正使用后就不可再被复制；&lt;/li>
&lt;li>由于其内容不是完全不可变的，所以需要使用方自行解决操作冲突和并发安全问题。&lt;/li>
&lt;/ul>
&lt;p>我们只要调用了&lt;code>Builder&lt;/code>值的拼接方法或扩容方法，就意味着开始真正使用它了。显而易见，这些方法都会改变其所属值中的内容容器的状态。&lt;/p>
&lt;p>一旦调用了它们，我们就不能再以任何的方式对其所属值进行复制了。否则，只要在任何副本上调用上述方法就都会引发 panic。&lt;/p>
&lt;p>这种 panic 会告诉我们，这样的使用方式是并不合法的，因为这里的&lt;code>Builder&lt;/code>值是副本而不是原值。顺便说一句，这里所说的复制方式，包括但不限于在函数间传递值、通过通道传递值、把值赋予变量等等。&lt;/p>
&lt;pre>&lt;code>var builder1 strings.Builder
builder1.Grow(1)
builder3 := builder1
//builder3.Grow(1) // 这里会引发 panic。
_ = builder3
&lt;/code>&lt;/pre>
&lt;p>虽然这个约束非常严格，但是如果我们仔细思考一下的话，就会发现它还是有好处的。&lt;/p>
&lt;p>正是由于已使用的&lt;code>Builder&lt;/code>值不能再被复制，所以肯定不会出现多个&lt;code>Builder&lt;/code>值中的内容容器（也就是那个字节切片）共用一个底层字节数组的情况。这样也就避免了多个同源的&lt;code>Builder&lt;/code>值在拼接内容时可能产生的冲突问题。&lt;/p>
&lt;p>不过，虽然已使用的&lt;code>Builder&lt;/code>值不能再被复制，但是它的指针值却可以。无论什么时候，我们都可以通过任何方式复制这样的指针值。注意，这样的指针值指向的都会是同一个&lt;code>Builder&lt;/code>值。&lt;/p>
&lt;pre>&lt;code>f2 := func(bp *strings.Builder) {
(*bp).Grow(1) // 这里虽然不会引发 panic，但不是并发安全的。
builder4 := *bp
//builder4.Grow(1) // 这里会引发 panic。
_ = builder4
}
f2(&amp;amp;builder1)
&lt;/code>&lt;/pre>
&lt;p>正因为如此，这里就产生了一个问题，即：如果&lt;code>Builder&lt;/code>值被多方同时操作，那么其中的内容就很可能会产生混乱。这就是我们所说的操作冲突和并发安全问题。&lt;/p>
&lt;p>&lt;code>Builder&lt;/code>值自己是无法解决这些问题的。所以，我们在通过传递其指针值共享&lt;code>Builder&lt;/code>值的时候，一定要确保各方对它的使用是正确、有序的，并且是并发安全的；而最彻底的解决方案是，绝不共享&lt;code>Builder&lt;/code>值以及它的指针值。&lt;/p>
&lt;p>我们可以在各处分别声明一个&lt;code>Builder&lt;/code>值来使用，也可以先声明一个&lt;code>Builder&lt;/code>值，然后在真正使用它之前，便将它的副本传到各处。另外，我们还可以先使用再传递，只要在传递之前调用它的&lt;code>Reset&lt;/code>方法即可。&lt;/p>
&lt;pre>&lt;code>builder1.Reset()
builder5 := builder1
builder5.Grow(1) // 这里不会引发 panic。
&lt;/code>&lt;/pre>
&lt;p>总之，关于复制&lt;code>Builder&lt;/code>值的约束是有意义的，也是很有必要的。虽然我们仍然可以通过某些方式共享&lt;code>Builder&lt;/code>值，但最好还是不要以身犯险，&amp;ldquo;各自为政&amp;quot;是最好的解决方案。不过，对于处在零值状态的&lt;code>Builder&lt;/code>值，复制不会有任何问题。&lt;/p>
&lt;h3 id="问题-2为什么说stringsreader类型的值可以高效地读取字符串">问题 2：为什么说&lt;code>strings.Reader&lt;/code>类型的值可以高效地读取字符串？&lt;/h3>
&lt;p>与&lt;code>strings.Builder&lt;/code>类型恰恰相反，&lt;code>strings.Reader&lt;/code>类型是为了高效读取字符串而存在的。后者的高效主要体现在它对字符串的读取机制上，它封装了很多用于在&lt;code>string&lt;/code>值上读取内容的最佳实践。&lt;/p>
&lt;p>&lt;code>strings.Reader&lt;/code>类型的值（以下简称&lt;code>Reader&lt;/code>值）可以让我们很方便地读取一个字符串中的内容。在读取的过程中，&lt;code>Reader&lt;/code>值会保存已读取的字节的计数（以下简称已读计数）。&lt;/p>
&lt;p>已读计数也代表着下一次读取的起始索引位置。&lt;code>Reader&lt;/code>值正是依靠这样一个计数，以及针对字符串值的切片表达式，从而实现快速读取。&lt;/p>
&lt;p>此外，这个已读计数也是读取回退和位置设定时的重要依据。虽然它属于&lt;code>Reader&lt;/code>值的内部结构，但我们还是可以通过该值的&lt;code>Len&lt;/code>方法和&lt;code>Size&lt;/code>把它计算出来的。代码如下：&lt;/p>
&lt;pre>&lt;code>var reader1 strings.Reader
// 省略若干代码。
readingIndex := reader1.Size() - int64(reader1.Len()) // 计算出的已读计数。
&lt;/code>&lt;/pre>
&lt;p>&lt;code>Reader&lt;/code>值拥有的大部分用于读取的方法都会及时地更新已读计数。比如，&lt;code>ReadByte&lt;/code>方法会在读取成功后将这个计数的值加&lt;code>1&lt;/code>。&lt;/p>
&lt;p>又比如，&lt;code>ReadRune&lt;/code>方法在读取成功之后，会把被读取的字符所占用的字节数作为计数的增量。&lt;/p>
&lt;p>不过，&lt;code>ReadAt&lt;/code>方法算是一个例外。它既不会依据已读计数进行读取，也不会在读取后更新它。正因为如此，这个方法可以自由地读取其所属的&lt;code>Reader&lt;/code>值中的任何内容。&lt;/p>
&lt;p>除此之外，&lt;code>Reader&lt;/code>值的&lt;code>Seek&lt;/code>方法也会更新该值的已读计数。实际上，这个&lt;code>Seek&lt;/code>方法的主要作用正是设定下一次读取的起始索引位置。&lt;/p>
&lt;p>另外，如果我们把常量&lt;code>io.SeekCurrent&lt;/code>的值作为第二个参数值传给该方法，那么它还会依据当前的已读计数，以及第一个参数&lt;code>offset&lt;/code>的值来计算新的计数值。&lt;/p>
&lt;p>由于&lt;code>Seek&lt;/code>方法会返回新的计数值，所以我们可以很容易地验证这一点。比如像下面这样：&lt;/p>
&lt;pre>&lt;code>offset2 := int64(17)
expectedIndex := reader1.Size() - int64(reader1.Len()) + offset2
fmt.Printf(&amp;quot;Seek with offset %d and whence %d ...\n&amp;quot;, offset2, io.SeekCurrent)
readingIndex, _ := reader1.Seek(offset2, io.SeekCurrent)
fmt.Printf(&amp;quot;The reading index in reader: %d (returned by Seek)\n&amp;quot;, readingIndex)
fmt.Printf(&amp;quot;The reading index in reader: %d (computed by me)\n&amp;quot;, expectedIndex)
&lt;/code>&lt;/pre>
&lt;p>综上所述，&lt;code>Reader&lt;/code>值实现高效读取的关键就在于它内部的已读计数。计数的值就代表着下一次读取的起始索引位置。它可以很容易地被计算出来。&lt;code>Reader&lt;/code>值的&lt;code>Seek&lt;/code>方法可以直接设定该值中的已读计数值。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>今天，我们主要讨论了&lt;code>strings&lt;/code>代码包中的两个重要类型，即：&lt;code>Builder&lt;/code>和&lt;code>Reader&lt;/code>。前者用于构建字符串，而后者则用于读取字符串。&lt;/p>
&lt;p>与&lt;code>string&lt;/code>值相比，&lt;code>Builder&lt;/code>值的优势主要体现在字符串拼接方面。它可以在保证已存在的内容不变的前提下，拼接更多的内容，并且会在拼接的过程中，尽量减少内存分配和内容拷贝的次数。&lt;/p>
&lt;p>不过，这类值在使用上也是有约束的。它在被真正使用之后就不能再被复制了，否则就会引发 panic。虽然这个约束很严格，但是也可以带来一定的好处。它可以有效地避免一些操作冲突。虽然我们可以通过一些手段（比如传递它的指针值）绕过这个约束，但这是弊大于利的。最好的解决方案就是分别声明、分开使用、互不干涉。&lt;/p>
&lt;p>&lt;code>Reader&lt;/code>值可以让我们很方便地读取一个字符串中的内容。它的高效主要体现在它对字符串的读取机制上。在读取的过程中，&lt;code>Reader&lt;/code>值会保存已读取的字节的计数，也称已读计数。&lt;/p>
&lt;p>这个计数代表着下一次读取的起始索引位置，同时也是高效读取的关键所在。我们可以利用这类值的&lt;code>Len&lt;/code>方法和&lt;code>Size&lt;/code>方法，计算出其中的已读计数的值。有了它，我们就可以更加灵活地进行字符串读取了。&lt;/p>
&lt;p>我只在本文介绍了上述两个数据类型，但并不意味着&lt;code>strings&lt;/code>包中有用的程序实体只有这两个。实际上，&lt;code>strings&lt;/code>包还提供了大量的函数。比如：&lt;/p>
&lt;pre>&lt;code>`Count`、`IndexRune`、`Map`、`Replace`、`SplitN`、`Trim`，等等。
&lt;/code>&lt;/pre>
&lt;p>它们都是非常易用和高效的。你可以去看看它们的源码，也许会因此有所感悟。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>今天的思考题是：&lt;code>*strings.Builder&lt;/code>和&lt;code>*strings.Reader&lt;/code>都分别实现了哪些接口？这样做有什么好处吗？&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 38丨bytes包与字节串操作（上）</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/38%E4%B8%A8bytes%E5%8C%85%E4%B8%8E%E5%AD%97%E8%8A%82%E4%B8%B2%E6%93%8D%E4%BD%9C%E4%B8%8A/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/38%E4%B8%A8bytes%E5%8C%85%E4%B8%8E%E5%AD%97%E8%8A%82%E4%B8%B2%E6%93%8D%E4%BD%9C%E4%B8%8A/</guid><description>
&lt;p>我相信，经过上一次的学习，你已经对&lt;code>strings.Builder&lt;/code>和&lt;code>strings.Reader&lt;/code>这两个类型足够熟悉了。&lt;/p>
&lt;p>我上次还建议你去自行查阅&lt;code>strings&lt;/code>代码包中的其他程序实体。如果你认真去看了，那么肯定会对我们今天要讨论的&lt;code>bytes&lt;/code>代码包，有种似曾相识的感觉。&lt;/p>
&lt;h2 id="前导内容-bytesbuffer基础知识">前导内容： &lt;code>bytes.Buffer&lt;/code>基础知识&lt;/h2>
&lt;p>&lt;code>strings&lt;/code>包和&lt;code>bytes&lt;/code>包可以说是一对孪生兄弟，它们在 API 方面非常的相似。单从它们提供的函数的数量和功能上讲，差别可以说是微乎其微。&lt;/p>
&lt;p>&lt;strong>只不过，&lt;code>strings&lt;/code>包主要面向的是 Unicode 字符和经过 UTF-8 编码的字符串，而&lt;code>bytes&lt;/code>包面对的则主要是字节和字节切片。&lt;/strong>&lt;/p>
&lt;p>我今天会主要讲&lt;code>bytes&lt;/code>包中最有特色的类型&lt;code>Buffer&lt;/code>。顾名思义，&lt;code>bytes.Buffer&lt;/code>类型的用途主要是作为字节序列的缓冲区。&lt;/p>
&lt;p>与&lt;code>strings.Builder&lt;/code>类型一样，&lt;code>bytes.Buffer&lt;/code>也是开箱即用的。&lt;/p>
&lt;p>但不同的是，&lt;code>strings.Builder&lt;/code>只能拼接和导出字符串，而&lt;code>bytes.Buffer&lt;/code>不但可以拼接、截断其中的字节序列，以各种形式导出其中的内容，还可以顺序地读取其中的子序列。&lt;/p>
&lt;p>可以说，&lt;code>bytes.Buffer&lt;/code>是集读、写功能于一身的数据类型。当然了，这些也基本上都是作为一个缓冲区应该拥有的功能。&lt;/p>
&lt;p>在内部，&lt;code>bytes.Buffer&lt;/code>类型同样是使用字节切片作为内容容器的。并且，与&lt;code>strings.Reader&lt;/code>类型类似，&lt;code>bytes.Buffer&lt;/code>有一个&lt;code>int&lt;/code>类型的字段，用于代表已读字节的计数，可以简称为已读计数。&lt;/p>
&lt;p>不过，这里的已读计数就无法通过&lt;code>bytes.Buffer&lt;/code>提供的方法计算出来了。&lt;/p>
&lt;p>我们先来看下面的代码：&lt;/p>
&lt;pre>&lt;code>var buffer1 bytes.Buffer
contents := &amp;quot;Simple byte buffer for marshaling data.&amp;quot;
fmt.Printf(&amp;quot;Writing contents %q ...\n&amp;quot;, contents)
buffer1.WriteString(contents)
fmt.Printf(&amp;quot;The length of buffer: %d\n&amp;quot;, buffer1.Len())
fmt.Printf(&amp;quot;The capacity of buffer: %d\n&amp;quot;, buffer1.Cap())
&lt;/code>&lt;/pre>
&lt;p>我先声明了一个&lt;code>bytes.Buffer&lt;/code>类型的变量&lt;code>buffer1&lt;/code>，并写入了一个字符串。然后，我想打印出这个&lt;code>bytes.Buffer&lt;/code>类型的值（以下简称&lt;code>Buffer&lt;/code>值）的长度和容量。在运行这段代码之后，我们将会看到如下的输出：&lt;/p>
&lt;pre>&lt;code>Writing contents &amp;quot;Simple byte buffer for marshaling data.&amp;quot; ...
The length of buffer: 39
The capacity of buffer: 64
&lt;/code>&lt;/pre>
&lt;p>乍一看这没什么问题。长度&lt;code>39&lt;/code>和容量&lt;code>64&lt;/code>的含义看起来与我们已知的概念是一致的。我向缓冲区中写入了一个长度为&lt;code>39&lt;/code>的字符串，所以&lt;code>buffer1&lt;/code>的长度就是&lt;code>39&lt;/code>。&lt;/p>
&lt;p>根据切片的自动扩容策略，&lt;code>64&lt;/code>这个数字也是合理的。另外，可以想象，这时的已读计数的值应该是&lt;code>0&lt;/code>，这是因为我还没有调用任何用于读取其中内容的方法。&lt;/p>
&lt;p>可实际上，与&lt;code>strings.Reader&lt;/code>类型的&lt;code>Len&lt;/code>方法一样，&lt;code>buffer1&lt;/code>的&lt;code>Len&lt;/code>方法返回的也是内容容器中未被读取部分的长度，而不是其中已存内容的总长度（以下简称内容长度）。示例如下：&lt;/p>
&lt;pre>&lt;code>p1 := make([]byte, 7)
n, _ := buffer1.Read(p1)
fmt.Printf(&amp;quot;%d bytes were read. (call Read)\n&amp;quot;, n)
fmt.Printf(&amp;quot;The length of buffer: %d\n&amp;quot;, buffer1.Len())
fmt.Printf(&amp;quot;The capacity of buffer: %d\n&amp;quot;, buffer1.Cap())
&lt;/code>&lt;/pre>
&lt;p>当我从&lt;code>buffer1&lt;/code>中读取一部分内容，并用它们填满长度为&lt;code>7&lt;/code>的字节切片&lt;code>p1&lt;/code>之后，&lt;code>buffer1&lt;/code>的&lt;code>Len&lt;/code>方法返回的结果值也会随即发生变化。如果运行这段代码，我们会发现，这个缓冲区的长度已经变为了&lt;code>32&lt;/code>。&lt;/p>
&lt;p>另外，因为我们并没有再向该缓冲区中写入任何内容，所以它的容量会保持不变，仍是&lt;code>64&lt;/code>。&lt;/p>
&lt;p>&lt;strong>总之，在这里，你需要记住的是，&lt;code>Buffer&lt;/code>值的长度是未读内容的长度，而不是已存内容的总长度。&lt;/strong> 它与在当前值之上的读操作和写操作都有关系，并会随着这两种操作的进行而改变，它可能会变得更小，也可能会变得更大。&lt;/p>
&lt;p>而&lt;code>Buffer&lt;/code>值的容量指的是它的内容容器（也就是那个字节切片）的容量，它只与在当前值之上的写操作有关，并会随着内容的写入而不断增长。&lt;/p>
&lt;p>再说已读计数。由于&lt;code>strings.Reader&lt;/code>还有一个&lt;code>Size&lt;/code>方法可以给出内容长度的值，所以我们用内容长度减去未读部分的长度，就可以很方便地得到它的已读计数。&lt;/p>
&lt;p>然而，&lt;code>bytes.Buffer&lt;/code>类型却没有这样一个方法，它只有&lt;code>Cap&lt;/code>方法。可是&lt;code>Cap&lt;/code>方法提供的是内容容器的容量，也不是内容长度。&lt;/p>
&lt;p>并且，这里的内容容器容量在很多时候都与内容长度不相同。因此，没有了现成的计算公式，只要遇到稍微复杂些的情况，我们就很难估算出&lt;code>Buffer&lt;/code>值的已读计数。&lt;/p>
&lt;p>一旦理解了已读计数这个概念，并且能够在读写的过程中，实时地获得已读计数和内容长度的值，我们就可以很直观地了解到当前&lt;code>Buffer&lt;/code>值各种方法的行为了。不过，很可惜，这两个数字我们都无法直接拿到。&lt;/p>
&lt;p>虽然，我们无法直接得到一个&lt;code>Buffer&lt;/code>值的已读计数，并且有时候也很难估算它，但是我们绝对不能就此作罢，而应该通过研读&lt;code>bytes.Buffer&lt;/code>和文档和源码，去探究已读计数在其中起到的关键作用。&lt;/p>
&lt;p>否则，我们想用好&lt;code>bytes.Buffer&lt;/code>的意愿，恐怕就不会那么容易实现了。&lt;/p>
&lt;p>下面的这个问题，如果你认真地阅读了&lt;code>bytes.Buffer&lt;/code>的源码之后，就可以很好地回答出来。&lt;/p>
&lt;p>&lt;strong>我们今天的问题是：&lt;code>bytes.Buffer&lt;/code>类型的值记录的已读计数，在其中起到了怎样的作用？&lt;/strong>&lt;/p>
&lt;p>这道题的典型回答是这样的。&lt;/p>
&lt;p>&lt;code>bytes.Buffer&lt;/code>中的已读计数的大致功用如下所示。&lt;/p>
&lt;ol>
&lt;li>读取内容时，相应方法会依据已读计数找到未读部分，并在读取后更新计数。&lt;/li>
&lt;li>写入内容时，如需扩容，相应方法会根据已读计数实现扩容策略。&lt;/li>
&lt;li>截断内容时，相应方法截掉的是已读计数代表索引之后的未读部分。&lt;/li>
&lt;li>读回退时，相应方法需要用已读计数记录回退点。&lt;/li>
&lt;li>重置内容时，相应方法会把已读计数置为&lt;code>0&lt;/code>。&lt;/li>
&lt;li>导出内容时，相应方法只会导出已读计数代表的索引之后的未读部分。&lt;/li>
&lt;li>获取长度时，相应方法会依据已读计数和内容容器的长度，计算未读部分的长度并返回。&lt;/li>
&lt;/ol>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>通过上面的典型回答，我们已经能够体会到已读计数在&lt;code>bytes.Buffer&lt;/code>类型，及其方法中的重要性了。没错，&lt;code>bytes.Buffer&lt;/code>的绝大多数方法都用到了已读计数，而且都是非用不可。&lt;/p>
&lt;p>&lt;strong>在读取内容的时候&lt;/strong>，相应方法会先根据已读计数，判断一下内容容器中是否还有未读的内容。如果有，那么它就会从已读计数代表的索引处开始读取。&lt;/p>
&lt;p>&lt;strong>在读取完成后&lt;/strong> ，它还会及时地更新已读计数。也就是说，它会记录一下又有多少个字节被读取了。&lt;strong>这里所说的相应方法包括了所有名称以&lt;code>Read&lt;/code>开头的方法，以及&lt;code>Next&lt;/code>方法和&lt;code>WriteTo&lt;/code>方法。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>在写入内容的时候&lt;/strong>，绝大多数的相应方法都会先检查当前的内容容器，是否有足够的容量容纳新的内容。如果没有，那么它们就会对内容容器进行扩容。&lt;/p>
&lt;p>&lt;strong>在扩容的时候&lt;/strong>，方法会在必要时，依据已读计数找到未读部分，并把其中的内容拷贝到扩容后内容容器的头部位置。&lt;/p>
&lt;p>然后，方法将会把已读计数的值置为&lt;code>0&lt;/code>，以表示下一次读取需要从内容容器的第一个字节开始。&lt;strong>用于写入内容的相应方法，包括了所有名称以&lt;code>Write&lt;/code>开头的方法，以及&lt;code>ReadFrom&lt;/code>方法。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>用于截断内容的方法&lt;code>Truncate&lt;/code>，会让很多对&lt;code>bytes.Buffer&lt;/code>不太了解的程序开发者迷惑。&lt;/strong> 它会接受一个&lt;code>int&lt;/code>类型的参数，这个参数的值代表了：在截断时需要保留头部的多少个字节。&lt;/p>
&lt;p>不过，需要注意的是，这里说的头部指的并不是内容容器的头部，而是其中的未读部分的头部。头部的起始索引正是由已读计数的值表示的。因此，在这种情况下，已读计数的值再加上参数值后得到的和，就是内容容器新的总长度。&lt;/p>
&lt;p>&lt;strong>在&lt;code>bytes.Buffer&lt;/code>中，用于读回退的方法有&lt;code>UnreadByte&lt;/code>和&lt;code>UnreadRune&lt;/code>。&lt;/strong> 这两个方法分别用于回退一个字节和回退一个 Unicode 字符。调用它们一般都是为了退回在上一次被读取内容末尾的那个分隔符，或者为重新读取前一个字节或字符做准备。&lt;/p>
&lt;p>不过，退回的前提是，在调用它们之前的那一个操作必须是&amp;quot;读取&amp;quot;，并且是成功的读取，否则这些方法就只能忽略后续操作并返回一个非&lt;code>nil&lt;/code>的错误值。&lt;/p>
&lt;p>&lt;code>UnreadByte&lt;/code>方法的做法比较简单，把已读计数的值减&lt;code>1&lt;/code>就好了。而&lt;code>UnreadRune&lt;/code>方法需要从已读计数中减去的，是上一次被读取的 Unicode 字符所占用的字节数。&lt;/p>
&lt;p>这个字节数由&lt;code>bytes.Buffer&lt;/code>的另一个字段负责存储，它在这里的有效取值范围是 [1, 4]。只有&lt;code>ReadRune&lt;/code>方法才会把这个字段的值设定在此范围之内。&lt;/p>
&lt;p>由此可见，只有紧接在调用&lt;code>ReadRune&lt;/code>方法之后，对&lt;code>UnreadRune&lt;/code>方法的调用才能够成功完成。该方法明显比&lt;code>UnreadByte&lt;/code>方法的适用面更窄。&lt;/p>
&lt;p>我在前面说过，&lt;code>bytes.Buffer&lt;/code>的&lt;code>Len&lt;/code>方法返回的是内容容器中未读部分的长度，而不是其中已存内容的总长度（即：内容长度）。&lt;/p>
&lt;p>而该类型的&lt;code>Bytes&lt;/code>方法和&lt;code>String&lt;/code>方法的行为，与&lt;code>Len&lt;/code>方法是保持一致的。前两个方法只会去访问未读部分中的内容，并返回相应的结果值。&lt;/p>
&lt;p>在我们剖析了所有的相关方法之后，可以这样来总结：在已读计数代表的索引之前的那些内容，永远都是已经被读过的，它们几乎没有机会再次被读取。&lt;/p>
&lt;p>不过，这些已读内容所在的内存空间可能会被存入新的内容。这一般都是由于重置或者扩充内容容器导致的。这时，已读计数一定会被置为&lt;code>0&lt;/code>，从而再次指向内容容器中的第一个字节。这有时候也是为了避免内存分配和重用内存空间。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>总结一下，&lt;code>bytes.Buffer&lt;/code>是一个集读、写功能于一身的数据类型。它非常适合作为字节序列的缓冲区。我们会在下一篇文章中继续对 bytes.Buffer 的知识进行延展。如果你对于这部分内容有什么样问题，欢迎给我留言，我们一起讨论。&lt;/p>
&lt;p>感谢你的收听，我们下次再见。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 39丨bytes包与字节串操作（下）</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/39%E4%B8%A8bytes%E5%8C%85%E4%B8%8E%E5%AD%97%E8%8A%82%E4%B8%B2%E6%93%8D%E4%BD%9C%E4%B8%8B/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/39%E4%B8%A8bytes%E5%8C%85%E4%B8%8E%E5%AD%97%E8%8A%82%E4%B8%B2%E6%93%8D%E4%BD%9C%E4%B8%8B/</guid><description>
&lt;p>你好，我是郝林，今天我们继续分享 bytes 包与字节串操作的相关内容。&lt;/p>
&lt;p>在上一篇文章中，我们分享了&lt;code>bytes.Buffer&lt;/code>中已读计数的大致功用，并围绕着这个问题做了解析，下面我们来进行相关的知识扩展。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;h3 id="问题-1bytesbuffer的扩容策略是怎样的">问题 1：&lt;code>bytes.Buffer&lt;/code>的扩容策略是怎样的？&lt;/h3>
&lt;p>&lt;code>Buffer&lt;/code>值既可以被手动扩容，也可以进行自动扩容。并且，这两种扩容方式的策略是基本一致的。所以，除非我们完全确定后续内容所需的字节数，否则让&lt;code>Buffer&lt;/code>值自动去扩容就好了。&lt;/p>
&lt;p>在扩容的时候，&lt;code>Buffer&lt;/code>值中相应的代码（以下简称扩容代码）会&lt;strong>先判断内容容器的剩余容量&lt;/strong>，是否可以满足调用方的要求，或者是否足够容纳新的内容。&lt;/p>
&lt;p>&lt;strong>如果可以，那么扩容代码会在当前的内容容器之上，进行长度扩充。&lt;/strong>&lt;/p>
&lt;p>更具体地说，如果内容容器的容量与其长度的差，大于或等于另需的字节数，那么扩容代码就会通过切片操作对原有的内容容器的长度进行扩充，就像下面这样：&lt;/p>
&lt;pre>&lt;code>b.buf = b.buf[:length+need]
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>反之，如果内容容器的剩余容量不够了，那么扩容代码可能就会用新的内容容器去替代原有的内容容器，从而实现扩容。&lt;/strong>&lt;/p>
&lt;p>不过，这里还有一步优化。&lt;/p>
&lt;p>&lt;strong>如果当前内容容器的容量的一半，仍然大于或等于其现有长度再加上另需的字节数的和&lt;/strong>，即：&lt;/p>
&lt;pre>&lt;code>cap(b.buf)/2 &amp;gt;= len(b.buf)+need
&lt;/code>&lt;/pre>
&lt;p>那么，扩容代码就会复用现有的内容容器，并把容器中的未读内容拷贝到它的头部位置。&lt;/p>
&lt;p>这也意味着其中的已读内容，将会全部被未读内容和之后的新内容覆盖掉。&lt;/p>
&lt;p>这样的复用预计可以至少节省掉一次后续的扩容所带来的内存分配，以及若干字节的拷贝。&lt;/p>
&lt;p>&lt;strong>若这一步优化未能达成&lt;/strong>，也就是说，当前内容容器的容量小于新长度的二倍。&lt;/p>
&lt;p>那么，扩容代码就只能再创建一个新的内容容器，并把原有容器中的未读内容拷贝进去，最后再用新的容器替换掉原有的容器。这个新容器的容量将会等于原有容量的二倍再加上另需字节数的和。&lt;/p>
&lt;blockquote>
&lt;p>新容器的容量 =2* 原有容量 + 所需字节数&lt;/p>
&lt;/blockquote>
&lt;p>通过上面这些步骤，对内容容器的扩充基本上就完成了。不过，为了内部数据的一致性，以及避免原有的已读内容可能造成的数据混乱，扩容代码还会把已读计数置为&lt;code>0&lt;/code>，并再对内容容器做一下切片操作，以掩盖掉原有的已读内容。&lt;/p>
&lt;p>顺便说一下，对于处在零值状态的&lt;code>Buffer&lt;/code>值来说，如果第一次扩容时的另需字节数不大于&lt;code>64&lt;/code>，那么该值就会基于一个预先定义好的、长度为&lt;code>64&lt;/code>的字节数组来创建内容容器。&lt;/p>
&lt;p>在这种情况下，这个内容容器的容量就是&lt;code>64&lt;/code>。这样做的目的是为了让&lt;code>Buffer&lt;/code>值在刚被真正使用的时候就可以快速地做好准备。&lt;/p>
&lt;h3 id="问题-2bytesbuffer中的哪些方法可能会造成内容的泄露">问题 2：&lt;code>bytes.Buffer&lt;/code>中的哪些方法可能会造成内容的泄露？&lt;/h3>
&lt;p>首先明确一点，什么叫内容泄露？这里所说的内容泄露是指，使用&lt;code>Buffer&lt;/code>值的一方通过某种非标准的（或者说不正式的）方式，得到了本不该得到的内容。&lt;/p>
&lt;p>比如说，我通过调用&lt;code>Buffer&lt;/code>值的某个用于读取内容的方法，得到了一部分未读内容。我应该，也只应该通过这个方法的结果值，拿到在那一时刻&lt;code>Buffer&lt;/code>值中的未读内容。&lt;/p>
&lt;p>但是，在这个&lt;code>Buffer&lt;/code>值又有了一些新内容之后，我却可以通过当时得到的结果值，直接获得新的内容，而不需要再次调用相应的方法。&lt;/p>
&lt;p>这就是典型的非标准读取方式。这种读取方式是不应该存在的，即使存在，我们也不应该使用。因为它是在无意中（或者说一不小心）暴露出来的，其行为很可能是不稳定的。&lt;/p>
&lt;p>在&lt;code>bytes.Buffer&lt;/code>中，&lt;code>Bytes&lt;/code>方法和&lt;code>Next&lt;/code>方法都可能会造成内容的泄露。原因在于，它们都把基于内容容器的切片直接返回给了方法的调用方。&lt;/p>
&lt;p>我们都知道，通过切片，我们可以直接访问和操纵它的底层数组。不论这个切片是基于某个数组得来的，还是通过对另一个切片做切片操作获得的，都是如此。&lt;/p>
&lt;p>在这里，&lt;code>Bytes&lt;/code>方法和&lt;code>Next&lt;/code>方法返回的字节切片，都是通过对内容容器做切片操作得到的。也就是说，它们与内容容器共用了同一个底层数组，起码在一段时期之内是这样的。&lt;/p>
&lt;p>以&lt;code>Bytes&lt;/code>方法为例。它会返回在调用那一刻其所属值中的所有未读内容。示例代码如下：&lt;/p>
&lt;pre>&lt;code>contents := &amp;quot;ab&amp;quot;
buffer1 := bytes.NewBufferString(contents)
fmt.Printf(&amp;quot;The capacity of new buffer with contents %q: %d\n&amp;quot;,
contents, buffer1.Cap()) // 内容容器的容量为：8。
unreadBytes := buffer1.Bytes()
fmt.Printf(&amp;quot;The unread bytes of the buffer: %v\n&amp;quot;, unreadBytes) // 未读内容为：[97 98]。
&lt;/code>&lt;/pre>
&lt;p>我用字符串值&lt;code>&amp;quot;ab&amp;quot;&lt;/code>初始化了一个&lt;code>Buffer&lt;/code>值，由变量&lt;code>buffer1&lt;/code>代表，并打印了当时该值的一些状态。&lt;/p>
&lt;p>你可能会有疑惑，我只在这个&lt;code>Buffer&lt;/code>值中放入了一个长度为&lt;code>2&lt;/code>的字符串值，但为什么该值的容量却变为了&lt;code>8&lt;/code>。&lt;/p>
&lt;p>虽然这与我们当前的主题无关，但是我可以提示你一下：你可以去阅读&lt;code>runtime&lt;/code>包中一个名叫&lt;code>stringtoslicebyte&lt;/code>的函数，答案就在其中。&lt;/p>
&lt;p>接着说&lt;code>buffer1&lt;/code>。我又向该值写入了字符串值&lt;code>&amp;quot;cdefg&amp;quot;&lt;/code>，此时，其容量仍然是&lt;code>8&lt;/code>。我在前面通过调用&lt;code>buffer1&lt;/code>的&lt;code>Bytes&lt;/code>方法得到的结果值&lt;code>unreadBytes&lt;/code>，包含了在那时其中的所有未读内容。&lt;/p>
&lt;p>但是，由于这个结果值与&lt;code>buffer1&lt;/code>的内容容器在此时还共用着同一个底层数组，所以，我只需通过简单的再切片操作，就可以利用这个结果值拿到&lt;code>buffer1&lt;/code>在此时的所有未读内容。如此一来，&lt;code>buffer1&lt;/code>的新内容就被泄露出来了。&lt;/p>
&lt;pre>&lt;code>buffer1.WriteString(&amp;quot;cdefg&amp;quot;)
fmt.Printf(&amp;quot;The capacity of buffer: %d\n&amp;quot;, buffer1.Cap()) // 内容容器的容量仍为：8。
unreadBytes = unreadBytes[:cap(unreadBytes)]
fmt.Printf(&amp;quot;The unread bytes of the buffer: %v\n&amp;quot;, unreadBytes) // 基于前面获取到的结果值可得，未读内容为：[97 98 99 100 101 102 103 0]。
&lt;/code>&lt;/pre>
&lt;p>如果我当时把&lt;code>unreadBytes&lt;/code>的值传到了外界，那么外界就可以通过该值操纵&lt;code>buffer1&lt;/code>的内容了，就像下面这样：&lt;/p>
&lt;pre>&lt;code>unreadBytes[len(unreadBytes)-2] = byte('X') // 'X'的 ASCII 编码为 88。
fmt.Printf(&amp;quot;The unread bytes of the buffer: %v\n&amp;quot;, buffer1.Bytes()) // 未读内容变为了：[97 98 99 100 101 102 88]。
&lt;/code>&lt;/pre>
&lt;p>现在，你应该能够体会到，这里的内容泄露可能造成的严重后果了吧？对于&lt;code>Buffer&lt;/code>值的&lt;code>Next&lt;/code>方法，也存在相同的问题。&lt;/p>
&lt;p>不过，如果经过扩容，&lt;code>Buffer&lt;/code>值的内容容器或者它的底层数组被重新设定了，那么之前的内容泄露问题就无法再进一步发展了。我在 demo80.go 文件中写了一个比较完整的示例，你可以去看一看，并揣摩一下。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>我们结合两篇内容总结一下。与&lt;code>strings.Builder&lt;/code>类型不同，&lt;code>bytes.Buffer&lt;/code>不但可以拼接、截断其中的字节序列，以各种形式导出其中的内容，还可以顺序地读取其中的子序列。&lt;/p>
&lt;p>&lt;code>bytes.Buffer&lt;/code>类型使用字节切片作为其内容容器，并且会用一个字段实时地记录已读字节的计数。&lt;/p>
&lt;p>虽然我们无法直接计算出这个已读计数，但是由于它在&lt;code>Buffer&lt;/code>值中起到的作用非常关键，所以我们很有必要去理解它。&lt;/p>
&lt;p>无论是读取、写入、截断、导出还是重置，已读计数都是功能实现中的重要一环。&lt;/p>
&lt;p>与&lt;code>strings.Builder&lt;/code>类型的值一样，&lt;code>Buffer&lt;/code>值既可以被手动扩容，也可以进行自动的扩容。除非我们完全确定后续内容所需的字节数，否则让&lt;code>Buffer&lt;/code>值自动去扩容就好了。&lt;/p>
&lt;p>&lt;code>Buffer&lt;/code>值的扩容方法并不一定会为了获得更大的容量，替换掉现有的内容容器，而是先会本着尽量减少内存分配和内容拷贝的原则，对当前的内容容器进行重用。并且，只有在容量实在无法满足要求的时候，它才会去创建新的内容容器。&lt;/p>
&lt;p>此外，你可能并没有想到，&lt;code>Buffer&lt;/code>值的某些方法可能会造成内容的泄露。这主要是由于这些方法返回的结果值，在一段时期内会与其所属值的内容容器共用同一个底层数组。&lt;/p>
&lt;p>&lt;strong>如果我们有意或无意地把这些结果值传到了外界，那么外界就有可能通过它们操纵相关联&lt;code>Buffer&lt;/code>值的内容。&lt;/strong>&lt;/p>
&lt;p>这属于很严重的数据安全问题。我们一定要避免这种情况的发生。最彻底的做法是，在传出切片这类值之前要做好隔离。比如，先对它们进行深度拷贝，然后再把副本传出去。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>今天的思考题是：对比&lt;code>strings.Builder&lt;/code>和&lt;code>bytes.Buffer&lt;/code>的&lt;code>String&lt;/code>方法，并判断哪一个更高效？原因是什么？&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 40丨io包中的接口和工具（上）</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/40%E4%B8%A8io%E5%8C%85%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E4%B8%8A/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/40%E4%B8%A8io%E5%8C%85%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E4%B8%8A/</guid><description>
&lt;p>我们在前几篇文章中，主要讨论了&lt;code>strings.Builder&lt;/code>、&lt;code>strings.Reader&lt;/code>和&lt;code>bytes.Buffer&lt;/code>这三个数据类型。&lt;/p>
&lt;h2 id="知识回顾">知识回顾&lt;/h2>
&lt;p>还记得吗？当时我还问过你&amp;quot;它们都实现了哪些接口&amp;quot;。在我们继续讲解&lt;code>io&lt;/code>包中的接口和工具之前，我先来解答一下这个问题。&lt;/p>
&lt;p>&lt;strong>&lt;code>strings.Builder&lt;/code>类型主要用于构建字符串&lt;/strong> ，它的指针类型实现的接口有&lt;code>io.Writer&lt;/code>、&lt;code>io.ByteWriter&lt;/code>和&lt;code>fmt.Stringer&lt;/code>。另外，它其实还实现了一个&lt;code>io&lt;/code>包的包级私有接口&lt;code>io.stringWriter&lt;/code>（自 Go 1.12 起它会更名为&lt;code>io.StringWriter&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>&lt;code>strings.Reader&lt;/code>类型主要用于读取字符串&lt;/strong>，它的指针类型实现的接口比较多，包括：&lt;/p>
&lt;ol>
&lt;li>&lt;code>io.Reader&lt;/code>；&lt;/li>
&lt;li>&lt;code>io.ReaderAt&lt;/code>；&lt;/li>
&lt;li>&lt;code>io.ByteReader&lt;/code>；&lt;/li>
&lt;li>&lt;code>io.RuneReader&lt;/code>；&lt;/li>
&lt;li>&lt;code>io.Seeker&lt;/code>；&lt;/li>
&lt;li>&lt;code>io.ByteScanner&lt;/code>；&lt;/li>
&lt;li>&lt;code>io.RuneScanner&lt;/code>；&lt;/li>
&lt;li>&lt;code>io.WriterTo&lt;/code>；&lt;/li>
&lt;/ol>
&lt;p>共有 8 个，它们都是&lt;code>io&lt;/code>包中的接口。&lt;/p>
&lt;p>其中，&lt;code>io.ByteScanner&lt;/code>是&lt;code>io.ByteReader&lt;/code>的扩展接口，而&lt;code>io.RuneScanner&lt;/code>又是&lt;code>io.RuneReader&lt;/code>的扩展接口。&lt;/p>
&lt;p>&lt;strong>&lt;code>bytes.Buffer&lt;/code>是集读、写功能于一身的数据类型，它非常适合作为字节序列的缓冲区。&lt;/strong> 它的指针类型实现的接口就更多了。&lt;/p>
&lt;p>更具体地说，该指针类型实现的读取相关的接口有下面几个。&lt;/p>
&lt;ol>
&lt;li>&lt;code>io.Reader&lt;/code>；&lt;/li>
&lt;li>&lt;code>io.ByteReader&lt;/code>；&lt;/li>
&lt;li>&lt;code>io.RuneReader&lt;/code>；&lt;/li>
&lt;li>&lt;code>io.ByteScanner&lt;/code>；&lt;/li>
&lt;li>&lt;code>io.RuneScanner&lt;/code>；&lt;/li>
&lt;li>&lt;code>io.WriterTo&lt;/code>；&lt;/li>
&lt;/ol>
&lt;p>共有 6 个。而其实现的写入相关的接口则有这些。&lt;/p>
&lt;ol>
&lt;li>&lt;code>io.Writer&lt;/code>；&lt;/li>
&lt;li>&lt;code>io.ByteWriter&lt;/code>；&lt;/li>
&lt;li>&lt;code>io.stringWriter&lt;/code>；&lt;/li>
&lt;li>&lt;code>io.ReaderFrom&lt;/code>；&lt;/li>
&lt;/ol>
&lt;p>共 4 个。此外，它还实现了导出相关的接口&lt;code>fmt.Stringer&lt;/code>。&lt;/p>
&lt;h2 id="前导内容io-包中接口的好处与优势">前导内容：io 包中接口的好处与优势&lt;/h2>
&lt;p>那么，这些类型实现了这么多的接口，其动机（或者说目的）究竟是什么呢？&lt;/p>
&lt;p>&lt;strong>简单地说，这是为了提高不同程序实体之间的互操作性。&lt;/strong> 远的不说，我们就以&lt;code>io&lt;/code>包中的一些函数为例。&lt;/p>
&lt;p>在&lt;code>io&lt;/code>包中，有这样几个用于拷贝数据的函数，它们是：&lt;/p>
&lt;ul>
&lt;li>&lt;code>io.Copy&lt;/code>；&lt;/li>
&lt;li>&lt;code>io.CopyBuffer&lt;/code>；&lt;/li>
&lt;li>&lt;code>io.CopyN&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>虽然这几个函数在功能上都略有差别，但是它们都首先会接受两个参数，即：用于代表数据目的地、&lt;code>io.Writer&lt;/code>类型的参数&lt;code>dst&lt;/code>，以及用于代表数据来源的、&lt;code>io.Reader&lt;/code>类型的参数&lt;code>src&lt;/code>。这些函数的功能大致上都是把数据从&lt;code>src&lt;/code>拷贝到&lt;code>dst&lt;/code>。&lt;/p>
&lt;p>不论我们给予它们的第一个参数值是什么类型的，只要这个类型实现了&lt;code>io.Writer&lt;/code>接口即可。&lt;/p>
&lt;p>同样的，无论我们传给它们的第二个参数值的实际类型是什么，只要该类型实现了&lt;code>io.Reader&lt;/code>接口就行。&lt;/p>
&lt;p>一旦我们满足了这两个条件，这些函数几乎就可以正常地执行了。当然了，函数中还会对必要的参数值进行有效性的检查，如果检查不通过，它的执行也是不能够成功结束的。&lt;/p>
&lt;p>下面来看一段示例代码：&lt;/p>
&lt;pre>&lt;code>src := strings.NewReader(
&amp;quot;CopyN copies n bytes (or until an error) from src to dst. &amp;quot; +
&amp;quot;It returns the number of bytes copied and &amp;quot; +
&amp;quot;the earliest error encountered while copying.&amp;quot;)
dst := new(strings.Builder)
written, err := io.CopyN(dst, src, 58)
if err != nil {
fmt.Printf(&amp;quot;error: %v\n&amp;quot;, err)
} else {
fmt.Printf(&amp;quot;Written(%d): %q\n&amp;quot;, written, dst.String())
}
&lt;/code>&lt;/pre>
&lt;p>我先使用&lt;code>strings.NewReader&lt;/code>创建了一个字符串读取器，并把它赋给了变量&lt;code>src&lt;/code>，然后我又&lt;code>new&lt;/code>了一个字符串构建器，并将其赋予了变量&lt;code>dst&lt;/code>。&lt;/p>
&lt;p>之后，我在调用&lt;code>io.CopyN&lt;/code>函数的时候，把这两个变量的值都传了进去，同时把给这个函数的第三个参数值设定为了&lt;code>58&lt;/code>。也就是说，我想从&lt;code>src&lt;/code>中拷贝前&lt;code>58&lt;/code>个字节到&lt;code>dst&lt;/code>那里。&lt;/p>
&lt;p>虽然，变量&lt;code>src&lt;/code>和&lt;code>dst&lt;/code>的类型分别是&lt;code>strings.Reader&lt;/code>和&lt;code>strings.Builder&lt;/code>，但是当它们被传到&lt;code>io.CopyN&lt;/code>函数的时候，就已经分别被包装成了&lt;code>io.Reader&lt;/code>类型和&lt;code>io.Writer&lt;/code>类型的值。&lt;code>io.CopyN&lt;/code>函数也根本不会去在意，它们的实际类型到底是什么。&lt;/p>
&lt;p>为了优化的目的，&lt;code>io.CopyN&lt;/code>函数中的代码会对参数值进行再包装，也会检测这些参数值是否还实现了别的接口，甚至还会去探求某个参数值被包装后的实际类型，是否为某个特殊的类型。&lt;/p>
&lt;p>但是，从总体上来看，这些代码都是面向参数声明中的接口来做的。&lt;code>io.CopyN&lt;/code>函数的作者通过面向接口编程，极大地拓展了它的适用范围和应用场景。&lt;/p>
&lt;p>换个角度看，正因为&lt;code>strings.Reader&lt;/code>类型和&lt;code>strings.Builder&lt;/code>类型都实现了不少接口，所以它们的值才能够被使用在更广阔的场景中。&lt;/p>
&lt;p>&lt;strong>换句话说，如此一来，Go 语言的各种库中，能够操作它们的函数和数据类型明显多了很多。&lt;/strong>&lt;/p>
&lt;p>这就是我想要告诉你的，&lt;code>strings&lt;/code>包和&lt;code>bytes&lt;/code>包中的数据类型在实现了若干接口之后得到的最大好处。&lt;/p>
&lt;p>也可以说，这就是面向接口编程带来的最大优势。这些数据类型和函数的做法，也是非常值得我们在编程的过程中去效仿的。&lt;/p>
&lt;p>可以看到，前文所述的几个类型实现的大都是&lt;code>io&lt;/code>代码包中的接口。实际上，&lt;code>io&lt;/code>包中的接口，对于 Go 语言的标准库和很多第三方库而言，都起着举足轻重的作用。它们非常基础也非常重要。&lt;/p>
&lt;p>就拿&lt;code>io.Reader&lt;/code>和&lt;code>io.Writer&lt;/code>这两个最核心的接口来说，它们是很多接口的扩展对象和设计源泉。同时，单从 Go 语言的标准库中统计，实现了它们的数据类型都（各自）有上百个，而引用它们的代码更是都（各自）有 400 多处。&lt;/p>
&lt;p>很多数据类型实现了&lt;code>io.Reader&lt;/code>接口，是因为它们提供了从某处读取数据的功能。类似的，许多能够把数据写入某处的数据类型，也都会去实现&lt;code>io.Writer&lt;/code>接口。&lt;/p>
&lt;p>其实，有不少类型的设计初衷都是：实现这两个核心接口的某个，或某些扩展接口，以提供比单纯的字节序列读取或写入，更加丰富的功能，就像前面讲到的那几个&lt;code>strings&lt;/code>包和&lt;code>bytes&lt;/code>包中的数据类型那样。&lt;/p>
&lt;p>在 Go 语言中，对接口的扩展是通过接口类型之间的嵌入来实现的，这也常被叫做接口的组合。&lt;/p>
&lt;p>我在讲接口的时候也提到过，Go 语言提倡使用小接口加接口组合的方式，来扩展程序的行为以及增加程序的灵活性。&lt;code>io&lt;/code>代码包恰恰就可以作为这样的一个标杆，它可以成为我们运用这种技巧时的一个参考标准。&lt;/p>
&lt;p>下面，我就以&lt;code>io.Reader&lt;/code>接口为对象提出一个与接口扩展和实现有关的问题。如果你研究过这个核心接口以及相关的数据类型的话，这个问题回答起来就并不困难。&lt;/p>
&lt;p>&lt;strong>我们今天的问题是：在&lt;code>io&lt;/code>包中，&lt;code>io.Reader&lt;/code>的扩展接口和实现类型都有哪些？它们分别都有什么功用？&lt;/strong>&lt;/p>
&lt;p>这道题的&lt;strong>典型回答&lt;/strong> 是这样的。在&lt;code>io&lt;/code>包中，&lt;code>io.Reader&lt;/code>的扩展接口有下面几种。&lt;/p>
&lt;ol>
&lt;li>&lt;code>io.ReadWriter&lt;/code>：此接口既是&lt;code>io.Reader&lt;/code>的扩展接口，也是&lt;code>io.Writer&lt;/code>的扩展接口。换句话说，该接口定义了一组行为，包含且仅包含了基本的字节序列读取方法&lt;code>Read&lt;/code>，和字节序列写入方法&lt;code>Write&lt;/code>。&lt;/li>
&lt;li>&lt;code>io.ReadCloser&lt;/code>：此接口除了包含基本的字节序列读取方法之外，还拥有一个基本的关闭方法&lt;code>Close&lt;/code>。后者一般用于关闭数据读写的通路。这个接口其实是&lt;code>io.Reader&lt;/code>接口和&lt;code>io.Closer&lt;/code>接口的组合。&lt;/li>
&lt;li>&lt;code>io.ReadWriteCloser&lt;/code>：很明显，此接口是&lt;code>io.Reader&lt;/code>、&lt;code>io.Writer&lt;/code>和&lt;code>io.Closer&lt;/code>这三个接口的组合。&lt;/li>
&lt;li>&lt;code>io.ReadSeeker&lt;/code>：此接口的特点是拥有一个用于寻找读写位置的基本方法&lt;code>Seek&lt;/code>。更具体地说，该方法可以根据给定的偏移量基于数据的起始位置、末尾位置，或者当前读写位置去寻找新的读写位置。这个新的读写位置用于表明下一次读或写时的起始索引。&lt;code>Seek&lt;/code>是&lt;code>io.Seeker&lt;/code>接口唯一拥有的方法。&lt;/li>
&lt;li>&lt;code>io.ReadWriteSeeker&lt;/code>：显然，此接口是另一个三合一的扩展接口，它是&lt;code>io.Reader&lt;/code>、&lt;code>io.Writer&lt;/code>和&lt;code>io.Seeker&lt;/code>的组合。&lt;/li>
&lt;/ol>
&lt;p>再来说说&lt;code>io&lt;/code>包中的&lt;code>io.Reader&lt;/code>接口的实现类型，它们包括下面几项内容。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>*io.LimitedReader&lt;/code>：此类型的基本类型会包装&lt;code>io.Reader&lt;/code>类型的值，并提供一个额外的受限读取的功能。所谓的受限读取指的是，此类型的读取方法&lt;code>Read&lt;/code>返回的总数据量会受到限制，无论该方法被调用多少次。这个限制由该类型的字段&lt;code>N&lt;/code>指明，单位是字节。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>*io.SectionReader&lt;/code>：此类型的基本类型可以包装&lt;code>io.ReaderAt&lt;/code>类型的值，并且会限制它的&lt;code>Read&lt;/code>方法，只能够读取原始数据中的某一个部分（或者说某一段）。&lt;/p>
&lt;p>这个数据段的起始位置和末尾位置，需要在它被初始化的时候就指明，并且之后无法变更。该类型值的行为与切片有些类似，它只会对外暴露在其窗口之中的那些数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>*io.teeReader&lt;/code>：此类型是一个包级私有的数据类型，也是&lt;code>io.TeeReader&lt;/code>函数结果值的实际类型。这个函数接受两个参数&lt;code>r&lt;/code>和&lt;code>w&lt;/code>，类型分别是&lt;code>io.Reader&lt;/code>和&lt;code>io.Writer&lt;/code>。&lt;/p>
&lt;p>其结果值的&lt;code>Read&lt;/code>方法会把&lt;code>r&lt;/code>中的数据经过作为方法参数的字节切片&lt;code>p&lt;/code>写入到&lt;code>w&lt;/code>。可以说，这个值就是&lt;code>r&lt;/code>和&lt;code>w&lt;/code>之间的数据桥梁，而那个参数&lt;code>p&lt;/code>就是这座桥上的数据搬运者。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>io.multiReader&lt;/code>：此类型也是一个包级私有的数据类型。类似的，&lt;code>io&lt;/code>包中有一个名为&lt;code>MultiReader&lt;/code>的函数，它可以接受若干个&lt;code>io.Reader&lt;/code>类型的参数值，并返回一个实际类型为&lt;code>io.multiReader&lt;/code>的结果值。&lt;/p>
&lt;p>当这个结果值的&lt;code>Read&lt;/code>方法被调用时，它会顺序地从前面那些&lt;code>io.Reader&lt;/code>类型的参数值中读取数据。因此，我们也可以称之为多对象读取器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>io.pipe&lt;/code>：此类型为一个包级私有的数据类型，它比上述类型都要复杂得多。它不但实现了&lt;code>io.Reader&lt;/code>接口，而且还实现了&lt;code>io.Writer&lt;/code>接口。&lt;/p>
&lt;p>实际上，&lt;code>io.PipeReader&lt;/code>类型和&lt;code>io.PipeWriter&lt;/code>类型拥有的所有指针方法都是以它为基础的。这些方法都只是代理了&lt;code>io.pipe&lt;/code>类型值所拥有的某一个方法而已。&lt;/p>
&lt;p>又因为&lt;code>io.Pipe&lt;/code>函数会返回这两个类型的指针值并分别把它们作为其生成的同步内存管道的两端，所以可以说，&lt;code>*io.pipe&lt;/code>类型就是&lt;code>io&lt;/code>包提供的同步内存管道的核心实现。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>io.PipeReader&lt;/code>：此类型可以被视为&lt;code>io.pipe&lt;/code>类型的代理类型。它代理了后者的一部分功能，并基于后者实现了&lt;code>io.ReadCloser&lt;/code>接口。同时，它还定义了同步内存管道的读取端。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>注意，我在这里忽略掉了测试源码文件中的实现类型，以及不会以任何形式直接对外暴露的那些实现类型。&lt;/p>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>我问这个问题的目的主要是评估你对&lt;code>io&lt;/code>包的熟悉程度。这个代码包是 Go 语言标准库中所有 I/O 相关 API 的根基，所以，我们必须对其中的每一个程序实体都有所了解。&lt;/p>
&lt;p>然而，由于该包包含的内容众多，因此这里的问题是以&lt;code>io.Reader&lt;/code>接口作为切入点的。通过&lt;code>io.Reader&lt;/code>接口，我们应该能够梳理出基于它的类型树，并知晓其中每一个类型的功用。&lt;/p>
&lt;p>&lt;code>io.Reader&lt;/code>可谓是&lt;code>io&lt;/code>包乃至是整个 Go 语言标准库中的核心接口，所以我们可以从它那里牵扯出很多扩展接口和实现类型。&lt;/p>
&lt;p>我在本问题的典型回答中，为你罗列和介绍了&lt;code>io&lt;/code>包范围内的相关数据类型。&lt;/p>
&lt;p>这些类型中的每一个都值得你认真去理解，尤其是那几个实现了&lt;code>io.Reader&lt;/code>接口的类型。它们实现的功能在细节上都各有不同。&lt;/p>
&lt;p>在很多时候，我们可以根据实际需求将它们搭配起来使用。&lt;/p>
&lt;p>例如，对施加在原始数据之上的（由&lt;code>Read&lt;/code>方法提供的）读取功能进行多层次的包装（比如受限读取和多对象读取等），以满足较为复杂的读取需求。&lt;/p>
&lt;p>在实际的面试中，只要应聘者能够从某一个方面出发，说出&lt;code>io.Reader&lt;/code>的扩展接口及其存在意义，或者说清楚该接口的三五个实现类型，那么就可以算是基本回答正确了。&lt;/p>
&lt;p>比如，从读取、写入、关闭这一些列的基本功能出发，描述清楚：&lt;/p>
&lt;ul>
&lt;li>&lt;code>io.ReadWriter&lt;/code>；&lt;/li>
&lt;li>&lt;code>io.ReadCloser&lt;/code>；&lt;/li>
&lt;li>&lt;code>io.ReadWriteCloser；&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>这几个接口。&lt;/p>
&lt;p>又比如，说明白&lt;code>io.LimitedReader&lt;/code>和&lt;code>io.SectionReader&lt;/code>这两个类型之间的异同点。&lt;/p>
&lt;p>再比如，阐述&lt;code>*io.SectionReader&lt;/code>类型实现&lt;code>io.ReadSeeker&lt;/code>接口的具体方式，等等。不过，这只是合格的门槛，应聘者回答得越全面越好。&lt;/p>
&lt;p>我在示例文件 demo82.go 中写了一些代码，以展示上述类型的一些基本用法，供你参考。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>我们今天一直在讨论和梳理&lt;code>io&lt;/code>代码包中的程序实体，尤其是那些重要的接口及其实现类型。&lt;/p>
&lt;p>&lt;code>io&lt;/code>包中的接口对于 Go 语言的标准库和很多第三方库而言，都起着举足轻重的作用。其中最核心的&lt;code>io.Reader&lt;/code>接口和&lt;code>io.Writer&lt;/code>接口，是很多接口的扩展对象或设计源泉。我们下一节会继续讲解&lt;code>io&lt;/code>包中的接口内容。&lt;/p>
&lt;p>你用过哪些&lt;code>io&lt;/code>包中的接口和工具呢，又有哪些收获和感受呢，你可以给我留言，我们一起讨论。感谢你的收听，我们下次再见。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 41丨io包中的接口和工具（下）</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/41%E4%B8%A8io%E5%8C%85%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E4%B8%8B/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/41%E4%B8%A8io%E5%8C%85%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7%E4%B8%8B/</guid><description>
&lt;p>上一篇文章中，我主要讲到了&lt;code>io.Reader&lt;/code>的扩展接口和实现类型。当然，&lt;code>io&lt;/code>代码包中的核心接口不止&lt;code>io.Reader&lt;/code>一个。&lt;/p>
&lt;p>我们基于它引出的一条主线，只是&lt;code>io&lt;/code>包类型体系中的一部分。我们很有必要再从另一个角度去探索一下，以求对&lt;code>io&lt;/code>包有更加全面的了解。&lt;/p>
&lt;p>下面的一个问题就与此有关。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;h3 id="问题io包中的接口都有哪些它们之间都有着怎样的关系">问题：&lt;code>io&lt;/code>包中的接口都有哪些？它们之间都有着怎样的关系？&lt;/h3>
&lt;p>我们可以把没有嵌入其他接口并且只定义了一个方法的接口叫做&lt;strong>简单接口&lt;/strong> 。在&lt;code>io&lt;/code>包中，这样的接口一共有 11 个。&lt;/p>
&lt;p>在它们之中，有的接口有着众多的扩展接口和实现类型，我们可以称之为&lt;strong>核心接口&lt;/strong> 。&lt;strong>&lt;code>io&lt;/code>包中的核心接口只有 3 个，它们是：&lt;code>io.Reader&lt;/code>、&lt;code>io.Writer&lt;/code>和&lt;code>io.Closer&lt;/code>。&lt;/strong>&lt;/p>
&lt;p>我们还可以把&lt;code>io&lt;/code>包中的简单接口分为四大类。这四大类接口分别针对于四种操作，即：读取、写入、关闭和读写位置设定。前三种操作属于基本的 I/O 操作。&lt;/p>
&lt;p>&lt;strong>关于读取操作，我们在前面已经重点讨论过核心接口&lt;code>io.Reader&lt;/code>。它在&lt;code>io&lt;/code>包中有 5 个扩展接口，并有 6 个实现类型。除了它，这个包中针对读取操作的接口还有不少。我们下面就来梳理一下。&lt;/strong>&lt;/p>
&lt;p>首先来看&lt;code>io.ByteReader&lt;/code>和&lt;code>io.RuneReader&lt;/code>这两个简单接口。它们分别定义了一个读取方法，即：&lt;code>ReadByte&lt;/code>和&lt;code>ReadRune&lt;/code>。&lt;/p>
&lt;p>但与&lt;code>io.Reader&lt;/code>接口中&lt;code>Read&lt;/code>方法不同的是，这两个读取方法分别只能够读取下一个单一的字节和 Unicode 字符。&lt;/p>
&lt;p>我们之前讲过的数据类型&lt;code>strings.Reader&lt;/code>和&lt;code>bytes.Buffer&lt;/code>都是&lt;code>io.ByteReader&lt;/code>和&lt;code>io.RuneReader&lt;/code>的实现类型。&lt;/p>
&lt;p>不仅如此，这两个类型还都实现了&lt;code>io.ByteScanner&lt;/code>接口和&lt;code>io.RuneScanner&lt;/code>接口。&lt;/p>
&lt;p>&lt;code>io.ByteScanner&lt;/code>接口内嵌了简单接口&lt;code>io.ByteReader&lt;/code>，并定义了额外的&lt;code>UnreadByte&lt;/code>方法。如此一来，它就抽象出了一个能够读取和读回退单个字节的功能集。&lt;/p>
&lt;p>与之类似，&lt;code>io.RuneScanner&lt;/code>内嵌了简单接口&lt;code>io.RuneReader&lt;/code>，并定义了额外的&lt;code>UnreadRune&lt;/code>方法。它抽象的是可以读取和读回退单个 Unicode 字符的功能集。&lt;/p>
&lt;p>再来看&lt;code>io.ReaderAt&lt;/code>接口。它也是一个简单接口，其中只定义了一个方法&lt;code>ReadAt&lt;/code>。与我们在前面说过的读取方法都不同，&lt;code>ReadAt&lt;/code>是一个纯粹的只读方法。&lt;/p>
&lt;p>它只去读取其所属值中包含的字节，而不对这个值进行任何的改动，比如，它绝对不能去修改已读计数的值。这也是&lt;code>io.ReaderAt&lt;/code>接口与其实现类型之间最重要的一个约定。&lt;/p>
&lt;p>因此，如果仅仅并发地调用某一个值的&lt;code>ReadAt&lt;/code>方法，那么安全性应该是可以得到保障的。&lt;/p>
&lt;p>另外，还有一个读取操作相关的接口我们没有介绍过，它就是&lt;code>io.WriterTo&lt;/code>。这个接口定义了一个名为&lt;code>WriteTo&lt;/code>的方法。&lt;/p>
&lt;p>千万不要被它的名字迷惑，这个&lt;code>WriteTo&lt;/code>方法其实是一个读取方法。它会接受一个&lt;code>io.Writer&lt;/code>类型的参数值，并会把其所属值中的数据读出并写入到这个参数值中。&lt;/p>
&lt;p>与之相对应的是&lt;code>io.ReaderFrom&lt;/code>接口。它定义了一个名叫&lt;code>ReadFrom&lt;/code>的写入方法。该方法会接受一个&lt;code>io.Reader&lt;/code>类型的参数值，并会从该参数值中读出数据, 并写入到其所属值中。&lt;/p>
&lt;p>值得一提的是，我们在前面用到过的&lt;code>io.CopyN&lt;/code>函数，在复制数据的时候会先检测其参数&lt;code>src&lt;/code>的值，是否实现了&lt;code>io.WriterTo&lt;/code>接口。如果是，那么它就直接利用该值的&lt;code>WriteTo&lt;/code>方法，把其中的数据拷贝给参数&lt;code>dst&lt;/code>代表的值。&lt;/p>
&lt;p>类似的，这个函数还会检测&lt;code>dst&lt;/code>的值是否实现了&lt;code>io.ReaderFrom&lt;/code>接口。如果是，那么它就会利用这个值的&lt;code>ReadFrom&lt;/code>方法，直接从&lt;code>src&lt;/code>那里把数据拷贝进该值。&lt;/p>
&lt;p>实际上，对于&lt;code>io.Copy&lt;/code>函数和&lt;code>io.CopyBuffer&lt;/code>函数来说也是如此，因为它们在内部做数据复制的时候用的都是同一套代码。&lt;/p>
&lt;p>你也看到了，&lt;code>io.ReaderFrom&lt;/code>接口与&lt;code>io.WriterTo&lt;/code>接口对应得很规整。&lt;strong>实际上，在&lt;code>io&lt;/code>包中，与写入操作有关的接口都与读取操作的相关接口有着一定的对应关系。下面，我们就来说说写入操作相关的接口。&lt;/strong>&lt;/p>
&lt;p>首先当然是核心接口&lt;code>io.Writer&lt;/code>。基于它的扩展接口除了有我们已知的&lt;code>io.ReadWriter&lt;/code>、&lt;code>io.ReadWriteCloser&lt;/code>和&lt;code>io.ReadWriteSeeker&lt;/code>之外，还有&lt;code>io.WriteCloser&lt;/code>和&lt;code>io.WriteSeeker&lt;/code>。&lt;/p>
&lt;p>我们之前提及的&lt;code>*io.pipe&lt;/code>就是&lt;code>io.ReadWriter&lt;/code>接口的实现类型。然而，在&lt;code>io&lt;/code>包中并没有&lt;code>io.ReadWriteCloser&lt;/code>接口的实现，它的实现类型主要集中在&lt;code>net&lt;/code>包中。&lt;/p>
&lt;p>除此之外，写入操作相关的简单接口还有&lt;code>io.ByteWriter&lt;/code>和&lt;code>io.WriterAt&lt;/code>。可惜，&lt;code>io&lt;/code>包中也没有它们的实现类型。不过，有一个数据类型值得在这里提一句，那就是&lt;code>*os.File&lt;/code>。&lt;/p>
&lt;p>这个类型不但是&lt;code>io.WriterAt&lt;/code>接口的实现类型，还同时实现了&lt;code>io.ReadWriteCloser&lt;/code>接口和&lt;code>io.ReadWriteSeeker&lt;/code>接口。也就是说，该类型支持的 I/O 操作非常的丰富。&lt;/p>
&lt;p>&lt;code>io.Seeker&lt;/code>接口作为一个读写位置设定相关的简单接口，也仅仅定义了一个方法，名叫&lt;code>Seek&lt;/code>。&lt;/p>
&lt;p>我在讲&lt;code>strings.Reader&lt;/code>类型的时候还专门说过这个&lt;code>Seek&lt;/code>方法，当时还给出了一个与已读计数估算有关的例子。该方法主要用于寻找并设定下一次读取或写入时的起始索引位置。&lt;/p>
&lt;p>&lt;code>io&lt;/code>包中有几个基于&lt;code>io.Seeker&lt;/code>的扩展接口，包括前面讲过的&lt;code>io.ReadSeeker&lt;/code>和&lt;code>io.ReadWriteSeeker&lt;/code>，以及还未曾提过的&lt;code>io.WriteSeeker&lt;/code>。&lt;code>io.WriteSeeker&lt;/code>是基于&lt;code>io.Writer&lt;/code>和&lt;code>io.Seeker&lt;/code>的扩展接口。&lt;/p>
&lt;p>我们之前多次提到的两个指针类型&lt;code>strings.Reader&lt;/code>和&lt;code>io.SectionReader&lt;/code>都实现了&lt;code>io.Seeker&lt;/code>接口。顺便说一句，这两个类型也都是&lt;code>io.ReaderAt&lt;/code>接口的实现类型。&lt;/p>
&lt;p>最后，关闭操作相关的接口&lt;code>io.Closer&lt;/code>非常通用，它的扩展接口和实现类型都不少。我们单从名称上就能够一眼看出&lt;code>io&lt;/code>包中的哪些接口是它的扩展接口。至于它的实现类型，&lt;code>io&lt;/code>包中只有&lt;code>io.PipeReader&lt;/code>和&lt;code>io.PipeWriter&lt;/code>。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>我们来总结一下这两篇的内容。在 Go 语言中，对接口的扩展是通过接口类型之间的嵌入来实现的，这也常被叫做接口的组合。而&lt;code>io&lt;/code>代码包恰恰就可以作为接口扩展的一个标杆，它可以成为我们运用这种技巧时的一个参考标准。&lt;/p>
&lt;p>在本文中，我根据接口定义的方法的数量以及是否有接口嵌入，把&lt;code>io&lt;/code>包中的接口分为了简单接口和扩展接口。&lt;/p>
&lt;p>同时，我又根据这些简单接口的扩展接口和实现类型的数量级，把它们分为了核心接口和非核心接口。&lt;/p>
&lt;p>在&lt;code>io&lt;/code>包中，称得上核心接口的简单接口只有 3 个，即：&lt;code>io.Reader&lt;/code>、&lt;code>io.Writer&lt;/code>和&lt;code>io.Closer&lt;/code>。这些核心接口在 Go 语言标准库中的实现类型都在 200 个以上。&lt;/p>
&lt;p>另外，根据针对的 I/O 操作的不同，我还把简单接口分为了四大类。这四大类接口针对的操作分别是：读取、写入、关闭和读写位置设定。&lt;/p>
&lt;p>其中，前三种操作属于基本的 I/O 操作。基于此，我带你梳理了每个类别的简单接口，并讲解了它们在&lt;code>io&lt;/code>包中的扩展接口，以及具有代表性的实现类型。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/e5/0b/e5b4af00105769cdc9f0ab729bb3b30b.png" alt="">&lt;/p>
&lt;p>（ io 包中的接口体系）&lt;/p>
&lt;p>除此之外，我还从多个维度为你描述了一些重要程序实体的功用和机理，比如：数据段读取器&lt;code>io.SectionReader&lt;/code>、作为同步内存管道核心实现的&lt;code>io.pipe&lt;/code>类型，以及用于数据拷贝的&lt;code>io.CopyN&lt;/code>函数，等等。&lt;/p>
&lt;p>我如此详尽且多角度的阐释，正是为了让你能够记牢&lt;code>io&lt;/code>代码包中有着网状关系的接口和数据类型。我希望这个目的已经达到了，最起码，本文可以作为你深刻记忆它们的开始。&lt;/p>
&lt;p>最后再强调一下，&lt;code>io&lt;/code>包中的简单接口共有 11 个。其中，读取操作相关的接口有 5 个，写入操作相关的接口有 4 个，而与关闭操作有关的接口只有 1 个，另外还有一个读写位置设定相关的接口。&lt;/p>
&lt;p>此外，&lt;code>io&lt;/code>包还包含了 9 个基于这些简单接口的扩展接口。你需要在今后思考和实践的是，你在什么时候应该编写哪些数据类型实现&lt;code>io&lt;/code>包中的哪些接口，并以此得到最大的好处。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>今天的思考题是：&lt;code>io&lt;/code>包中的同步内存管道的运作机制是什么？&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 42丨bufio包中的数据类型（上）</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/42%E4%B8%A8bufio%E5%8C%85%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8A/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/42%E4%B8%A8bufio%E5%8C%85%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8A/</guid><description>
&lt;p>今天，我们来讲另一个与 I/O 操作强相关的代码包&lt;code>bufio&lt;/code>。&lt;code>bufio&lt;/code>是&amp;quot;buffered I/O&amp;quot;的缩写。顾名思义，这个代码包中的程序实体实现的 I/O 操作都内置了缓冲区。&lt;/p>
&lt;p>&lt;code>bufio&lt;/code>包中的数据类型主要有：&lt;/p>
&lt;ol>
&lt;li>&lt;code>Reader&lt;/code>；&lt;/li>
&lt;li>&lt;code>Scanner&lt;/code>；&lt;/li>
&lt;li>&lt;code>Writer&lt;/code>和&lt;code>ReadWriter&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>与&lt;code>io&lt;/code>包中的数据类型类似，这些类型的值也都需要在初始化的时候，包装一个或多个简单 I/O 接口类型的值。（这里的简单 I/O 接口类型指的就是&lt;code>io&lt;/code>包中的那些简单接口。）&lt;/p>
&lt;p>下面，我们将通过一系列问题对&lt;code>bufio.Reader&lt;/code>类型和&lt;code>bufio.Writer&lt;/code>类型进行讨论（以前者为主）。&lt;strong>今天我的问题是：&lt;code>bufio.Reader&lt;/code>类型值中的缓冲区起着怎样的作用？&lt;/strong>&lt;/p>
&lt;p>&lt;strong>这道题的典型回答是这样的。&lt;/strong>&lt;/p>
&lt;p>&lt;code>bufio.Reader&lt;/code>类型的值（以下简称&lt;code>Reader&lt;/code>值）内的缓冲区，其实就是一个数据存储中介，它介于底层读取器与读取方法及其调用方之间。所谓的底层读取器，就是在初始化此类值的时候传入的&lt;code>io.Reader&lt;/code>类型的参数值。&lt;/p>
&lt;p>&lt;code>Reader&lt;/code>值的读取方法一般都会先从其所属值的缓冲区中读取数据。同时，在必要的时候，它们还会预先从底层读取器那里读出一部分数据，并暂存于缓冲区之中以备后用。&lt;/p>
&lt;p>有这样一个缓冲区的好处是，可以在大多数的时候降低读取方法的执行时间。虽然，读取方法有时还要负责填充缓冲区，但从总体来看，读取方法的平均执行时间一般都会因此有大幅度的缩短。&lt;/p>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>&lt;code>bufio.Reader&lt;/code>类型并不是开箱即用的，因为它包含了一些需要显式初始化的字段。为了让你能在后面更好地理解它的读取方法的内部流程，我先在这里简要地解释一下这些字段，如下所示。&lt;/p>
&lt;ol>
&lt;li>&lt;code>buf&lt;/code>：&lt;code>[]byte&lt;/code>类型的字段，即字节切片，代表缓冲区。虽然它是切片类型的，但是其长度却会在初始化的时候指定，并在之后保持不变。&lt;/li>
&lt;li>&lt;code>rd&lt;/code>：&lt;code>io.Reader&lt;/code>类型的字段，代表底层读取器。缓冲区中的数据就是从这里拷贝来的。&lt;/li>
&lt;li>&lt;code>r&lt;/code>：&lt;code>int&lt;/code>类型的字段，代表对缓冲区进行下一次读取时的开始索引。我们可以称它为已读计数。&lt;/li>
&lt;li>&lt;code>w&lt;/code>：&lt;code>int&lt;/code>类型的字段，代表对缓冲区进行下一次写入时的开始索引。我们可以称之为已写计数。&lt;/li>
&lt;li>&lt;code>err&lt;/code>：&lt;code>error&lt;/code>类型的字段。它的值用于表示在从底层读取器获得数据时发生的错误。这里的值在被读取或忽略之后，该字段会被置为&lt;code>nil&lt;/code>。&lt;/li>
&lt;li>&lt;code>lastByte&lt;/code>：&lt;code>int&lt;/code>类型的字段，用于记录缓冲区中最后一个被读取的字节。读回退时会用到它的值。&lt;/li>
&lt;li>&lt;code>lastRuneSize&lt;/code>：&lt;code>int&lt;/code>类型的字段，用于记录缓冲区中最后一个被读取的 Unicode 字符所占用的字节数。读回退的时候会用到它的值。这个字段只会在其所属值的&lt;code>ReadRune&lt;/code>方法中才会被赋予有意义的值。在其他情况下，它都会被置为&lt;code>-1&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>&lt;code>bufio&lt;/code>包为我们提供了两个用于初始化&lt;code>Reader&lt;/code>值的函数，分别叫：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>NewReader&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>NewReaderSize&lt;/code>；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>它们都会返回一个&lt;code>*bufio.Reader&lt;/code>类型的值。&lt;/p>
&lt;p>&lt;code>NewReader&lt;/code>函数初始化的&lt;code>Reader&lt;/code>值会拥有一个默认尺寸的缓冲区。这个默认尺寸是 4096 个字节，即：4 KB。而&lt;code>NewReaderSize&lt;/code>函数则将缓冲区尺寸的决定权抛给了使用方。&lt;/p>
&lt;p>由于这里的缓冲区在一个&lt;code>Reader&lt;/code>值的生命周期内其尺寸不可变，所以在有些时候是需要做一些权衡的。&lt;code>NewReaderSize&lt;/code>函数就提供了这样一个途径。&lt;/p>
&lt;p>在&lt;code>bufio.Reader&lt;/code>类型拥有的读取方法中，&lt;code>Peek&lt;/code>方法和&lt;code>ReadSlice&lt;/code>方法都会调用该类型一个名为&lt;code>fill&lt;/code>的包级私有方法。&lt;code>fill&lt;/code>方法的作用是填充内部缓冲区。我们在这里就先重点说说它。&lt;/p>
&lt;p>&lt;code>fill&lt;/code>方法会先检查其所属值的已读计数。如果这个计数不大于&lt;code>0&lt;/code>，那么有两种可能。&lt;/p>
&lt;p>一种可能是其缓冲区中的字节都是全新的，也就是说它们都没有被读取过，另一种可能是缓冲区刚被压缩过。&lt;/p>
&lt;p>对缓冲区的压缩包括两个步骤。&lt;strong>第一步，把缓冲区中在&lt;code>[已读计数, 已写计数)&lt;/code>范围之内的所有元素值（或者说字节）都依次拷贝到缓冲区的头部。&lt;/strong>&lt;/p>
&lt;p>比如，把缓冲区中与已读计数代表的索引对应字节拷贝到索引&lt;code>0&lt;/code>的位置，并把紧挨在它后边的字节拷贝到索引&lt;code>1&lt;/code>的位置，以此类推。&lt;/p>
&lt;p>这一步之所以不会有任何副作用，是因为它基于两个事实。&lt;/p>
&lt;p>**第一事实，**已读计数之前的字节都已经被读取过，并且肯定不会再被读取了，因此把它们覆盖掉是安全的。&lt;/p>
&lt;p>&lt;strong>第二个事实，&lt;/strong> 在压缩缓冲区之后，已写计数之后的字节只可能是已被读取过的字节，或者是已被拷贝到缓冲区头部的未读字节，又或者是代表未曾被填入数据的零值&lt;code>0x00&lt;/code>。所以，后续的新字节是可以被写到这些位置上的。&lt;/p>
&lt;p>&lt;strong>在压缩缓冲区的第二步中，&lt;code>fill&lt;/code>方法会把已写计数的新值设定为原已写计数与原已读计数的差。这个差所代表的索引，就是压缩后第一次写入字节时的开始索引。&lt;/strong>&lt;/p>
&lt;p>另外，该方法还会把已读计数的值置为&lt;code>0&lt;/code>。显而易见，在压缩之后，再读取字节就肯定要从缓冲区的头部开始读了。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/68/84/687b56d4137ea4d01e0b20d259f91284.png" alt="">&lt;/p>
&lt;p>（bufio.Reader 中的缓冲区压缩）&lt;/p>
&lt;p>实际上，&lt;code>fill&lt;/code>方法只要在开始时发现其所属值的已读计数大于&lt;code>0&lt;/code>，就会对缓冲区进行一次压缩。之后，如果缓冲区中还有可写的位置，那么该方法就会对其进行填充。&lt;/p>
&lt;p>在填充缓冲区的时候，&lt;code>fill&lt;/code>方法会试图从底层读取器那里，读取足够多的字节，并尽量把从已写计数代表的索引位置到缓冲区末尾之间的空间都填满。&lt;/p>
&lt;p>在这个过程中，&lt;code>fill&lt;/code>方法会及时地更新已写计数，以保证填充的正确性和顺序性。另外，它还会判断从底层读取器读取数据的时候，是否有错误发生。如果有，那么它就会把错误值赋给其所属值的&lt;code>err&lt;/code>字段，并终止填充流程。&lt;/p>
&lt;p>好了，到这里，我们暂告一个段落。在本题中，我对&lt;code>bufio.Reader&lt;/code>类型的基本结构，以及相关的一些函数和方法进行了概括介绍，并且重点阐述了该类型的&lt;code>fill&lt;/code>方法。&lt;/p>
&lt;p>后者是我们在后面要说明的一些读取流程的重要组成部分。你起码要记住的是：这个&lt;code>fill&lt;/code>方法大致都做了些什么。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;p>问题 1：&lt;code>bufio.Writer&lt;/code>类型值中缓冲的数据什么时候会被写到它的底层写入器？&lt;/p>
&lt;p>我们先来看一下&lt;code>bufio.Writer&lt;/code>类型都有哪些字段：&lt;/p>
&lt;ol>
&lt;li>&lt;code>err&lt;/code>：&lt;code>error&lt;/code>类型的字段。它的值用于表示在向底层写入器写数据时发生的错误。&lt;/li>
&lt;li>&lt;code>buf&lt;/code>：&lt;code>[]byte&lt;/code>类型的字段，代表缓冲区。在初始化之后，它的长度会保持不变。&lt;/li>
&lt;li>&lt;code>n&lt;/code>：&lt;code>int&lt;/code>类型的字段，代表对缓冲区进行下一次写入时的开始索引。我们可以称之为已写计数。&lt;/li>
&lt;li>&lt;code>wr&lt;/code>：&lt;code>io.Writer&lt;/code>类型的字段，代表底层写入器。&lt;/li>
&lt;/ol>
&lt;p>&lt;code>bufio.Writer&lt;/code>类型有一个名为&lt;code>Flush&lt;/code>的方法，它的主要功能是把相应缓冲区中暂存的所有数据，都写到底层写入器中。数据一旦被写进底层写入器，该方法就会把它们从缓冲区中删除掉。&lt;/p>
&lt;p>不过，这里的删除有时候只是逻辑上的删除而已。不论是否成功地写入了所有的暂存数据，&lt;code>Flush&lt;/code>方法都会妥当处置，并保证不会出现重写和漏写的情况。该类型的字段&lt;code>n&lt;/code>在此会起到很重要的作用。&lt;/p>
&lt;p>&lt;code>bufio.Writer&lt;/code>类型值（以下简称&lt;code>Writer&lt;/code>值）拥有的所有数据写入方法都会在必要的时候调用它的&lt;code>Flush&lt;/code>方法。&lt;/p>
&lt;p>比如，&lt;code>Write&lt;/code>方法有时候会在把数据写进缓冲区之后，调用&lt;code>Flush&lt;/code>方法，以便为后续的新数据腾出空间。&lt;code>WriteString&lt;/code>方法的行为与之类似。&lt;/p>
&lt;p>又比如，&lt;code>WriteByte&lt;/code>方法和&lt;code>WriteRune&lt;/code>方法，都会在发现缓冲区中的可写空间不足以容纳新的字节，或 Unicode 字符的时候，调用&lt;code>Flush&lt;/code>方法。&lt;/p>
&lt;p>此外，如果&lt;code>Write&lt;/code>方法发现需要写入的字节太多，同时缓冲区已空，那么它就会跨过缓冲区，并直接把这些数据写到底层写入器中。&lt;/p>
&lt;p>而&lt;code>ReadFrom&lt;/code>方法，则会在发现底层写入器的类型是&lt;code>io.ReaderFrom&lt;/code>接口的实现之后，直接调用其&lt;code>ReadFrom&lt;/code>方法把参数值持有的数据写进去。&lt;/p>
&lt;p>总之，在通常情况下，只要缓冲区中的可写空间无法容纳需要写入的新数据，&lt;code>Flush&lt;/code>方法就一定会被调用。并且，&lt;code>bufio.Writer&lt;/code>类型的一些方法有时候还会试图走捷径，跨过缓冲区而直接对接数据供需的双方。&lt;/p>
&lt;p>你可以在理解了这些内部机制之后，有的放矢地编写你的代码。不过，在你把所有的数据都写入&lt;code>Writer&lt;/code>值之后，再调用一下它的&lt;code>Flush&lt;/code>方法，显然是最稳妥的。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>今天我们从&amp;quot;&lt;code>bufio.Reader&lt;/code>类型值中的缓冲区起着怎样的作用&amp;quot;这道问题入手，介绍了一部分 bufio 包中的数据类型，在下一次的分享中，我会沿着这个问题继续展开。&lt;/p>
&lt;p>你对今天的内容有什么样的思考，可以给我留言，我们一起讨论。感谢你的收听，我们下期再见。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 43丨bufio包中的数据类型（下）</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/43%E4%B8%A8bufio%E5%8C%85%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8B/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/43%E4%B8%A8bufio%E5%8C%85%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8B/</guid><description>
&lt;p>你好，我是郝林，我今天继续分享 bufio 包中的数据类型。&lt;/p>
&lt;p>在上一篇文章中，我提到了&lt;code>bufio&lt;/code>包中的数据类型主要有&lt;code>Reader&lt;/code>、&lt;code>Scanner&lt;/code>、&lt;code>Writer&lt;/code>和&lt;code>ReadWriter&lt;/code>。并着重讲到了&lt;code>bufio.Reader&lt;/code>类型与&lt;code>bufio.Writer&lt;/code>类型，今天，我们继续专注&lt;code>bufio.Reader&lt;/code>的内容来进行学习。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;h3 id="问题-bufioreader类型读取方法有哪些不同">问题 ：&lt;code>bufio.Reader&lt;/code>类型读取方法有哪些不同？&lt;/h3>
&lt;p>&lt;code>bufio.Reader&lt;/code>类型拥有很多用于读取数据的指针方法，&lt;strong>这里面有 4 个方法可以作为不同读取流程的代表，它们是：&lt;code>Peek&lt;/code>、&lt;code>Read&lt;/code>、&lt;code>ReadSlice&lt;/code>和&lt;code>ReadBytes&lt;/code>。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>&lt;code>Reader&lt;/code>值的&lt;code>Peek&lt;/code>方法&lt;/strong> 的功能是：读取并返回其缓冲区中的&lt;code>n&lt;/code>个未读字节，并且它会从已读计数代表的索引位置开始读。&lt;/p>
&lt;p>在缓冲区未被填满，并且其中的未读字节的数量小于&lt;code>n&lt;/code>的时候，该方法就会调用&lt;code>fill&lt;/code>方法，以启动缓冲区填充流程。但是，如果它发现上次填充缓冲区的时候有错误，那就不会再次填充。&lt;/p>
&lt;p>如果调用方给定的&lt;code>n&lt;/code>比缓冲区的长度还要大，或者缓冲区中未读字节的数量小于&lt;code>n&lt;/code>，那么&lt;code>Peek&lt;/code>方法就会把&amp;quot;所有未读字节组成的序列&amp;quot;作为第一个结果值返回。&lt;/p>
&lt;p>同时，它通常还把&amp;quot;&lt;code>bufio.ErrBufferFull&lt;/code>变量的值（以下简称缓冲区已满的错误）&amp;quot;&lt;br>
作为第二个结果值返回，用来表示：虽然缓冲区被压缩和填满了，但是仍然满足不了要求。&lt;/p>
&lt;p>只有在上述的情况都没有出现时，&lt;code>Peek&lt;/code>方法才能返回：&amp;ldquo;以已读计数为起始的&lt;code>n&lt;/code>个字节&amp;quot;和&amp;quot;表示未发生任何错误的&lt;code>nil&lt;/code>&amp;quot;。&lt;/p>
&lt;p>&lt;strong>&lt;code>bufio.Reader&lt;/code>类型的 Peek 方法有一个鲜明的特点，那就是：即使它读取了缓冲区中的数据，也不会更改已读计数的值。&lt;/strong>&lt;/p>
&lt;p>这个类型的其他读取方法并不是这样。就拿&lt;strong>该类型的&lt;code>Read&lt;/code>方法来说&lt;/strong> ，它有时会把缓冲区中的未读字节，依次拷贝到其参数&lt;code>p&lt;/code>代表的字节切片中，并立即根据实际拷贝的字节数增加已读计数的值。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在缓冲区中还有未读字节的情况下，该方法的做法就是如此。不过，在另一些时候，其所属值的已读计数会等于已写计数，这表明：此时的缓冲区中已经没有任何未读的字节了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当缓冲区中已无未读字节时，&lt;code>Read&lt;/code>方法会先检查参数&lt;code>p&lt;/code>的长度是否大于或等于缓冲区的长度。如果是，那么&lt;code>Read&lt;/code>方法会索性放弃向缓冲区中填充数据，转而直接从其底层读取器中读出数据并拷贝到&lt;code>p&lt;/code>中。这意味着它完全跨过了缓冲区，并直连了数据供需的双方。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>需要注意的是，&lt;code>Peek&lt;/code>方法在遇到类似情况时的做法与这里的区别（这两种做法孰优孰劣还要看具体的使用场景）。&lt;/p>
&lt;p>&lt;code>Peek&lt;/code>方法会在条件满足时填充缓冲区，并在发现参数&lt;code>n&lt;/code>的值比缓冲区的长度更大时，直接返回缓冲区中的所有未读字节。&lt;/p>
&lt;p>如果我们当初设定的缓冲区长度很大，那么在这种情况下的方法执行耗时，就有可能会比较长。最主要的原因是填充缓冲区需要花费较长的时间。&lt;/p>
&lt;p>由&lt;code>fill&lt;/code>方法执行的流程可知，它会尽量填满缓冲区中的可写空间。然而，&lt;code>Read&lt;/code>方法在大多数的情况下，是不会向缓冲区中写入数据的，尤其是在前面描述的那种情况下，即：缓冲区中已无未读字节，且参数&lt;code>p&lt;/code>的长度大于或等于缓冲区的长度。&lt;/p>
&lt;p>此时，该方法会直接从底层读取器那里读出数据，所以数据的读出速度就成为了这种情况下方法执行耗时的决定性因素。&lt;/p>
&lt;p>当然了，我在这里说的只是耗时操作在某些情况下更可能出现在哪里，一切的结论还是要以性能测试的客观结果为准。&lt;/p>
&lt;p>说回&lt;code>Read&lt;/code>方法的内部流程。如果缓冲区中已无未读字节，但其长度比参数&lt;code>p&lt;/code>的长度更大，那么该方法会先把已读计数和已写计数的值都重置为&lt;code>0&lt;/code>，然后再尝试着使用从底层读取器那里获取的数据，对缓冲区进行一次从头至尾的填充。&lt;/p>
&lt;p>不过要注意，这里的尝试只会进行一次。无论在这一时刻是否能够获取到数据，也无论获取时是否有错误发生，都会是如此。而&lt;code>fill&lt;/code>方法的做法与此不同，只要没有发生错误，它就会进行多次尝试，因此它真正获取到一些数据的可能性更大。&lt;/p>
&lt;p>不过，这两个方法有一点是相同，那就是：只要它们把获取到的数据写入缓冲区，就会及时地更新已写计数的值。&lt;/p>
&lt;p>&lt;strong>再来说&lt;code>ReadSlice&lt;/code>方法和&lt;code>ReadBytes&lt;/code>方法。&lt;/strong> 这两个方法的功能总体上来说，都是持续地读取数据，直至遇到调用方给定的分隔符为止。&lt;/p>
&lt;p>&lt;strong>&lt;code>ReadSlice&lt;/code>方法&lt;/strong> 会先在其缓冲区的未读部分中寻找分隔符。如果未能找到，并且缓冲区未满，那么该方法会先通过调用&lt;code>fill&lt;/code>方法对缓冲区进行填充，然后再次寻找，如此往复。&lt;/p>
&lt;p>如果在填充的过程中发生了错误，那么它会把缓冲区中的未读部分作为结果返回，同时返回相应的错误值。&lt;/p>
&lt;p>注意，在这个过程中有可能会出现虽然缓冲区已被填满，但仍然没能找到分隔符的情况。&lt;/p>
&lt;p>这时，&lt;code>ReadSlice&lt;/code>方法会把整个缓冲区（也就是&lt;code>buf&lt;/code>字段代表的字节切片）作为第一个结果值，并把缓冲区已满的错误（即&lt;code>bufio.ErrBufferFull&lt;/code>变量的值）作为第二个结果值。&lt;/p>
&lt;p>经过&lt;code>fill&lt;/code>方法填满的缓冲区肯定从头至尾都只包含了未读的字节，所以这样做是合理的。&lt;/p>
&lt;p>当然了，一旦&lt;code>ReadSlice&lt;/code>方法找到了分隔符，它就会在缓冲区上切出相应的、包含分隔符的字节切片，并把该切片作为结果值返回。无论分隔符找到与否，该方法都会正确地设置已读计数的值。&lt;/p>
&lt;p>比如，在返回缓冲区中的所有未读字节，或者代表全部缓冲区的字节切片之前，它会把已写计数的值赋给已读计数，以表明缓冲区中已无未读字节。&lt;/p>
&lt;p>如果说&lt;code>ReadSlice&lt;/code>是一个容易半途而废的方法的话，那么可以说&lt;code>ReadBytes&lt;/code>方法算得上是相当的执着。&lt;/p>
&lt;p>&lt;strong>&lt;code>ReadBytes&lt;/code>方法&lt;/strong> 会通过调用&lt;code>ReadSlice&lt;/code>方法一次又一次地从缓冲区中读取数据，直至找到分隔符为止。&lt;/p>
&lt;p>在这个过程中，&lt;code>ReadSlice&lt;/code>方法可能会因缓冲区已满而返回所有已读到的字节和相应的错误值，但&lt;code>ReadBytes&lt;/code>方法总是会忽略掉这样的错误，并再次调用&lt;code>ReadSlice&lt;/code>方法，这使得后者会继续填充缓冲区并在其中寻找分隔符。&lt;/p>
&lt;p>除非&lt;code>ReadSlice&lt;/code>方法返回的错误值并不代表缓冲区已满的错误，或者它找到了分隔符，否则这一过程永远不会结束。&lt;/p>
&lt;p>如果寻找的过程结束了，不管是不是因为找到了分隔符，&lt;code>ReadBytes&lt;/code>方法都会把在这个过程中读到的所有字节，按照读取的先后顺序组装成一个字节切片，并把它作为第一个结果值。如果过程结束是因为出现错误，那么它还会把拿到的错误值作为第二个结果值。&lt;/p>
&lt;p>在&lt;code>bufio.Reader&lt;/code>类型的众多读取方法中，依赖&lt;code>ReadSlice&lt;/code>方法的除了&lt;code>ReadBytes&lt;/code>方法，还有&lt;code>ReadLine&lt;/code>方法。不过后者在读取流程上并没有什么特别之处，我就不在这里赘述了。&lt;/p>
&lt;p>另外，该类型的&lt;code>ReadString&lt;/code>方法完全依赖于&lt;code>ReadBytes&lt;/code>方法，前者只是在后者返回的结果值之上做了一个简单的类型转换而已。&lt;/p>
&lt;p>&lt;strong>最后，我还要提醒你一下，有个安全性方面的问题需要你注意。&lt;code>bufio.Reader&lt;/code>类型的&lt;code>Peek&lt;/code>方法、&lt;code>ReadSlice&lt;/code>方法和&lt;code>ReadLine&lt;/code>方法都有可能会造成内容泄露。&lt;/strong>&lt;/p>
&lt;p>这主要是因为它们在正常的情况下都会返回直接基于缓冲区的字节切片。我在讲&lt;code>bytes.Buffer&lt;/code>类型的时候解释过什么叫内容泄露。你可以返回查看。&lt;/p>
&lt;p>调用方可以通过这些方法返回的结果值访问到缓冲区的其他部分，甚至修改缓冲区中的内容。这通常都是很危险的。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>我们用比较长的篇幅介绍了&lt;code>bufio&lt;/code>包中的数据类型，其中的重点是&lt;code>bufio.Reader&lt;/code>类型。&lt;/p>
&lt;p>&lt;code>bufio.Reader&lt;/code>类型代表的是携带缓冲区的读取器。它的值在被初始化的时候需要接受一个底层的读取器，后者的类型必须是&lt;code>io.Reader&lt;/code>接口的实现。&lt;/p>
&lt;p>&lt;code>Reader&lt;/code>值中的缓冲区其实就是一个数据存储中介，它介于底层读取器与读取方法及其调用方之间。此类值的读取方法一般都会先从该值的缓冲区中读取数据，同时在必要的时候预先从其底层读取器那里读出一部分数据，并填充到缓冲区中以备后用。填充缓冲区的操作通常会由该值的&lt;code>fill&lt;/code>方法执行。在填充的过程中，&lt;code>fill&lt;/code>方法有时还会对缓冲区进行压缩。&lt;/p>
&lt;p>在&lt;code>Reader&lt;/code>值拥有的众多读取方法中，有 4 个方法可以作为不同读取流程的代表，它们是：&lt;code>Peek&lt;/code>、&lt;code>Read&lt;/code>、&lt;code>ReadSlice&lt;/code>和&lt;code>ReadBytes&lt;/code>。&lt;/p>
&lt;p>&lt;code>Peek&lt;/code>方法的特点是即使读取了缓冲区中的数据，也不会更改已读计数的值。而&lt;code>Read&lt;/code>方法会在参数值的长度过大，且缓冲区中已无未读字节时，跨过缓冲区并直接向底层读取器索要数据。&lt;/p>
&lt;p>&lt;code>ReadSlice&lt;/code>方法会在缓冲区的未读部分中寻找给定的分隔符，并在必要时对缓冲区进行填充。&lt;/p>
&lt;p>如果在填满缓冲区之后仍然未能找到分隔符，那么该方法就会把整个缓冲区作为第一个结果值返回，同时返回缓冲区已满的错误。&lt;/p>
&lt;p>&lt;code>ReadBytes&lt;/code>方法会通过调用&lt;code>ReadSlice&lt;/code>方法，一次又一次地填充缓冲区，并在其中寻找分隔符。除非发生了未预料到的错误或者找到了分隔符，否则这一过程将会一直进行下去。&lt;/p>
&lt;p>&lt;code>Reader&lt;/code>值的&lt;code>ReadLine&lt;/code>方法会依赖于它的&lt;code>ReadSlice&lt;/code>方法，而其&lt;code>ReadString&lt;/code>方法则完全依赖于&lt;code>ReadBytes&lt;/code>方法。&lt;/p>
&lt;p>另外，值得我们特别注意的是，&lt;code>Reader&lt;/code>值的&lt;code>Peek&lt;/code>方法、&lt;code>ReadSlice&lt;/code>方法和&lt;code>ReadLine&lt;/code>方法都可能会造成其缓冲区中的内容的泄露。&lt;/p>
&lt;p>最后再说一下&lt;code>bufio.Writer&lt;/code>类型。把该类值的缓冲区中暂存的数据写进其底层写入器的功能，主要是由它的&lt;code>Flush&lt;/code>方法实现的。&lt;/p>
&lt;p>此类值的所有数据写入方法都会在必要的时候调用它的&lt;code>Flush&lt;/code>方法。一般情况下，这些写入方法都会先把数据写进其所属值的缓冲区，然后再增加该值中的已写计数。但是，在有些时候，&lt;code>Write&lt;/code>方法和&lt;code>ReadFrom&lt;/code>方法也会跨过缓冲区，并直接把数据写进其底层写入器。&lt;/p>
&lt;p>请记住，虽然这些写入方法都会不时地调用&lt;code>Flush&lt;/code>方法，但是在写入所有的数据之后再显式地调用一下这个方法总是最稳妥的。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>今天的思考题是：&lt;code>bufio.Scanner&lt;/code>类型的主要功用是什么？它有哪些特点？&lt;/p>
&lt;p>感谢你的收听，我们下期再见。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 44丨使用os包中的API（上）</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/44%E4%B8%A8%E4%BD%BF%E7%94%A8os%E5%8C%85%E4%B8%AD%E7%9A%84api%E4%B8%8A/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/44%E4%B8%A8%E4%BD%BF%E7%94%A8os%E5%8C%85%E4%B8%AD%E7%9A%84api%E4%B8%8A/</guid><description>
&lt;p>我们今天要讲的是&lt;code>os&lt;/code>代码包中的 API。这个代码包可以让我们拥有操控计算机操作系统的能力。&lt;/p>
&lt;h2 id="前导内容os-包中的-api">前导内容：os 包中的 API&lt;/h2>
&lt;p>这个代码包提供的都是平台不相关的 API。那么说，什么叫平台不相关的 API 呢？&lt;/p>
&lt;p>它的意思是：这些 API 基于（或者说抽象自）操作系统，为我们使用操作系统的功能提供高层次的支持，但是，它们并不依赖于具体的操作系统。&lt;/p>
&lt;p>不论是 Linux、macOS、Windows，还是 FreeBSD、OpenBSD、Plan9，&lt;code>os&lt;/code>代码包都可以为之提供统一的使用接口。这使得我们可以用同样的方式，来操纵不同的操作系统，并得到相似的结果。&lt;/p>
&lt;p>&lt;code>os&lt;/code>包中的 API 主要可以帮助我们使用操作系统中的文件系统、权限系统、环境变量、系统进程以及系统信号。&lt;/p>
&lt;p>其中，操纵文件系统的 API 最为丰富。我们不但可以利用这些 API 创建和删除文件以及目录，还可以获取到它们的各种信息、修改它们的内容、改变它们的访问权限，等等。&lt;/p>
&lt;p>说到这里，就不得不提及一个非常常用的数据类型：&lt;code>os.File&lt;/code>。&lt;/p>
&lt;p>从字面上来看，&lt;code>os.File&lt;/code>类型代表了操作系统中的文件。但实际上，它可以代表的远不止于此。或许你已经知道，对于类 Unix 的操作系统（包括 Linux、macOS、FreeBSD 等），其中的一切都可以被看做是文件。&lt;/p>
&lt;p>除了文本文件、二进制文件、压缩文件、目录这些常见的形式之外，还有符号链接、各种物理设备（包括内置或外接的面向块或者字符的设备）、命名管道，以及套接字（也就是 socket），等等。&lt;/p>
&lt;p>因此，可以说，我们能够利用&lt;code>os.File&lt;/code>类型操纵的东西太多了。不过，为了聚焦于&lt;code>os.File&lt;/code>本身，同时也为了让本文讲述的内容更加通用，我们在这里主要把&lt;code>os.File&lt;/code>类型应用于常规的文件。&lt;/p>
&lt;p>下面这个问题，就是以&lt;code>os.File&lt;/code>类型代表的最基本内容入手。&lt;strong>我们今天的问题是：&lt;code>os.File&lt;/code>类型都实现了哪些&lt;code>io&lt;/code>包中的接口？&lt;/strong>&lt;/p>
&lt;p>这道题的&lt;strong>典型回答&lt;/strong>是这样的。&lt;/p>
&lt;p>&lt;code>os.File&lt;/code>类型拥有的都是指针方法，所以除了空接口之外，它本身没有实现任何接口。而它的指针类型则实现了很多&lt;code>io&lt;/code>代码包中的接口。&lt;/p>
&lt;p>首先，对于&lt;code>io&lt;/code>包中最核心的 3 个简单接口&lt;code>io.Reader&lt;/code>、&lt;code>io.Writer&lt;/code>和&lt;code>io.Closer&lt;/code>，&lt;code>*os.File&lt;/code>类型都实现了它们。&lt;/p>
&lt;p>其次，该类型还实现了另外的 3 个简单接口，即：&lt;code>io.ReaderAt&lt;/code>、&lt;code>io.Seeker&lt;/code>和&lt;code>io.WriterAt&lt;/code>。&lt;/p>
&lt;p>正是因为&lt;code>*os.File&lt;/code>类型实现了这些简单接口，所以它也顺便实现了&lt;code>io&lt;/code>包的 9 个扩展接口中的 7 个。&lt;/p>
&lt;p>然而，由于它并没有实现简单接口&lt;code>io.ByteReader&lt;/code>和&lt;code>io.RuneReader&lt;/code>，所以它没有实现分别作为这两者的扩展接口的&lt;code>io.ByteScanner&lt;/code>和&lt;code>io.RuneScanner&lt;/code>。&lt;/p>
&lt;p>总之，&lt;code>os.File&lt;/code>类型及其指针类型的值，不但可以通过各种方式读取和写入某个文件中的内容，还可以寻找并设定下一次读取或写入时的起始索引位置，另外还可以随时对文件进行关闭。&lt;/p>
&lt;p>但是，它们并不能专门地读取文件中的下一个字节，或者下一个 Unicode 字符，也不能进行任何的读回退操作。&lt;/p>
&lt;p>不过，单独读取下一个字节或字符的功能也可以通过其他方式来实现，比如，调用它的&lt;code>Read&lt;/code>方法并传入适当的参数值就可以做到这一点。&lt;/p>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>这个问题其实在间接地问&amp;quot;&lt;code>os.File&lt;/code>类型能够以何种方式操作文件？&amp;ldquo;我在前面的典型回答中也给出了简要的答案。&lt;/p>
&lt;p>在我进一步地说明一些细节之前，我们先来看看，怎样才能获得一个&lt;code>os.File&lt;/code>类型的指针值（以下简称&lt;code>File&lt;/code>值）。&lt;/p>
&lt;p>在&lt;code>os&lt;/code>包中，有这样几个函数，即：&lt;code>Create&lt;/code>、&lt;code>NewFile&lt;/code>、&lt;code>Open&lt;/code>和&lt;code>OpenFile&lt;/code>。&lt;/p>
&lt;p>&lt;strong>&lt;code>os.Create&lt;/code>函数用于根据给定的路径创建一个新的文件。&lt;/strong> 它会返回一个&lt;code>File&lt;/code>值和一个错误值。我们可以在该函数返回的&lt;code>File&lt;/code>值之上，对相应的文件进行读操作和写操作。&lt;/p>
&lt;p>不但如此，我们使用这个函数创建的文件，对于操作系统中的所有用户来说，都是可以读和写的。&lt;/p>
&lt;p>换句话说，一旦这样的文件被创建出来，任何能够登录其所属的操作系统的用户，都可以在任意时刻读取该文件中的内容，或者向该文件写入内容。&lt;/p>
&lt;p>注意，如果在我们给予&lt;code>os.Create&lt;/code>函数的路径之上，已经存在了一个文件，那么该函数会先清空现有文件中的全部内容，然后再把它作为第一个结果值返回。&lt;/p>
&lt;p>另外，&lt;code>os.Create&lt;/code>函数是有可能返回非&lt;code>nil&lt;/code>的错误值的。&lt;/p>
&lt;p>比如，如果我们给定的路径上的某一级父目录并不存在，那么该函数就会返回一个&lt;code>*os.PathError&lt;/code>类型的错误值，以表示&amp;quot;不存在的文件或目录&amp;rdquo;。&lt;/p>
&lt;p>&lt;strong>再来看&lt;code>os.NewFile&lt;/code>函数。&lt;/strong> 该函数在被调用的时候，需要接受一个代表文件描述符的、&lt;code>uintptr&lt;/code>类型的值，以及一个用于表示文件名的字符串值。&lt;/p>
&lt;p>如果我们给定的文件描述符并不是有效的，那么这个函数将会返回&lt;code>nil&lt;/code>，否则，它将会返回一个代表了相应文件的&lt;code>File&lt;/code>值。&lt;/p>
&lt;p>注意，不要被这个函数的名称误导了，它的功能并不是创建一个新的文件，而是依据一个已经存在的文件的描述符，来新建一个包装了该文件的&lt;code>File&lt;/code>值。&lt;/p>
&lt;p>例如，我们可以像这样拿到一个包装了标准错误输出的&lt;code>File&lt;/code>值：&lt;/p>
&lt;pre>&lt;code>file3 := os.NewFile(uintptr(syscall.Stderr), &amp;quot;/dev/stderr&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>然后，通过这个&lt;code>File&lt;/code>值向标准错误输出上写入一些内容：&lt;/p>
&lt;pre>&lt;code>if file3 != nil {
defer file3.Close()
file3.WriteString(
&amp;quot;The Go language program writes the contents into stderr.\n&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>&lt;code>os.Open&lt;/code>函数会打开一个文件并返回包装了该文件的&lt;code>File&lt;/code>值。&lt;/strong> 然而，该函数只能以只读模式打开文件。换句话说，我们只能从该函数返回的&lt;code>File&lt;/code>值中读取内容，而不能向它写入任何内容。&lt;/p>
&lt;p>如果我们调用了这个&lt;code>File&lt;/code>值的任何一个写入方法，那么都将会得到一个表示了&amp;quot;坏的文件描述符&amp;quot;的错误值。实际上，我们刚刚说的只读模式，正是应用在&lt;code>File&lt;/code>值所持有的文件描述符之上的。&lt;/p>
&lt;p>所谓的文件描述符，是由通常很小的非负整数代表的。它一般会由 I/O 相关的系统调用返回，并作为某个文件的一个标识存在。&lt;/p>
&lt;p>从操作系统的层面看，针对任何文件的 I/O 操作都需要用到这个文件描述符。只不过，Go 语言中的一些数据类型，为我们隐匿掉了这个描述符，如此一来我们就无需时刻关注和辨别它了（就像&lt;code>os.File&lt;/code>类型这样）。&lt;/p>
&lt;p>实际上，我们在调用前文所述的&lt;code>os.Create&lt;/code>函数、&lt;code>os.Open&lt;/code>函数以及将会提到的&lt;code>os.OpenFile&lt;/code>函数的时候，它们都会执行同一个系统调用，并且在成功之后得到这样一个文件描述符。这个文件描述符将会被储存在它们返回的&lt;code>File&lt;/code>值中。&lt;/p>
&lt;p>&lt;code>os.File&lt;/code>类型有一个指针方法，名叫&lt;code>Fd&lt;/code>。它在被调用之后将会返回一个&lt;code>uintptr&lt;/code>类型的值。这个值就代表了当前的&lt;code>File&lt;/code>值所持有的那个文件描述符。&lt;/p>
&lt;p>不过，在&lt;code>os&lt;/code>包中，除了&lt;code>NewFile&lt;/code>函数需要用到它，它也没有什么别的用武之地了。所以，如果你操作的只是常规的文件或者目录，那么就无需特别地在意它了。&lt;/p>
&lt;p>&lt;strong>最后，再说一下&lt;code>os.OpenFile&lt;/code>函数。&lt;/strong> 这个函数其实是&lt;code>os.Create&lt;/code>函数和&lt;code>os.Open&lt;/code>函数的底层支持，它最为灵活。&lt;/p>
&lt;p>这个函数有 3 个参数，分别名为&lt;code>name&lt;/code>、&lt;code>flag&lt;/code>和&lt;code>perm&lt;/code>。其中的&lt;code>name&lt;/code>指代的就是文件的路径。而&lt;code>flag&lt;/code>参数指的则是需要施加在文件描述符之上的模式，我在前面提到的只读模式就是这里的一个可选项。&lt;/p>
&lt;p>在 Go 语言中，这个只读模式由常量&lt;code>os.O_RDONLY&lt;/code>代表，它是&lt;code>int&lt;/code>类型的。当然了，这里除了只读模式之外，还有几个别的模式可选，我们稍后再细说。&lt;/p>
&lt;p>&lt;code>os.OpenFile&lt;/code>函数的参数&lt;code>perm&lt;/code>代表的也是模式，它的类型是&lt;code>os.FileMode&lt;/code>，此类型是一个基于&lt;code>uint32&lt;/code>类型的再定义类型。&lt;/p>
&lt;p>为了加以区别，我们把参数&lt;code>flag&lt;/code>指代的模式叫做操作模式，而把参数&lt;code>perm&lt;/code>指代的模式叫做权限模式。可以这么说，操作模式限定了操作文件的方式，而权限模式则可以控制文件的访问权限。关于权限模式的更多细节我们将在后面讨论。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/d3/93/d3414376a3343926a2b33cdeeb094893.png" alt="">&lt;br>
（获得 os.File 类型的指针值的几种方式）&lt;/p>
&lt;p>到这里，你需要记住的是，通过&lt;code>os.File&lt;/code>类型的值，我们不但可以对文件进行读取、写入、关闭等操作，还可以设定下一次读取或写入时的起始索引位置。&lt;/p>
&lt;p>此外，&lt;code>os&lt;/code>包中还有用于创建全新文件的&lt;code>Create&lt;/code>函数，用于包装现存文件的&lt;code>NewFile&lt;/code>函数，以及可被用来打开已存在的文件的&lt;code>Open&lt;/code>函数和&lt;code>OpenFile&lt;/code>函数。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>我们今天讲的是&lt;code>os&lt;/code>代码包以及其中的程序实体。我们首先讨论了&lt;code>os&lt;/code>包存在的意义，和它的主要用途。代码包中所包含的 API，都是对操作系统的某方面功能的高层次抽象，这使得我们可以通过它以统一的方式，操纵不同的操作系统，并得到相似的结果。&lt;/p>
&lt;p>在这个代码包中，操纵文件系统的 API 最为丰富，最有代表性的就是数据类型&lt;code>os.File&lt;/code>。&lt;code>os.File&lt;/code>类型不但可以代表操作系统中的文件，还可以代表很多其他的东西。尤其是在类 Unix 的操作系统中，它几乎可以代表一切可以操纵的软件和硬件。&lt;/p>
&lt;p>在下一期的文章中，我会继续讲解 os 包中的 API 的内容。如果你对这部分的知识有什么问题，可以给我留言，感谢你的收听，我们下期再见。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 45丨使用os包中的API（下）</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/45%E4%B8%A8%E4%BD%BF%E7%94%A8os%E5%8C%85%E4%B8%AD%E7%9A%84api%E4%B8%8B/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/45%E4%B8%A8%E4%BD%BF%E7%94%A8os%E5%8C%85%E4%B8%AD%E7%9A%84api%E4%B8%8B/</guid><description>
&lt;p>你好，我是郝林，今天我们继续分享使用 os 包中的 API。&lt;/p>
&lt;p>我们在上一篇文章中。从&amp;quot;&lt;code>os.File&lt;/code>类型都实现了哪些&lt;code>io&lt;/code>包中的接口&amp;quot;这一问题出发，介绍了一系列的相关内容。今天我们继续围绕这一知识点进行扩展。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;h3 id="问题-1可应用于file值的操作模式都有哪些">问题 1：可应用于&lt;code>File&lt;/code>值的操作模式都有哪些？&lt;/h3>
&lt;p>针对&lt;code>File&lt;/code>值的操作模式主要有只读模式、只写模式和读写模式。&lt;/p>
&lt;p>这些模式分别由常量&lt;code>os.O_RDONLY&lt;/code>、&lt;code>os.O_WRONLY&lt;/code>和&lt;code>os.O_RDWR&lt;/code>代表。在我们新建或打开一个文件的时候，必须把这三个模式中的一个设定为此文件的操作模式。&lt;/p>
&lt;p>除此之外，我们还可以为这里的文件设置额外的操作模式，可选项如下所示。&lt;/p>
&lt;ul>
&lt;li>&lt;code>os.O_APPEND&lt;/code>：当向文件中写入内容时，把新内容追加到现有内容的后边。&lt;/li>
&lt;li>&lt;code>os.O_CREATE&lt;/code>：当给定路径上的文件不存在时，创建一个新文件。&lt;/li>
&lt;li>&lt;code>os.O_EXCL&lt;/code>：需要与&lt;code>os.O_CREATE&lt;/code>一同使用，表示在给定的路径上不能有已存在的文件。&lt;/li>
&lt;li>&lt;code>os.O_SYNC&lt;/code>：在打开的文件之上实施同步 I/O。它会保证读写的内容总会与硬盘上的数据保持同步。&lt;/li>
&lt;li>&lt;code>os.O_TRUNC&lt;/code>：如果文件已存在，并且是常规的文件，那么就先清空其中已经存在的任何内容。&lt;/li>
&lt;/ul>
&lt;p>对于以上操作模式的使用，&lt;code>os.Create&lt;/code>函数和&lt;code>os.Open&lt;/code>函数都是现成的例子。&lt;/p>
&lt;pre>&lt;code>func Create(name string) (*File, error) {
return OpenFile(name, O_RDWR|O_CREATE|O_TRUNC, 0666)
}
&lt;/code>&lt;/pre>
&lt;p>&lt;code>os.Create&lt;/code>函数在调用&lt;code>os.OpenFile&lt;/code>函数的时候，给予的操作模式是&lt;code>os.O_RDWR&lt;/code>、&lt;code>os.O_CREATE&lt;/code>和&lt;code>os.O_TRUNC&lt;/code>的组合。&lt;/p>
&lt;p>这就基本上决定了前者的行为，即：如果参数&lt;code>name&lt;/code>代表路径之上的文件不存在，那么就新建一个，否则，先清空现存文件中的全部内容。&lt;/p>
&lt;p>并且，它返回的&lt;code>File&lt;/code>值的读取方法和写入方法都是可用的。这里需要注意，多个操作模式是通过按位或操作符&lt;code>|&lt;/code>组合起来的。&lt;/p>
&lt;p>func Open(name string) (*File, error) {&lt;br>
return OpenFile(name, O_RDONLY, 0)&lt;br>
}&lt;/p>
&lt;p>我在前面说过，&lt;code>os.Open&lt;/code>函数的功能是：以只读模式打开已经存在的文件。其根源就是它在调用&lt;code>os.OpenFile&lt;/code>函数的时候，只提供了一个单一的操作模式&lt;code>os.O_RDONLY&lt;/code>。&lt;/p>
&lt;p>以上，就是我对可应用于&lt;code>File&lt;/code>值的操作模式的简单解释。在 demo88.go 文件中还有少许示例，可供你参考。&lt;/p>
&lt;h3 id="问题-2怎样设定常规文件的访问权限">问题 2：怎样设定常规文件的访问权限？&lt;/h3>
&lt;p>我们已经知道，&lt;code>os.OpenFile&lt;/code>函数的第三个参数&lt;code>perm&lt;/code>代表的是权限模式，其类型是&lt;code>os.FileMode&lt;/code>。但实际上，&lt;code>os.FileMode&lt;/code>类型能够代表的，可远不只权限模式，它还可以代表文件模式（也可以称之为文件种类）。&lt;/p>
&lt;p>由于&lt;code>os.FileMode&lt;/code>是基于&lt;code>uint32&lt;/code>类型的再定义类型，所以它的每个值都包含了 32 个比特位。在这 32 个比特位当中，每个比特位都有其特定的含义。&lt;/p>
&lt;p>比如，如果在其最高比特位上的二进制数是&lt;code>1&lt;/code>，那么该值表示的文件模式就等同于&lt;code>os.ModeDir&lt;/code>，也就是说，相应的文件代表的是一个目录。&lt;/p>
&lt;p>又比如，如果其中的第 26 个比特位上的是&lt;code>1&lt;/code>，那么相应的值表示的文件模式就等同于&lt;code>os.ModeNamedPipe&lt;/code>，也就是说，那个文件代表的是一个命名管道。&lt;/p>
&lt;p>实际上，在一个&lt;code>os.FileMode&lt;/code>类型的值（以下简称&lt;code>FileMode&lt;/code>值）中，只有最低的 9 个比特位才用于表示文件的权限。当我们拿到一个此类型的值时，可以把它和&lt;code>os.ModePerm&lt;/code>常量的值做按位与操作。&lt;/p>
&lt;p>这个常量的值是&lt;code>0777&lt;/code>，是一个八进制的无符号整数，其最低的 9 个比特位上都是&lt;code>1&lt;/code>，而更高的 23 个比特位上都是&lt;code>0&lt;/code>。&lt;/p>
&lt;p>所以，经过这样的按位与操作之后，我们即可得到这个&lt;code>FileMode&lt;/code>值中所有用于表示文件权限的比特位，也就是该值所表示的权限模式。这将会与我们调用&lt;code>FileMode&lt;/code>值的&lt;code>Perm&lt;/code>方法所得到的结果值是一致。&lt;/p>
&lt;p>在这 9 个用于表示文件权限的比特位中，每 3 个比特位为一组，共可分为 3 组。&lt;/p>
&lt;p>&lt;strong>从高到低，这 3 组分别表示的是文件所有者（也就是创建这个文件的那个用户）、文件所有者所属的用户组，以及其他用户对该文件的访问权限。而对于每个组，其中的 3 个比特位从高到低分别表示读权限、写权限和执行权限。&lt;/strong>&lt;/p>
&lt;p>如果在其中的某个比特位上的是&lt;code>1&lt;/code>，那么就意味着相应的权限开启，否则，就表示相应的权限关闭。&lt;/p>
&lt;p>因此，八进制整数&lt;code>0777&lt;/code>就表示：操作系统中的所有用户都对当前的文件有读、写和执行的权限，而八进制整数&lt;code>0666&lt;/code>则表示：所有用户都对当前文件有读和写的权限，但都没有执行的权限。&lt;/p>
&lt;p>我们在调用&lt;code>os.OpenFile&lt;/code>函数的时候，可以根据以上说明设置它的第三个参数。但要注意，只有在新建文件的时候，这里的第三个参数值才是有效的。在其他情况下，即使我们设置了此参数，也不会对目标文件产生任何的影响。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>为了聚焦于&lt;code>os.File&lt;/code>类型本身，我在这两篇文章中主要讲述了怎样把 os.File 类型应用于常规的文件。该类型的指针类型实现了很多&lt;code>io&lt;/code>包中的接口，因此它的具体功用也就可以不言自明了。&lt;/p>
&lt;p>通过该类型的值，我们不但可以对文件进行各种读取、写入、关闭等操作，还可以设定下一次读取或写入时的起始索引位置。&lt;/p>
&lt;p>在使用这个类型的值之前，我们必须先要创建它。所以，我为你重点介绍了几个可以创建，并获得此类型值的函数。&lt;/p>
&lt;p>包括：&lt;code>os.Create&lt;/code>、&lt;code>os.NewFile&lt;/code>、&lt;code>os.Open&lt;/code>和&lt;code>os.OpenFile&lt;/code>。我们用什么样的方式创建&lt;code>File&lt;/code>值，就决定了我们可以使用它来做什么。&lt;/p>
&lt;p>利用&lt;code>os.Create&lt;/code>函数，我们可以在操作系统中创建一个全新的文件，或者清空一个现存文件中的全部内容并重用它。&lt;/p>
&lt;p>在相应的&lt;code>File&lt;/code>值之上，我们可以对该文件进行任何的读写操作。虽然&lt;code>os.NewFile&lt;/code>函数并不是被用来创建新文件的，但是它能够基于一个有效的文件描述符包装出一个可用的&lt;code>File&lt;/code>值。&lt;/p>
&lt;p>&lt;code>os.Open&lt;/code>函数的功能是打开一个已经存在的文件。但是，我们只能通过它返回的&lt;code>File&lt;/code>值对相应的文件进行读操作。&lt;/p>
&lt;p>&lt;code>os.OpenFile&lt;/code>是这些函数中最为灵活的一个，通过它，我们可以设定被打开文件的操作模式和权限模式。实际上，&lt;code>os.Create&lt;/code>函数和&lt;code>os.Open&lt;/code>函数都只是对它的简单封装而已。&lt;/p>
&lt;p>在使用&lt;code>os.OpenFile&lt;/code>函数的时候，我们必须要搞清楚操作模式和权限模式所代表的真正含义，以及设定它们的正确方式。&lt;/p>
&lt;p>我在本文的扩展问题中分别对它们进行了较为详细的解释。同时，我在对应的示例文件中也编写了一些代码。&lt;/p>
&lt;p>你需要认真地阅读和理解这些代码，并在运行它们的过程当中悟出这两种模式的真谛。&lt;/p>
&lt;p>我在本文中讲述的东西对于&lt;code>os&lt;/code>包来说，只是海面上的那部分冰山而已。这个代码包囊括的知识众多，而且延展性都很强。&lt;/p>
&lt;p>如果你想完全理解它们，可能还需要去参看操作系统等方面的文档和教程。由于篇幅原因，我在这里只是做了一个引导，帮助你初识该包中的一些重要的程序实体，并给予你一个可以深入下去的切入点，希望你已经在路上了。&lt;/p>
&lt;p>&lt;strong>思考题&lt;/strong>&lt;/p>
&lt;p>今天的思考题是：怎样通过&lt;code>os&lt;/code>包中的 API 创建和操纵一个系统进程？&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 46丨访问网络服务</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/46%E4%B8%A8%E8%AE%BF%E9%97%AE%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/46%E4%B8%A8%E8%AE%BF%E9%97%AE%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/</guid><description>
&lt;p>你真的很棒，已经跟着我一起从最开始初识 Go 语言，一步一步地走到了这里。&lt;/p>
&lt;p>在这之前的几十篇文章中，我向你一点一点地介绍了很多 Go 语言的核心知识，以及一些最最基础的标准库代码包。我想，你已经完全有能力独立去做一些事情了。&lt;/p>
&lt;p>为了激发你更多的兴趣，我还打算用几篇文章来说说 Go 语言的网络编程。不过，关于网络编程这个事情，恐怕早已庞大到用一两本专著都无法对它进行完整论述的地步了。&lt;/p>
&lt;p>所以，我在这里说的东西只能算是个引子。只要这样能让你产生想去尝试的冲动，我就很开心了。&lt;/p>
&lt;h2 id="前导内容socket-与-ipc">前导内容：socket 与 IPC&lt;/h2>
&lt;p>人们常常会使用 Go 语言去编写网络程序（当然了，这方面也是 Go 语言最为擅长的事情）。说到网络编程，我们就不得不提及 socket。&lt;/p>
&lt;p>socket，常被翻译为套接字，它应该算是网络编程世界中最为核心的知识之一了。关于 socket，我们可以讨论的东西太多了，因此，我在这里只围绕着 Go 语言向你介绍一些关于它的基础知识。&lt;/p>
&lt;p>所谓 socket，是一种 IPC 方法。IPC 是 Inter-Process Communication 的缩写，可以被翻译为进程间通信。顾名思义，IPC 这个概念（或者说规范）主要定义的是多个进程之间，相互通信的方法。&lt;/p>
&lt;p>这些方法主要包括：系统信号（signal）、管道（pipe）、套接字 （socket）、文件锁（file lock）、消息队列（message queue）、信号灯（semaphore，有的地方也称之为信号量）等。现存的主流操作系统大都对 IPC 提供了强有力的支持，尤其是 socket。&lt;/p>
&lt;p>你可能已经知道，Go 语言对 IPC 也提供了一定的支持。&lt;/p>
&lt;p>比如，在&lt;code>os&lt;/code>代码包和&lt;code>os/signal&lt;/code>代码包中就有针对系统信号的 API。&lt;/p>
&lt;p>又比如，&lt;code>os.Pipe&lt;/code>函数可以创建命名管道，而&lt;code>os/exec&lt;/code>代码包则对另一类管道（匿名管道）提供了支持。对于 socket，Go 语言与之相应的程序实体都在其标准库的&lt;code>net&lt;/code>代码包中。&lt;/p>
&lt;p>**毫不夸张地说，在众多的 IPC 方法中，socket 是最为通用和灵活的一种。**与其他的 IPC 方法不同，利用 socket 进行通信的进程，可以不局限在同一台计算机当中。&lt;/p>
&lt;p>实际上，通信的双方无论存在于世界上的哪个角落，只要能够通过计算机的网卡端口以及网络进行互联，就可以使用 socket。&lt;/p>
&lt;p>支持 socket 的操作系统一般都会对外提供一套 API。&lt;strong>跑在它们之上的应用程序利用这套 API，就可以与互联网上的另一台计算机中的程序、同一台计算机中的其他程序，甚至同一个程序中的其他线程进行通信。&lt;/strong>&lt;/p>
&lt;p>例如，在 Linux 操作系统中，用于创建 socket 实例的 API，就是由一个名为&lt;code>socket&lt;/code>的系统调用代表的。这个系统调用是 Linux 内核的一部分。&lt;/p>
&lt;blockquote>
&lt;p>所谓的系统调用，你可以理解为特殊的 C 语言函数。它们是连接应用程序和操作系统内核的桥梁，也是应用程序使用操作系统功能的唯一渠道。&lt;/p>
&lt;/blockquote>
&lt;p>在 Go 语言标准库的&lt;code>syscall&lt;/code>代码包中，有一个与这个&lt;code>socket&lt;/code>系统调用相对应的函数。这两者的函数签名是基本一致的，它们都会接受三个&lt;code>int&lt;/code>类型的参数，并会返回一个可以代表文件描述符的结果。&lt;/p>
&lt;p>但不同的是，&lt;code>syscall&lt;/code>包中的&lt;code>Socket&lt;/code>函数本身是平台不相关的。在其底层，Go 语言为它支持的每个操作系统都做了适配，这才使得这个函数无论在哪个平台上，总是有效的。&lt;/p>
&lt;p>Go 语言的&lt;code>net&lt;/code>代码包中的很多程序实体，都会直接或间接地使用到&lt;code>syscall.Socket&lt;/code>函数。&lt;/p>
&lt;p>比如，我们在调用&lt;code>net.Dial&lt;/code>函数的时候，会为它的两个参数设定值。其中的第一个参数名为&lt;code>network&lt;/code>，它决定着 Go 程序在底层会创建什么样的 socket 实例，并使用什么样的协议与其他程序通信。&lt;/p>
&lt;p>下面，我们就通过一个简单的问题来看看怎样正确地调用&lt;code>net.Dial&lt;/code>函数。&lt;/p>
&lt;p>&lt;strong>今天的问题是：&lt;code>net.Dial&lt;/code>函数的第一个参数&lt;code>network&lt;/code>有哪些可选值？&lt;/strong>&lt;/p>
&lt;p>这道题的&lt;strong>典型回答&lt;/strong>是这样的。&lt;/p>
&lt;p>&lt;code>net.Dial&lt;/code>函数会接受两个参数，分别名为&lt;code>network&lt;/code>和&lt;code>address&lt;/code>，都是&lt;code>string&lt;/code>类型的。&lt;/p>
&lt;p>参数&lt;code>network&lt;/code>常用的可选值一共有 9 个。这些值分别代表了程序底层创建的 socket 实例可使用的不同通信协议，罗列如下。&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;quot;tcp&amp;quot;&lt;/code>：代表 TCP 协议，其基于的 IP 协议的版本根据参数&lt;code>address&lt;/code>的值自适应。&lt;/li>
&lt;li>&lt;code>&amp;quot;tcp4&amp;quot;&lt;/code>：代表基于 IP 协议第四版的 TCP 协议。&lt;/li>
&lt;li>&lt;code>&amp;quot;tcp6&amp;quot;&lt;/code>：代表基于 IP 协议第六版的 TCP 协议。&lt;/li>
&lt;li>&lt;code>&amp;quot;udp&amp;quot;&lt;/code>：代表 UDP 协议，其基于的 IP 协议的版本根据参数&lt;code>address&lt;/code>的值自适应。&lt;/li>
&lt;li>&lt;code>&amp;quot;udp4&amp;quot;&lt;/code>：代表基于 IP 协议第四版的 UDP 协议。&lt;/li>
&lt;li>&lt;code>&amp;quot;udp6&amp;quot;&lt;/code>：代表基于 IP 协议第六版的 UDP 协议。&lt;/li>
&lt;li>&lt;code>&amp;quot;unix&amp;quot;&lt;/code>：代表 Unix 通信域下的一种内部 socket 协议，以 SOCK_STREAM 为 socket 类型。&lt;/li>
&lt;li>&lt;code>&amp;quot;unixgram&amp;quot;&lt;/code>：代表 Unix 通信域下的一种内部 socket 协议，以 SOCK_DGRAM 为 socket 类型。&lt;/li>
&lt;li>&lt;code>&amp;quot;unixpacket&amp;quot;&lt;/code>：代表 Unix 通信域下的一种内部 socket 协议，以 SOCK_SEQPACKET 为 socket 类型。&lt;/li>
&lt;/ul>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>为了更好地理解这些可选值的深层含义，我们需要了解一下&lt;code>syscall.Socket&lt;/code>函数接受的那三个参数。&lt;/p>
&lt;p>我在前面说了，这个函数接受的三个参数都是&lt;code>int&lt;/code>类型的。这些参数所代表的分别是想要创建的 socket 实例通信域、类型以及使用的协议。&lt;/p>
&lt;p>Socket 的通信域主要有这样几个可选项：IPv4 域、IPv6 域和 Unix 域。&lt;/p>
&lt;p>我想你应该能够猜出&lt;strong>IPv4 域、IPv6 域&lt;/strong>的含义，它们对应的分别是基于 IP 协议第四版的网络，和基于 IP 协议第六版的网络。&lt;/p>
&lt;p>现在的计算机网络大都是基于 IP 协议第四版的，但是由于现有 IP 地址的逐渐枯竭，网络世界也在逐步地支持 IP 协议第六版。&lt;/p>
&lt;p>&lt;strong>Unix 域&lt;/strong>，指的是一种类 Unix 操作系统中特有的通信域。在装有此类操作系统的同一台计算机中，应用程序可以基于此域建立 socket 连接。&lt;/p>
&lt;p>以上三种通信域分别可以由&lt;code>syscall&lt;/code>代码包中的常量&lt;code>AF_INET&lt;/code>、&lt;code>AF_INET6&lt;/code>和&lt;code>AF_UNIX&lt;/code>表示。&lt;/p>
&lt;p>Socket 的类型一共有 4 种，分别是：&lt;code>SOCK_DGRAM&lt;/code>、&lt;code>SOCK_STREAM&lt;/code>、&lt;code>SOCK_SEQPACKET&lt;/code>以及&lt;code>SOCK_RAW&lt;/code>。&lt;code>syscall&lt;/code>代码包中也都有同名的常量与之对应。前两者更加常用一些。&lt;/p>
&lt;p>&lt;code>SOCK_DGRAM&lt;/code>中的&amp;quot;DGRAM&amp;quot;代表的是 datagram，即数据报文。它是一种有消息边界，但没有逻辑连接的非可靠 socket 类型，我们熟知的基于 UDP 协议的网络通信就属于此类。&lt;/p>
&lt;p>有消息边界的意思是，与 socket 相关的操作系统内核中的程序（以下简称内核程序）在发送或接收数据的时候是以消息为单位的。&lt;/p>
&lt;p>你可以把消息理解为带有固定边界的一段数据。内核程序可以自动地识别和维护这种边界，并在必要的时候，把数据切割成一个一个的消息，或者把多个消息串接成连续的数据。如此一来，应用程序只需要面向消息进行处理就可以了。&lt;/p>
&lt;p>所谓的有逻辑连接是指，通信双方在收发数据之前必须先建立网络连接。待连接建立好之后，双方就可以一对一地进行数据传输了。显然，基于 UDP 协议的网络通信并不需要这样，它是没有逻辑连接的。&lt;/p>
&lt;p>只要应用程序指定好对方的网络地址，内核程序就可以立即把数据报文发送出去。这有优势，也有劣势。&lt;/p>
&lt;p>优势是发送速度快，不长期占用网络资源，并且每次发送都可以指定不同的网络地址。&lt;/p>
&lt;p>当然了，最后一个优势有时候也是劣势，因为这会使数据报文更长一些。其他的劣势有，无法保证传输的可靠性，不能实现数据的有序性，以及数据只能单向进行传输。&lt;/p>
&lt;p>而&lt;code>SOCK_STREAM&lt;/code>这个 socket 类型，恰恰与&lt;code>SOCK_DGRAM&lt;/code>相反。**它没有消息边界，但有逻辑连接，能够保证传输的可靠性和数据的有序性，同时还可以实现数据的双向传输。**众所周知的基于 TCP 协议的网络通信就属于此类。&lt;/p>
&lt;blockquote>
&lt;p>这样的网络通信传输数据的形式是字节流，而不是数据报文。字节流是以字节为单位的。内核程序无法感知一段字节流中包含了多少个消息，以及这些消息是否完整，这完全需要应用程序自己去把控。&lt;/p>
&lt;p>不过，此类网络通信中的一端，总是会忠实地按照另一端发送数据时的字节排列顺序，接收和缓存它们。所以，应用程序需要根据双方的约定去数据中查找消息边界，并按照边界切割数据，仅此而已。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>syscall.Socket&lt;/code>函数的第三个参数用于表示 socket 实例所使用的协议。&lt;/p>
&lt;p>通常，只要明确指定了前两个参数的值，我们就无需再去确定第三个参数值了，一般把它置为&lt;code>0&lt;/code>就可以了。这时，内核程序会自行选择最合适的协议。&lt;/p>
&lt;p>比如，当前两个参数值分别为&lt;code>syscall.AF_INET&lt;/code>和&lt;code>syscall.SOCK_DGRAM&lt;/code>的时候，内核程序会选择 UDP 作为协议。&lt;/p>
&lt;p>又比如，在前两个参数值分别为&lt;code>syscall.AF_INET6&lt;/code>和&lt;code>syscall.SOCK_STREAM&lt;/code>时，内核程序可能会选择 TCP 作为协议。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/99/69/99f8a0405a98ea16495364be352fe969.png" alt="">&lt;br>
（syscall.Socket 函数一瞥）&lt;/p>
&lt;p>不过，你也看到了，在使用&lt;code>net&lt;/code>包中的高层次 API 的时候，我们连那前两个参数值都无需给定，只需要把前面罗列的那些字符串字面量的其中一个，作为&lt;code>network&lt;/code>参数的值就好了。&lt;/p>
&lt;p>当然，如果你在使用这些 API 的时候，能够想到我在上面说的这些基础知识的话，那么一定会对你做出正确的判断和选择有所帮助。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;h3 id="问题-1调用netdialtimeout函数时给定的超时时间意味着什么">问题 1：调用&lt;code>net.DialTimeout&lt;/code>函数时给定的超时时间意味着什么？&lt;/h3>
&lt;p>简单来说，这里的超时时间，代表着函数为网络连接建立完成而等待的最长时间。这是一个相对的时间。它会由这个函数的参数&lt;code>timeout&lt;/code>的值表示。&lt;/p>
&lt;p>开始的时间点几乎是我们调用&lt;code>net.DialTimeout&lt;/code>函数的那一刻。在这之后，时间会主要花费在&amp;quot;解析参数&lt;code>network&lt;/code>和&lt;code>address&lt;/code>的值&amp;quot;，以及&amp;quot;创建 socket 实例并建立网络连接&amp;quot;这两件事情上。&lt;/p>
&lt;p>不论执行到哪一步，只要在绝对的超时时间达到的那一刻，网络连接还没有建立完成，该函数就会返回一个代表了 I/O 操作超时的错误值。&lt;/p>
&lt;p>值得注意的是，在解析&lt;code>address&lt;/code>的值的时候，函数会确定网络服务的 IP 地址、端口号等必要信息，并在需要时访问 DNS 服务。&lt;/p>
&lt;p>另外，如果解析出的 IP 地址有多个，那么函数会串行或并发地尝试建立连接。但无论用什么样的方式尝试，函数总会以最先建立成功的那个连接为准。&lt;/p>
&lt;p>同时，它还会根据超时前的剩余时间，去设定针对每次连接尝试的超时时间，以便让它们都有适当的时间执行。&lt;/p>
&lt;p>再多说一点。在&lt;code>net&lt;/code>包中还有一个名为&lt;code>Dialer&lt;/code>的结构体类型。该类型有一个名叫&lt;code>Timeout&lt;/code>的字段，它与上述的&lt;code>timeout&lt;/code>参数的含义是完全一致的。实际上，&lt;code>net.DialTimeout&lt;/code>函数正是利用了这个类型的值才得以实现功能的。&lt;/p>
&lt;p>&lt;code>net.Dialer&lt;/code>类型值得你好好学习一下，尤其是它的每个字段的功用以及它的&lt;code>DialContext&lt;/code>方法。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>我们今天提及了使用 Go 语言进行网络编程这个主题。作为引子，我先向你介绍了关于 socket 的一些基础知识。socket 常被翻译为套接字，它是一种 IPC 方法。IPC 可以被翻译为进程间通信，它主要定义了多个进程之间相互通信的方法。&lt;/p>
&lt;p>Socket 是 IPC 方法中最为通用和灵活的一种。与其他的方法不同，利用 socket 进行通信的进程可以不局限在同一台计算机当中。&lt;/p>
&lt;p>只要通信的双方能够通过计算机的网卡端口，以及网络进行互联就可以使用 socket，无论它们存在于世界上的哪个角落。&lt;/p>
&lt;p>支持 socket 的操作系统一般都会对外提供一套 API。Go 语言的&lt;code>syscall&lt;/code>代码包中也有与之对应的程序实体。其中最重要的一个就是&lt;code>syscall.Socket&lt;/code>函数。&lt;/p>
&lt;p>不过，&lt;code>syscall&lt;/code>包中的这些程序实体，对于普通的 Go 程序来说都属于底层的东西了，我们通常很少会用到。一般情况下，我们都会使用&lt;code>net&lt;/code>代码包及其子包中的 API 去编写网络程序。&lt;/p>
&lt;p>&lt;code>net&lt;/code>包中一个很常用的函数，名为&lt;code>Dial&lt;/code>。这个函数主要用于连接网络服务。它会接受两个参数，你需要搞明白这两个参数的值都应该怎么去设定。&lt;/p>
&lt;p>尤其是&lt;code>network&lt;/code>参数，它有很多的可选值，其中最常用的有 9 个。这些可选值的背后都代表着相应的 socket 属性，包括通信域、类型以及使用的协议。一旦你理解了这些 socket 属性，就一定会帮助你做出正确的判断和选择。&lt;/p>
&lt;p>与此相关的一个函数是&lt;code>net.DialTimeout&lt;/code>。我们在调用它的时候需要设定一个超时时间。这个超时时间的含义你是需要搞清楚的。&lt;/p>
&lt;p>通过它，我们可以牵扯出这个函数的一大堆实现细节。另外，还有一个叫做&lt;code>net.Dialer&lt;/code>的结构体类型。这个类型其实是前述两个函数的底层实现，值得你好好地学习一番。&lt;/p>
&lt;p>以上，就是我今天讲的主要内容，它们都是关于怎样访问网络服务的。你可以从这里入手，进入 Go 语言的网络编程世界。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>今天的思考题也与超时时间有关。在你调用了&lt;code>net.Dial&lt;/code>等函数之后，如果成功就会得到一个代表了网络连接的&lt;code>net.Conn&lt;/code>接口类型的值。我的问题是：怎样在&lt;code>net.Conn&lt;/code>类型的值上正确地设定针对读操作和写操作的超时时间？&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 47丨基于HTTP协议的网络服务</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/47%E4%B8%A8%E5%9F%BA%E4%BA%8Ehttp%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/47%E4%B8%A8%E5%9F%BA%E4%BA%8Ehttp%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/</guid><description>
&lt;p>我们在上一篇文章中简单地讨论了网络编程和 socket，并由此提及了 Go 语言标准库中的&lt;code>syscall&lt;/code>代码包和&lt;code>net&lt;/code>代码包。&lt;/p>
&lt;p>我还重点讲述了&lt;code>net.Dial&lt;/code>函数和&lt;code>syscall.Socket&lt;/code>函数的参数含义。前者间接地调用了后者，所以正确理解后者，会对用好前者有很大裨益。&lt;/p>
&lt;p>之后，我们把视线转移到了&lt;code>net.DialTimeout&lt;/code>函数以及它对操作超时的处理上，这又涉及了&lt;code>net.Dialer&lt;/code>类型。实际上，这个类型正是&lt;code>net&lt;/code>包中这两个&amp;quot;拨号&amp;quot;函数的底层实现。&lt;/p>
&lt;p>我们像上一篇文章的示例代码那样用&lt;code>net.Dial&lt;/code>或&lt;code>net.DialTimeout&lt;/code>函数来访问基于 HTTP 协议的网络服务是完全没有问题的。HTTP 协议是基于 TCP/IP 协议栈的，并且它也是一个面向普通文本的协议。&lt;/p>
&lt;p>原则上，我们使用任何一个文本编辑器，都可以轻易地写出一个完整的 HTTP 请求报文。只要你搞清楚了请求报文的头部（header）和主体（body）应该包含的内容，这样做就会很容易。所以，在这种情况下，即便直接使用&lt;code>net.Dial&lt;/code>函数，你应该也不会感觉到困难。&lt;/p>
&lt;p>不过，不困难并不意味着很方便。如果我们只是访问基于 HTTP 协议的网络服务的话，那么使用&lt;code>net/http&lt;/code>代码包中的程序实体来做，显然会更加便捷。&lt;/p>
&lt;p>其中，最便捷的是使用&lt;code>http.Get&lt;/code>函数。我们在调用它的时候只需要传给它一个 URL 就可以了，比如像下面这样：&lt;/p>
&lt;pre>&lt;code>url1 := &amp;quot;http://google.cn&amp;quot;
fmt.Printf(&amp;quot;Send request to %q with method GET ...\n&amp;quot;, url1)
resp1, err := http.Get(url1)
if err != nil {
fmt.Printf(&amp;quot;request sending error: %v\n&amp;quot;, err)
}
defer resp1.Body.Close()
line1 := resp1.Proto + &amp;quot; &amp;quot; + resp1.Status
fmt.Printf(&amp;quot;The first line of response:\n%s\n&amp;quot;, line1)
&lt;/code>&lt;/pre>
&lt;p>&lt;code>http.Get&lt;/code>函数会返回两个结果值。第一个结果值的类型是&lt;code>*http.Response&lt;/code>，它是网络服务给我们传回来的响应内容的结构化表示。&lt;/p>
&lt;p>第二个结果值是&lt;code>error&lt;/code>类型的，它代表了在创建和发送 HTTP 请求，以及接收和解析 HTTP 响应的过程中可能发生的错误。&lt;/p>
&lt;p>&lt;code>http.Get&lt;/code>函数会在内部使用缺省的 HTTP 客户端，并且调用它的&lt;code>Get&lt;/code>方法以完成功能。这个缺省的 HTTP 客户端是由&lt;code>net/http&lt;/code>包中的公开变量&lt;code>DefaultClient&lt;/code>代表的，其类型是&lt;code>*http.Client&lt;/code>。它的基本类型也是可以被拿来使用的，甚至它还是开箱即用的。下面的这两行代码：&lt;/p>
&lt;pre>&lt;code>var httpClient1 http.Client
resp2, err := httpClient1.Get(url1)
&lt;/code>&lt;/pre>
&lt;p>与前面的这一行代码&lt;/p>
&lt;pre>&lt;code>resp1, err := http.Get(url1)
&lt;/code>&lt;/pre>
&lt;p>是等价的。&lt;/p>
&lt;p>&lt;code>http.Client&lt;/code>是一个结构体类型，并且它包含的字段都是公开的。之所以该类型的零值仍然可用，是因为它的这些字段要么存在着相应的缺省值，要么其零值直接就可以使用，且代表着特定的含义。&lt;/p>
&lt;p>现在，我问你一个问题，是关于这个类型中的最重要的一个字段的。&lt;/p>
&lt;p>&lt;strong>今天的问题是：&lt;code>http.Client&lt;/code>类型中的&lt;code>Transport&lt;/code>字段代表着什么？&lt;/strong>&lt;/p>
&lt;p>这道题的&lt;strong>典型回答&lt;/strong>是这样的。&lt;/p>
&lt;p>&lt;code>http.Client&lt;/code>类型中的&lt;code>Transport&lt;/code>字段代表着：向网络服务发送 HTTP 请求，并从网络服务接收 HTTP 响应的操作过程。也就是说，该字段的方法&lt;code>RoundTrip&lt;/code>应该实现单次 HTTP 事务（或者说基于 HTTP 协议的单次交互）需要的所有步骤。&lt;/p>
&lt;p>这个字段是&lt;code>http.RoundTripper&lt;/code>接口类型的，它有一个由&lt;code>http.DefaultTransport&lt;/code>变量代表的缺省值（以下简称&lt;code>DefaultTransport&lt;/code>）。当我们在初始化一个&lt;code>http.Client&lt;/code>类型的值（以下简称&lt;code>Client&lt;/code>值）的时候，如果没有显式地为该字段赋值，那么这个&lt;code>Client&lt;/code>值就会直接使用&lt;code>DefaultTransport&lt;/code>。&lt;/p>
&lt;p>顺便说一下，&lt;code>http.Client&lt;/code>类型的&lt;code>Timeout&lt;/code>字段，代表的正是前面所说的单次 HTTP 事务的超时时间，它是&lt;code>time.Duration&lt;/code>类型的。它的零值是可用的，用于表示没有设置超时时间。&lt;/p>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>下面，我们再通过该字段的缺省值&lt;code>DefaultTransport&lt;/code>，来深入地了解一下这个&lt;code>Transport&lt;/code>字段。&lt;/p>
&lt;p>&lt;code>DefaultTransport&lt;/code>的实际类型是&lt;code>*http.Transport&lt;/code>，后者即为&lt;code>http.RoundTripper&lt;/code>接口的默认实现。这个类型是可以被复用的，也推荐被复用，同时，它也是并发安全的。正因为如此，&lt;code>http.Client&lt;/code>类型也拥有着同样的特质。&lt;/p>
&lt;p>&lt;code>http.Transport&lt;/code>类型，会在内部使用一个&lt;code>net.Dialer&lt;/code>类型的值（以下简称&lt;code>Dialer&lt;/code>值），并且，它会把该值的&lt;code>Timeout&lt;/code>字段的值，设定为&lt;code>30&lt;/code>秒。&lt;/p>
&lt;p>也就是说，这个&lt;code>Dialer&lt;/code>值如果在 30 秒内还没有建立好网络连接，那么就会被判定为操作超时。在&lt;code>DefaultTransport&lt;/code>的值被初始化的时候，这样的&lt;code>Dialer&lt;/code>值的&lt;code>DialContext&lt;/code>方法会被赋给前者的&lt;code>DialContext&lt;/code>字段。&lt;/p>
&lt;p>&lt;code>http.Transport&lt;/code>类型还包含了很多其他的字段，其中有一些字段是关于操作超时的。&lt;/p>
&lt;ul>
&lt;li>&lt;code>IdleConnTimeout&lt;/code>：含义是空闲的连接在多久之后就应该被关闭。&lt;/li>
&lt;li>&lt;code>DefaultTransport&lt;/code>会把该字段的值设定为&lt;code>90&lt;/code>秒。如果该值为&lt;code>0&lt;/code>，那么就表示不关闭空闲的连接。注意，这样很可能会造成资源的泄露。&lt;/li>
&lt;li>&lt;code>ResponseHeaderTimeout&lt;/code>：含义是，从客户端把请求完全递交给操作系统到从操作系统那里接收到响应报文头的最大时长。&lt;code>DefaultTransport&lt;/code>并没有设定该字段的值。&lt;/li>
&lt;li>&lt;code>ExpectContinueTimeout&lt;/code>：含义是，在客户端递交了请求报文头之后，等待接收第一个响应报文头的最长时间。在客户端想要使用 HTTP 的&amp;quot;POST&amp;quot;方法把一个很大的报文体发送给服务端的时候，它可以先通过发送一个包含了&amp;quot;Expect: 100-continue&amp;quot;的请求报文头，来询问服务端是否愿意接收这个大报文体。这个字段就是用于设定在这种情况下的超时时间的。注意，如果该字段的值不大于&lt;code>0&lt;/code>，那么无论多大的请求报文体都将会被立即发送出去。这样可能会造成网络资源的浪费。&lt;code>DefaultTransport&lt;/code>把该字段的值设定为了&lt;code>1&lt;/code>秒。&lt;/li>
&lt;li>&lt;code>TLSHandshakeTimeout&lt;/code>：TLS 是 Transport Layer Security 的缩写，可以被翻译为传输层安全。这个字段代表了基于 TLS 协议的连接在被建立时的握手阶段的超时时间。若该值为&lt;code>0&lt;/code>，则表示对这个时间不设限。&lt;code>DefaultTransport&lt;/code>把该字段的值设定为了&lt;code>10&lt;/code>秒。&lt;/li>
&lt;/ul>
&lt;p>此外，还有一些与&lt;code>IdleConnTimeout&lt;/code>相关的字段值得我们关注，即：&lt;code>MaxIdleConns&lt;/code>、&lt;code>MaxIdleConnsPerHost&lt;/code>以及&lt;code>MaxConnsPerHost&lt;/code>。&lt;/p>
&lt;p>无论当前的&lt;code>http.Transport&lt;/code>类型的值（以下简称&lt;code>Transport&lt;/code>值）访问了多少个网络服务，&lt;code>MaxIdleConns&lt;/code>字段都只会对空闲连接的总数做出限定。而&lt;code>MaxIdleConnsPerHost&lt;/code>字段限定的则是，该&lt;code>Transport&lt;/code>值访问的每一个网络服务的最大空闲连接数。&lt;/p>
&lt;p>每一个网络服务都会有自己的网络地址，可能会使用不同的网络协议，对于一些 HTTP 请求也可能会用到代理。&lt;code>Transport&lt;/code>值正是通过这三个方面的具体情况，来鉴别不同的网络服务的。&lt;/p>
&lt;p>&lt;code>MaxIdleConnsPerHost&lt;/code>字段的缺省值，由&lt;code>http.DefaultMaxIdleConnsPerHost&lt;/code>变量代表，值为&lt;code>2&lt;/code>。也就是说，在默认情况下，对于某一个&lt;code>Transport&lt;/code>值访问的每一个网络服务，它的空闲连接数都最多只能有两个。&lt;/p>
&lt;p>与&lt;code>MaxIdleConnsPerHost&lt;/code>字段的含义相似的，是&lt;code>MaxConnsPerHost&lt;/code>字段。不过，后者限制的是，针对某一个&lt;code>Transport&lt;/code>值访问的每一个网络服务的最大连接数，不论这些连接是否是空闲的。并且，该字段没有相应的缺省值，它的零值表示不对此设限。&lt;/p>
&lt;p>&lt;code>DefaultTransport&lt;/code>并没有显式地为&lt;code>MaxIdleConnsPerHost&lt;/code>和&lt;code>MaxConnsPerHost&lt;/code>这两个字段赋值，但是它却把&lt;code>MaxIdleConns&lt;/code>字段的值设定为了&lt;code>100&lt;/code>。&lt;/p>
&lt;p>换句话说，在默认情况下，空闲连接的总数最大为&lt;code>100&lt;/code>，而针对每个网络服务的最大空闲连接数为&lt;code>2&lt;/code>。注意，上述两个与空闲连接数有关的字段的值应该是联动的，所以，你有时候需要根据实际情况来定制它们。&lt;/p>
&lt;p>当然了，这首先需要我们在初始化&lt;code>Client&lt;/code>值的时候，定制它的&lt;code>Transport&lt;/code>字段的值。定制这个值的方式，可以参看&lt;code>DefaultTransport&lt;/code>变量的声明。&lt;/p>
&lt;p>最后，我简单说一下为什么会出现空闲的连接。我们都知道，HTTP 协议有一个请求报文头叫做&amp;quot;Connection&amp;quot;。在 HTTP 协议的 1.1 版本中，这个报文头的值默认是&amp;quot;keep-alive&amp;quot;。&lt;/p>
&lt;p>在这种情况下的网络连接都是持久连接，它们会在当前的 HTTP 事务完成后仍然保持着连通性，因此是可以被复用的。&lt;/p>
&lt;p>既然连接可以被复用，那么就会有两种可能。一种可能是，针对于同一个网络服务，有新的 HTTP 请求被递交，该连接被再次使用。另一种可能是，不再有对该网络服务的 HTTP 请求，该连接被闲置。&lt;/p>
&lt;p>显然，后一种可能就产生了空闲的连接。另外，如果分配给某一个网络服务的连接过多的话，也可能会导致空闲连接的产生，因为每一个新递交的 HTTP 请求，都只会征用一个空闲的连接。所以，为空闲连接设定限制，在大多数情况下都是很有必要的，也是需要斟酌的。&lt;/p>
&lt;p>如果我们想彻底地杜绝空闲连接的产生，那么可以在初始化&lt;code>Transport&lt;/code>值的时候把它的&lt;code>DisableKeepAlives&lt;/code>字段的值设定为&lt;code>true&lt;/code>。这时，HTTP 请求的&amp;quot;Connection&amp;quot;报文头的值就会被设置为&amp;quot;close&amp;quot;。这会告诉网络服务，这个网络连接不必保持，当前的 HTTP 事务完成后就可以断开它了。&lt;/p>
&lt;p>如此一来，每当一个 HTTP 请求被递交时，就都会产生一个新的网络连接。这样做会明显地加重网络服务以及客户端的负载，并会让每个 HTTP 事务都耗费更多的时间。所以，在一般情况下，我们都不要去设置这个&lt;code>DisableKeepAlives&lt;/code>字段。&lt;/p>
&lt;p>顺便说一句，在&lt;code>net.Dialer&lt;/code>类型中，也有一个看起来很相似的字段&lt;code>KeepAlive&lt;/code>。不过，它与前面所说的 HTTP 持久连接并不是一个概念，&lt;code>KeepAlive&lt;/code>是直接作用在底层的 socket 上的。&lt;/p>
&lt;p>它的背后是一种针对网络连接（更确切地说，是 TCP 连接）的存活探测机制。它的值用于表示每间隔多长时间发送一次探测包。当该值不大于&lt;code>0&lt;/code>时，则表示不开启这种机制。&lt;code>DefaultTransport&lt;/code>会把这个字段的值设定为&lt;code>30&lt;/code>秒。&lt;/p>
&lt;p>好了，以上这些内容阐述的就是，&lt;code>http.Client&lt;/code>类型中的&lt;code>Transport&lt;/code>字段的含义，以及它的值的定制方式。这涉及了&lt;code>http.RoundTripper&lt;/code>接口、&lt;code>http.DefaultTransport&lt;/code>变量、&lt;code>http.Transport&lt;/code>类型，以及&lt;code>net.Dialer&lt;/code>类型。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;h3 id="问题httpserver类型的listenandserve方法都做了哪些事情">问题：&lt;code>http.Server&lt;/code>类型的&lt;code>ListenAndServe&lt;/code>方法都做了哪些事情？&lt;/h3>
&lt;p>&lt;code>http.Server&lt;/code>类型与&lt;code>http.Client&lt;/code>是相对应的。&lt;code>http.Server&lt;/code>代表的是基于 HTTP 协议的服务端，或者说网络服务。&lt;/p>
&lt;p>&lt;code>http.Server&lt;/code>类型的&lt;code>ListenAndServe&lt;/code>方法的功能是：监听一个基于 TCP 协议的网络地址，并对接收到的 HTTP 请求进行处理。这个方法会默认开启针对网络连接的存活探测机制，以保证连接是持久的。同时，该方法会一直执行，直到有严重的错误发生或者被外界关掉。当被外界关掉时，它会返回一个由&lt;code>http.ErrServerClosed&lt;/code>变量代表的错误值。&lt;/p>
&lt;p>对于本问题，典型回答可以像下面这样。&lt;/p>
&lt;p>这个&lt;code>ListenAndServe&lt;/code>方法主要会做下面这几件事情。&lt;/p>
&lt;ol>
&lt;li>检查当前的&lt;code>http.Server&lt;/code>类型的值（以下简称当前值）的&lt;code>Addr&lt;/code>字段。该字段的值代表了当前的网络服务需要使用的网络地址，即：IP 地址和端口号. 如果这个字段的值为空字符串，那么就用&lt;code>&amp;quot;:http&amp;quot;&lt;/code>代替。也就是说，使用任何可以代表本机的域名和 IP 地址，并且端口号为&lt;code>80&lt;/code>。&lt;/li>
&lt;li>通过调用&lt;code>net.Listen&lt;/code>函数在已确定的网络地址上启动基于 TCP 协议的监听。&lt;/li>
&lt;li>检查&lt;code>net.Listen&lt;/code>函数返回的错误值。如果该错误值不为&lt;code>nil&lt;/code>，那么就直接返回该值。否则，通过调用当前值的&lt;code>Serve&lt;/code>方法准备接受和处理将要到来的 HTTP 请求。&lt;/li>
&lt;/ol>
&lt;p>可以从当前问题直接衍生出的问题一般有两个，一个是&amp;quot;&lt;code>net.Listen&lt;/code>函数都做了哪些事情&amp;quot;，另一个是&amp;quot;&lt;code>http.Server&lt;/code>类型的&lt;code>Serve&lt;/code>方法是怎样接受和处理 HTTP 请求的&amp;quot;。&lt;/p>
&lt;p>&lt;strong>对于第一个直接的衍生问题，如果概括地说，回答可以是：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>解析参数值中包含的网络地址隐含的 IP 地址和端口号；&lt;/li>
&lt;li>根据给定的网络协议，确定监听的方法，并开始进行监听。&lt;/li>
&lt;/ol>
&lt;p>从这里的第二个步骤出发，我们还可以继续提出一些间接的衍生问题。这往往会涉及&lt;code>net.socket&lt;/code>函数以及相关的 socket 知识。&lt;/p>
&lt;p>&lt;strong>对于第二个直接的衍生问题，我们可以这样回答：&lt;/strong>&lt;/p>
&lt;p>在一个&lt;code>for&lt;/code>循环中，网络监听器的&lt;code>Accept&lt;/code>方法会被不断地调用，该方法会返回两个结果值；第一个结果值是&lt;code>net.Conn&lt;/code>类型的，它会代表包含了新到来的 HTTP 请求的网络连接；第二个结果值是代表了可能发生的错误的&lt;code>error&lt;/code>类型值。&lt;/p>
&lt;p>如果这个错误值不为&lt;code>nil&lt;/code>，除非它代表了一个暂时性的错误，否则循环都会被终止。如果是暂时性的错误，那么循环的下一次迭代将会在一段时间之后开始执行。&lt;/p>
&lt;p>如果这里的&lt;code>Accept&lt;/code>方法没有返回非&lt;code>nil&lt;/code>的错误值，那么这里的程序将会先把它的第一个结果值包装成一个&lt;code>*http.conn&lt;/code>类型的值（以下简称&lt;code>conn&lt;/code>值），然后通过在新的 goroutine 中调用这个&lt;code>conn&lt;/code>值的&lt;code>serve&lt;/code>方法，来对当前的 HTTP 请求进行处理。&lt;/p>
&lt;p>这个处理的细节还是很多的，所以我们依然可以找出不少的间接的衍生问题。比如，这个&lt;code>conn&lt;/code>值的状态有几种，分别代表着处理的哪个阶段？又比如，处理过程中会用到哪些读取器和写入器，它们的作用分别是什么？再比如，这里的程序是怎样调用我们自定义的处理函数的，等等。&lt;/p>
&lt;p>诸如此类的问题很多，我就不在这里一一列举和说明了。你只需要记住一句话：&amp;ldquo;源码之前了无秘密&amp;rdquo;。上面这些问题的答案都可以在 Go 语言标准库的源码中找到。如果你想对本问题进行深入的探索，那么一定要去看&lt;code>net/http&lt;/code>代码包的源码。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>今天，我们主要讲的是基于 HTTP 协议的网络服务，侧重点仍然在客户端。&lt;/p>
&lt;p>我们在讨论了&lt;code>http.Get&lt;/code>函数和&lt;code>http.Client&lt;/code>类型的简单使用方式之后，把目光聚焦在了后者的&lt;code>Transport&lt;/code>字段。&lt;/p>
&lt;p>这个字段代表着单次 HTTP 事务的操作过程。它是&lt;code>http.RoundTripper&lt;/code>接口类型的。它的缺省值由&lt;code>http.DefaultTransport&lt;/code>变量代表，其实际类型是&lt;code>*http.Transport&lt;/code>。&lt;/p>
&lt;p>&lt;code>http.Transport&lt;/code>包含的字段非常多。我们先讲了&lt;code>DefaultTransport&lt;/code>中的&lt;code>DialContext&lt;/code>字段会被赋予什么样的值，又详细说明了一些关于操作超时的字段。&lt;/p>
&lt;p>比如&lt;code>IdleConnTimeout&lt;/code>和&lt;code>ExpectContinueTimeout&lt;/code>，以及相关的&lt;code>MaxIdleConns&lt;/code>和&lt;code>MaxIdleConnsPerHost&lt;/code>等等。之后，我又简单地解释了出现空闲连接的原因，以及相关的定制方式。&lt;/p>
&lt;p>最后，作为扩展，我还为你简要地梳理了&lt;code>http.Server&lt;/code>类型的&lt;code>ListenAndServe&lt;/code>方法，执行的主要流程。不过，由于篇幅原因，我没有做深入讲述。但是，这并不意味着没有必要深入下去。相反，这个方法很重要，值得我们认真地去探索一番。&lt;/p>
&lt;p>在你需要或者有兴趣的时候，我希望你能去好好地看一看&lt;code>net/http&lt;/code>包中的相关源码。一切秘密都在其中。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>我今天留给你的思考题比较简单，即：怎样优雅地停止基于 HTTP 协议的网络服务程序？&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 48丨程序性能分析基础（上）</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/48%E4%B8%A8%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80%E4%B8%8A/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/48%E4%B8%A8%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80%E4%B8%8A/</guid><description>
&lt;p>作为拾遗的部分，今天我们来讲讲与 Go 程序性能分析有关的基础知识。&lt;/p>
&lt;p>Go 语言为程序开发者们提供了丰富的性能分析 API，和非常好用的标准工具。这些 API 主要存在于：&lt;/p>
&lt;ol>
&lt;li>&lt;code>runtime/pprof&lt;/code>；&lt;/li>
&lt;li>&lt;code>net/http/pprof&lt;/code>；&lt;/li>
&lt;li>&lt;code>runtime/trace&lt;/code>；&lt;/li>
&lt;/ol>
&lt;p>这三个代码包中。&lt;/p>
&lt;p>另外，&lt;code>runtime&lt;/code>代码包中还包含了一些更底层的 API。它们可以被用来收集或输出 Go 程序运行过程中的一些关键指标，并帮助我们生成相应的概要文件以供后续分析时使用。&lt;/p>
&lt;p>至于标准工具，主要有&lt;code>go tool pprof&lt;/code>和&lt;code>go tool trace&lt;/code>这两个。它们可以解析概要文件中的信息，并以人类易读的方式把这些信息展示出来。&lt;/p>
&lt;p>此外，&lt;code>go test&lt;/code>命令也可以在程序测试完成后生成概要文件。如此一来，我们就可以很方便地使用前面那两个工具读取概要文件，并对被测程序的性能加以分析。这无疑会让程序性能测试的一手资料更加丰富，结果更加精确和可信。&lt;/p>
&lt;p>在 Go 语言中，用于分析程序性能的概要文件有三种，分别是：CPU 概要文件（CPU Profile）、内存概要文件（Mem Profile）和阻塞概要文件（Block Profile）。&lt;/p>
&lt;p>这些概要文件中包含的都是：在某一段时间内，对 Go 程序的相关指标进行多次采样后得到的概要信息。&lt;/p>
&lt;p>对于 CPU 概要文件来说，其中的每一段独立的概要信息都记录着，在进行某一次采样的那个时刻，CPU 上正在执行的 Go 代码。&lt;/p>
&lt;p>而对于内存概要文件，其中的每一段概要信息都记载着，在某个采样时刻，正在执行的 Go 代码以及堆内存的使用情况，这里包含已分配和已释放的字节数量和对象数量。至于阻塞概要文件，其中的每一段概要信息，都代表着 Go 程序中的一个 goroutine 阻塞事件。&lt;/p>
&lt;p>注意，在默认情况下，这些概要文件中的信息并不是普通的文本，它们都是以二进制的形式展现的。如果你使用一个常规的文本编辑器查看它们的话，那么肯定会看到一堆&amp;quot;乱码&amp;quot;。&lt;/p>
&lt;p>这时就可以显现出&lt;code>go tool pprof&lt;/code>这个工具的作用了。我们可以通过它进入一个基于命令行的交互式界面，并对指定的概要文件进行查阅。就像下面这样：&lt;/p>
&lt;pre>&lt;code>$ go tool pprof cpuprofile.out
Type: cpu
Time: Nov 9, 2018 at 4:31pm (CST)
Duration: 7.96s, Total samples = 6.88s (86.38%)
Entering interactive mode (type &amp;quot;help&amp;quot; for commands, &amp;quot;o&amp;quot; for options)
(pprof)
&lt;/code>&lt;/pre>
&lt;p>关于这个工具的具体用法，我就不在这里赘述了。在进入这个工具的交互式界面之后，我们只要输入指令&lt;code>help&lt;/code>并按下回车键，就可以看到很详细的帮助文档。&lt;/p>
&lt;p>我们现在来说说怎样生成概要文件。&lt;/p>
&lt;p>你可能会问，既然在概要文件中的信息不是普通的文本，那么它们到底是什么格式的呢？一个对广大的程序开发者而言，并不那么重要的事实是，它们是通过 protocol buffers 生成的二进制数据流，或者说字节流。&lt;/p>
&lt;p>概括来讲，protocol buffers 是一种数据序列化协议，同时也是一个序列化工具。它可以把一个值，比如一个结构体或者一个字典，转换成一段字节流。&lt;/p>
&lt;p>也可以反过来，把经过它生成的字节流反向转换为程序中的一个值。前者就被叫做序列化，而后者则被称为反序列化。&lt;/p>
&lt;p>换句话说，protocol buffers 定义和实现了一种&amp;quot;可以让数据在结构形态和扁平形态之间互相转换&amp;quot;的方式。&lt;/p>
&lt;p>Protocol buffers 的优势有不少。比如，它可以在序列化数据的同时对数据进行压缩，所以它生成的字节流，通常都要比相同数据的其他格式（例如 XML 和 JSON）占用的空间明显小很多。&lt;/p>
&lt;p>又比如，它既能让我们自己去定义数据序列化和结构化的格式，也允许我们在保证向后兼容的前提下去更新这种格式。&lt;/p>
&lt;p>正因为这些优势，Go 语言从 1.8 版本开始，把所有 profile 相关的信息生成工作都交给 protocol buffers 来做了。这也是我们在上述概要文件中，看不到普通文本的根本原因了。&lt;/p>
&lt;p>Protocol buffers 的用途非常广泛，并且在诸如数据存储、数据传输等任务中有着很高的使用率。不过，关于它，我暂时就介绍到这里。你目前知道这些也就足够了。你并不用关心&lt;code>runtime/pprof&lt;/code>包以及&lt;code>runtime&lt;/code>包中的程序是如何序列化这些概要信息的。&lt;/p>
&lt;p>继续回到怎样生成概要文件的话题，我们依然通过具体的问题来讲述。&lt;/p>
&lt;p>&lt;strong>我们今天的问题是：怎样让程序对 CPU 概要信息进行采样？&lt;/strong>&lt;/p>
&lt;p>&lt;strong>这道题的典型回答是这样的。&lt;/strong>&lt;/p>
&lt;p>这需要用到&lt;code>runtime/pprof&lt;/code>包中的 API。更具体地说，在我们想让程序开始对 CPU 概要信息进行采样的时候，需要调用这个代码包中的&lt;code>StartCPUProfile&lt;/code>函数，而在停止采样的时候则需要调用该包中的&lt;code>StopCPUProfile&lt;/code>函数。&lt;/p>
&lt;h2 id="问题解析">问题解析&lt;/h2>
&lt;p>&lt;code>runtime/pprof.StartCPUProfile&lt;/code>函数（以下简称&lt;code>StartCPUProfile&lt;/code>函数）在被调用的时候，先会去设定 CPU 概要信息的采样频率，并会在单独的 goroutine 中进行 CPU 概要信息的收集和输出。&lt;/p>
&lt;p>注意，&lt;code>StartCPUProfile&lt;/code>函数设定的采样频率总是固定的，即：&lt;code>100&lt;/code>赫兹。也就是说，每秒采样&lt;code>100&lt;/code>次，或者说每&lt;code>10&lt;/code>毫秒采样一次。&lt;/p>
&lt;p>赫兹，也称 Hz，是从英文单词&amp;quot;Hertz&amp;quot;（一个英文姓氏）音译过来的一个中文词。它是 CPU 主频的基本单位。&lt;/p>
&lt;p>CPU 的主频指的是，CPU 内核工作的时钟频率，也常被称为 CPU clock speed。这个时钟频率的倒数即为时钟周期（clock cycle），也就是一个 CPU 内核执行一条运算指令所需的时间，单位是秒。&lt;/p>
&lt;p>例如，主频为&lt;code>1000&lt;/code>Hz 的 CPU，它的单个内核执行一条运算指令所需的时间为&lt;code>0.001&lt;/code>秒，即&lt;code>1&lt;/code>毫秒。又例如，我们现在常用的&lt;code>3.2&lt;/code>GHz 的多核 CPU，其单个内核在&lt;code>1&lt;/code>个纳秒的时间里就可以至少执行三条运算指令。&lt;/p>
&lt;p>&lt;code>StartCPUProfile&lt;/code>函数设定的 CPU 概要信息采样频率，相对于现代的 CPU 主频来说是非常低的。这主要有两个方面的原因。&lt;/p>
&lt;p>一方面，过高的采样频率会对 Go 程序的运行效率造成很明显的负面影响。因此，&lt;code>runtime&lt;/code>包中&lt;code>SetCPUProfileRate&lt;/code>函数在被调用的时候，会保证采样频率不超过&lt;code>1&lt;/code>MHz（兆赫），也就是说，它只允许每&lt;code>1&lt;/code>微秒最多采样一次。&lt;code>StartCPUProfile&lt;/code>函数正是通过调用这个函数来设定 CPU 概要信息的采样频率的。&lt;/p>
&lt;p>另一方面，经过大量的实验，Go 语言团队发现&lt;code>100&lt;/code>Hz 是一个比较合适的设定。因为这样做既可以得到足够多、足够有用的概要信息，又不至于让程序的运行出现停滞。另外，操作系统对高频采样的处理能力也是有限的，一般情况下，超过&lt;code>500&lt;/code>Hz 就很可能得不到及时的响应了。&lt;/p>
&lt;p>在&lt;code>StartCPUProfile&lt;/code>函数执行之后，一个新启用的 goroutine 将会负责执行 CPU 概要信息的收集和输出，直到&lt;code>runtime/pprof&lt;/code>包中的&lt;code>StopCPUProfile&lt;/code>函数被成功调用。&lt;/p>
&lt;p>&lt;code>StopCPUProfile&lt;/code>函数也会调用&lt;code>runtime.SetCPUProfileRate&lt;/code>函数，并把参数值（也就是采样频率）设为&lt;code>0&lt;/code>。这会让针对 CPU 概要信息的采样工作停止。&lt;/p>
&lt;p>同时，它也会给负责收集 CPU 概要信息的代码一个&amp;quot;信号&amp;quot;，以告知收集工作也需要停止了。&lt;/p>
&lt;p>在接到这样的&amp;quot;信号&amp;quot;之后，那部分程序将会把这段时间内收集到的所有 CPU 概要信息，全部写入到我们在调用&lt;code>StartCPUProfile&lt;/code>函数的时候指定的写入器中。只有在上述操作全部完成之后，&lt;code>StopCPUProfile&lt;/code>函数才会返回。&lt;/p>
&lt;p>好了，经过这一番解释，你应该已经对 CPU 概要信息的采样工作有一定的认识了。你可以去看看 demo96.go 文件中的代码，并运行几次试试。这样会有助于你加深对这个问题的理解。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>我们这两篇内容讲的是 Go 程序的性能分析，这其中的内容都是你从事这项任务必备的一些知识和技巧。&lt;/p>
&lt;p>首先，我们需要知道，与程序性能分析有关的 API 主要存在于&lt;code>runtime&lt;/code>、&lt;code>runtime/pprof&lt;/code>和&lt;code>net/http/pprof&lt;/code>这几个代码包中。它们可以帮助我们收集相应的性能概要信息，并把这些信息输出到我们指定的地方。&lt;/p>
&lt;p>Go 语言的运行时系统会根据要求对程序的相关指标进行多次采样，并对采样的结果进行组织和整理，最后形成一份完整的性能分析报告。这份报告就是我们一直在说的概要信息的汇总。&lt;/p>
&lt;p>一般情况下，我们会把概要信息输出到文件。根据概要信息的不同，概要文件的种类主要有三个，分别是：CPU 概要文件（CPU Profile）、内存概要文件（Mem Profile）和阻塞概要文件（Block Profile）。&lt;/p>
&lt;p>在本文中，我提出了一道与上述几种概要信息有关的问题。在下一篇文章中，我们会继续对这部分问题的探究。&lt;/p>
&lt;p>你对今天的内容有什么样的思考与疑惑，可以给我留言，感谢你的收听，我们下次再见。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 49丨程序性能分析基础（下）</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/49%E4%B8%A8%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80%E4%B8%8B/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/49%E4%B8%A8%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80%E4%B8%8B/</guid><description>
&lt;p>你好，我是郝林，今天我们继续分享程序性能分析基础的内容。&lt;/p>
&lt;p>在上一篇文章中，我们围绕着&amp;quot;怎样让程序对 CPU 概要信息进行采样&amp;quot;这一问题进行了探讨，今天，我们再来一起看看它的拓展问题。&lt;/p>
&lt;h2 id="知识扩展">知识扩展&lt;/h2>
&lt;h3 id="问题-1怎样设定内存概要信息的采样频率">问题 1：怎样设定内存概要信息的采样频率？&lt;/h3>
&lt;p>针对内存概要信息的采样会按照一定比例收集 Go 程序在运行期间的堆内存使用情况。设定内存概要信息采样频率的方法很简单，只要为&lt;code>runtime.MemProfileRate&lt;/code>变量赋值即可。&lt;/p>
&lt;p>这个变量的含义是，平均每分配多少个字节，就对堆内存的使用情况进行一次采样。如果把该变量的值设为&lt;code>0&lt;/code>，那么，Go 语言运行时系统就会完全停止对内存概要信息的采样。该变量的缺省值是&lt;code>512 KB&lt;/code>，也就是&lt;code>512&lt;/code>千字节。&lt;/p>
&lt;p>注意，如果你要设定这个采样频率，那么越早设定越好，并且只应该设定一次，否则就可能会对 Go 语言运行时系统的采样工作，造成不良影响。比如，只在&lt;code>main&lt;/code>函数的开始处设定一次。&lt;/p>
&lt;p>在这之后，当我们想获取内存概要信息的时候，还需要调用&lt;code>runtime/pprof&lt;/code>包中的&lt;code>WriteHeapProfile&lt;/code>函数。该函数会把收集好的内存概要信息，写到我们指定的写入器中。&lt;/p>
&lt;p>注意，我们通过&lt;code>WriteHeapProfile&lt;/code>函数得到的内存概要信息并不是实时的，它是一个快照，是在最近一次的内存垃圾收集工作完成时产生的。如果你想要实时的信息，那么可以调用&lt;code>runtime.ReadMemStats&lt;/code>函数。不过要特别注意，该函数会引起 Go 语言调度器的短暂停顿。&lt;/p>
&lt;p>以上，就是关于内存概要信息的采样频率设定问题的简要回答。&lt;/p>
&lt;h3 id="问题-2怎样获取到阻塞概要信息">问题 2：怎样获取到阻塞概要信息？&lt;/h3>
&lt;p>我们调用&lt;code>runtime&lt;/code>包中的&lt;code>SetBlockProfileRate&lt;/code>函数，即可对阻塞概要信息的采样频率进行设定。该函数有一个名叫&lt;code>rate&lt;/code>的参数，它是&lt;code>int&lt;/code>类型的。&lt;/p>
&lt;p>这个参数的含义是，只要发现一个阻塞事件的持续时间达到了多少个纳秒，就可以对其进行采样。如果这个参数的值小于或等于&lt;code>0&lt;/code>，那么就意味着 Go 语言运行时系统将会完全停止对阻塞概要信息的采样。&lt;/p>
&lt;p>在&lt;code>runtime&lt;/code>包中，还有一个名叫&lt;code>blockprofilerate&lt;/code>的包级私有变量，它是&lt;code>uint64&lt;/code>类型的。这个变量的含义是，只要发现一个阻塞事件的持续时间跨越了多少个 CPU 时钟周期，就可以对其进行采样。它的含义与我们刚刚提到的&lt;code>rate&lt;/code>参数的含义非常相似，不是吗？&lt;/p>
&lt;p>实际上，这两者的区别仅仅在于单位不同。&lt;code>runtime.SetBlockProfileRate&lt;/code>函数会先对参数&lt;code>rate&lt;/code>的值进行单位换算和必要的类型转换，然后，它会把换算结果用原子操作赋给&lt;code>blockprofilerate&lt;/code>变量。由于此变量的缺省值是&lt;code>0&lt;/code>，所以 Go 语言运行时系统在默认情况下并不会记录任何在程序中发生的阻塞事件。&lt;/p>
&lt;p>另一方面，当我们需要获取阻塞概要信息的时候，需要先调用&lt;code>runtime/pprof&lt;/code>包中的&lt;code>Lookup&lt;/code>函数并传入参数值&lt;code>&amp;quot;block&amp;quot;&lt;/code>，从而得到一个&lt;code>*runtime/pprof.Profile&lt;/code>类型的值（以下简称&lt;code>Profile&lt;/code>值）。在这之后，我们还需要调用这个&lt;code>Profile&lt;/code>值的&lt;code>WriteTo&lt;/code>方法，以驱使它把概要信息写进我们指定的写入器中。&lt;/p>
&lt;p>这个&lt;code>WriteTo&lt;/code>方法有两个参数，一个参数就是我们刚刚提到的写入器，它是&lt;code>io.Writer&lt;/code>类型的。而另一个参数则是代表了概要信息详细程度的&lt;code>int&lt;/code>类型参数&lt;code>debug&lt;/code>。&lt;/p>
&lt;p>&lt;code>debug&lt;/code>参数主要的可选值有两个，即：&lt;code>0&lt;/code>和&lt;code>1&lt;/code>。当&lt;code>debug&lt;/code>的值为&lt;code>0&lt;/code>时，通过&lt;code>WriteTo&lt;/code>方法写进写入器的概要信息仅会包含&lt;code>go tool pprof&lt;/code>工具所需的内存地址，这些内存地址会以十六进制的形式展现出来。&lt;/p>
&lt;p>当该值为&lt;code>1&lt;/code>时，相应的包名、函数名、源码文件路径、代码行号等信息就都会作为注释被加入进去。另外，&lt;code>debug&lt;/code>为&lt;code>0&lt;/code>时的概要信息，会经由 protocol buffers 转换为字节流。而在&lt;code>debug&lt;/code>为&lt;code>1&lt;/code>的时候，&lt;code>WriteTo&lt;/code>方法输出的这些概要信息就是我们可以读懂的普通文本了。&lt;/p>
&lt;p>除此之外，&lt;code>debug&lt;/code>的值也可以是&lt;code>2&lt;/code>。这时，被输出的概要信息也会是普通的文本，并且通常会包含更多的细节。至于这些细节都包含了哪些内容，那就要看我们调用&lt;code>runtime/pprof.Lookup&lt;/code>函数的时候传入的是什么样的参数值了。下面，我们就来一起看一下这个函数。&lt;/p>
&lt;h3 id="问题-3runtimepproflookup函数的正确调用方式是什么">问题 3：&lt;code>runtime/pprof.Lookup&lt;/code>函数的正确调用方式是什么？&lt;/h3>
&lt;p>&lt;code>runtime/pprof.Lookup&lt;/code>函数（以下简称&lt;code>Lookup&lt;/code>函数）的功能是，提供与给定的名称相对应的概要信息。这个概要信息会由一个&lt;code>Profile&lt;/code>值代表。如果该函数返回了一个&lt;code>nil&lt;/code>，那么就说明不存在与给定名称对应的概要信息。&lt;/p>
&lt;p>&lt;code>runtime/pprof&lt;/code>包已经为我们预先定义了 6 个概要名称。它们对应的概要信息收集方法和输出方法也都已经准备好了。我们直接拿来使用就可以了。它们是：&lt;code>goroutine&lt;/code>、&lt;code>heap&lt;/code>、&lt;code>allocs&lt;/code>、&lt;code>threadcreate&lt;/code>、&lt;code>block&lt;/code>和&lt;code>mutex&lt;/code>。&lt;/p>
&lt;p>当我们把&lt;code>&amp;quot;goroutine&amp;quot;&lt;/code>传入&lt;code>Lookup&lt;/code>函数的时候，该函数会利用相应的方法，收集到当前正在使用的所有 goroutine 的堆栈跟踪信息。注意，这样的收集会引起 Go 语言调度器的短暂停顿。&lt;/p>
&lt;p>当调用该函数返回的&lt;code>Profile&lt;/code>值的&lt;code>WriteTo&lt;/code>方法时，如果参数&lt;code>debug&lt;/code>的值大于或等于&lt;code>2&lt;/code>，那么该方法就会输出所有 goroutine 的堆栈跟踪信息。这些信息可能会非常多。如果它们占用的空间超过了&lt;code>64 MB&lt;/code>（也就是&lt;code>64&lt;/code>兆字节），那么相应的方法就会将超出的部分截掉。&lt;/p>
&lt;p>如果&lt;code>Lookup&lt;/code>函数接到的参数值是&lt;code>&amp;quot;heap&amp;quot;&lt;/code>，那么它就会收集与堆内存的分配和释放有关的采样信息。这实际上就是我们在前面讨论过的内存概要信息。在我们传入&lt;code>&amp;quot;allocs&amp;quot;&lt;/code>的时候，后续的操作会与之非常的相似。&lt;/p>
&lt;p>在这两种情况下，&lt;code>Lookup&lt;/code>函数返回的&lt;code>Profile&lt;/code>值也会极其相像。只不过，在这两种&lt;code>Profile&lt;/code>值的&lt;code>WriteTo&lt;/code>方法被调用时，它们输出的概要信息会有细微的差别，而且这仅仅体现在参数&lt;code>debug&lt;/code>等于&lt;code>0&lt;/code>的时候。&lt;/p>
&lt;p>&lt;code>&amp;quot;heap&amp;quot;&lt;/code>会使得被输出的内存概要信息默认以&amp;quot;在用空间&amp;quot;（inuse_space）的视角呈现，而&lt;code>&amp;quot;allocs&amp;quot;&lt;/code>对应的默认视角则是&amp;quot;已分配空间&amp;quot;（alloc_space）。&lt;/p>
&lt;p>&amp;ldquo;在用空间&amp;quot;是指，已经被分配但还未被释放的内存空间。在这个视角下，&lt;code>go tool pprof&lt;/code>工具并不会去理会与已释放空间有关的那部分信息。而在&amp;quot;已分配空间&amp;quot;的视角下，所有的内存分配信息都会被展现出来，无论这些内存空间在采样时是否已被释放。&lt;/p>
&lt;p>此外，无论是&lt;code>&amp;quot;heap&amp;quot;&lt;/code>还是&lt;code>&amp;quot;allocs&amp;quot;&lt;/code>，在我们调用&lt;code>Profile&lt;/code>值的&lt;code>WriteTo&lt;/code>方法的时候，只要赋予&lt;code>debug&lt;/code>参数的值大于&lt;code>0&lt;/code>，那么该方法输出内容的规格就会是相同的。&lt;/p>
&lt;p>参数值&lt;code>&amp;quot;threadcreate&amp;quot;&lt;/code>会使&lt;code>Lookup&lt;/code>函数去收集一些堆栈跟踪信息。这些堆栈跟踪信息中的每一个都会描绘出一个代码调用链，这些调用链上的代码都导致新的操作系统线程产生。这样的&lt;code>Profile&lt;/code>值的输出规格也只有两种，取决于我们传给其&lt;code>WriteTo&lt;/code>方法的参数值是否大于&lt;code>0&lt;/code>。&lt;/p>
&lt;p>再说&lt;code>&amp;quot;block&amp;quot;&lt;/code>和&lt;code>&amp;quot;mutex&amp;quot;&lt;/code>。&lt;code>&amp;quot;block&amp;quot;&lt;/code>代表的是，因争用同步原语而被阻塞的那些代码的堆栈跟踪信息。还记得吗？这就是我们在前面讲过的阻塞概要信息。&lt;/p>
&lt;p>与之相对应，&lt;code>&amp;quot;mutex&amp;quot;&lt;/code>代表的是，曾经作为同步原语持有者的那些代码，它们的堆栈跟踪信息。它们的输出规格也都只有两种，取决于&lt;code>debug&lt;/code>是否大于&lt;code>0&lt;/code>。&lt;/p>
&lt;p>这里所说的同步原语，指的是存在于 Go 语言运行时系统内部的一种底层的同步工具，或者说一种同步机制。&lt;/p>
&lt;p>它是直接面向内存地址的，并以异步信号量和原子操作作为实现手段。我们已经熟知的通道、互斥锁、条件变量、&amp;ldquo;WaitGroup&amp;rdquo;，以及 Go 语言运行时系统本身，都会利用它来实现自己的功能。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/17/a7/17f957efc8fd583e2011c8ace0b7c7a7.png" alt="">&lt;br>
runtime/pprof.Lookup 函数一瞥&lt;/p>
&lt;p>好了，关于这个问题，我们已经谈了不少了。我相信，你已经对&lt;code>Lookup&lt;/code>函数的调用方式及其背后的含义有了比较深刻的理解了。demo99.go 文件中包含了一些示例代码，可供你参考。&lt;/p>
&lt;h3 id="问题-4如何为基于-http-协议的网络服务添加性能分析接口">问题 4：如何为基于 HTTP 协议的网络服务添加性能分析接口？&lt;/h3>
&lt;p>这个问题说起来还是很简单的。这是因为我们在一般情况下只要在程序中导入&lt;code>net/http/pprof&lt;/code>代码包就可以了，就像这样：&lt;/p>
&lt;pre>&lt;code>import _ &amp;quot;net/http/pprof&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>然后，启动网络服务并开始监听，比如：&lt;/p>
&lt;pre>&lt;code>log.Println(http.ListenAndServe(&amp;quot;localhost:8082&amp;quot;, nil))
&lt;/code>&lt;/pre>
&lt;p>在运行这个程序之后，我们就可以通过在网络浏览器中访问&lt;code>http://localhost:8082/debug/pprof&lt;/code>这个地址看到一个简约的网页。如果你认真地看了上一个问题的话，那么肯定可以快速搞明白这个网页中各个部分的含义。&lt;/p>
&lt;p>在&lt;code>/debug/pprof/&lt;/code>这个 URL 路径下还有很多可用的子路径，这一点你通过点选网页中的链接就可以了解到。像&lt;code>allocs&lt;/code>、&lt;code>block&lt;/code>、&lt;code>goroutine&lt;/code>、&lt;code>heap&lt;/code>、&lt;code>mutex&lt;/code>、&lt;code>threadcreate&lt;/code>这 6 个子路径，在底层其实都是通过&lt;code>Lookup&lt;/code>函数来处理的。关于这个函数，你应该已经很熟悉了。&lt;/p>
&lt;p>这些子路径都可以接受查询参数&lt;code>debug&lt;/code>。它用于控制概要信息的格式和详细程度。至于它的可选值，我就不再赘述了。它的缺省值是&lt;code>0&lt;/code>。另外，还有一个名叫&lt;code>gc&lt;/code>的查询参数。它用于控制是否在获取概要信息之前强制地执行一次垃圾回收。只要它的值大于&lt;code>0&lt;/code>，程序就会这样做。不过，这个参数仅在&lt;code>/debug/pprof/heap&lt;/code>路径下有效。&lt;/p>
&lt;p>一旦&lt;code>/debug/pprof/profile&lt;/code>路径被访问，程序就会去执行对 CPU 概要信息的采样。它接受一个名为&lt;code>seconds&lt;/code>的查询参数。该参数的含义是，采样工作需要持续多少秒。如果这个参数未被显式地指定，那么采样工作会持续&lt;code>30&lt;/code>秒。注意，在这个路径下，程序只会响应经 protocol buffers 转换的字节流。我们可以通过&lt;code>go tool pprof&lt;/code>工具直接读取这样的 HTTP 响应，例如：&lt;/p>
&lt;pre>&lt;code>go tool pprof http://localhost:6060/debug/pprof/profile?seconds=60
&lt;/code>&lt;/pre>
&lt;p>除此之外，还有一个值得我们关注的路径，即：&lt;code>/debug/pprof/trace&lt;/code>。在这个路径下，程序主要会利用&lt;code>runtime/trace&lt;/code>代码包中的 API 来处理我们的请求。&lt;/p>
&lt;p>更具体地说，程序会先调用&lt;code>trace.Start&lt;/code>函数，然后在查询参数&lt;code>seconds&lt;/code>指定的持续时间之后再调用&lt;code>trace.Stop&lt;/code>函数。这里的&lt;code>seconds&lt;/code>的缺省值是&lt;code>1&lt;/code>秒。至于&lt;code>runtime/trace&lt;/code>代码包的功用，我就留给你自己去查阅和探索吧。&lt;/p>
&lt;p>前面说的这些 URL 路径都是固定不变的。这是默认情况下的访问规则。我们还可以对它们进行定制，就像这样：&lt;/p>
&lt;pre>&lt;code>mux := http.NewServeMux()
pathPrefix := &amp;quot;/d/pprof/&amp;quot;
mux.HandleFunc(pathPrefix,
func(w http.ResponseWriter, r *http.Request) {
name := strings.TrimPrefix(r.URL.Path, pathPrefix)
if name != &amp;quot;&amp;quot; {
pprof.Handler(name).ServeHTTP(w, r)
return
}
pprof.Index(w, r)
})
mux.HandleFunc(pathPrefix+&amp;quot;cmdline&amp;quot;, pprof.Cmdline)
mux.HandleFunc(pathPrefix+&amp;quot;profile&amp;quot;, pprof.Profile)
mux.HandleFunc(pathPrefix+&amp;quot;symbol&amp;quot;, pprof.Symbol)
mux.HandleFunc(pathPrefix+&amp;quot;trace&amp;quot;, pprof.Trace)
server := http.Server{
Addr: &amp;quot;localhost:8083&amp;quot;,
Handler: mux,
}
&lt;/code>&lt;/pre>
&lt;p>可以看到，我们几乎只使用了&lt;code>net/http/pprof&lt;/code>代码包中的几个程序实体，就完成了这样的定制。这在我们使用第三方的网络服务开发框架时尤其有用。&lt;/p>
&lt;p>我们自定义的 HTTP 请求多路复用器&lt;code>mux&lt;/code>所包含的访问规则与默认的规则很相似，只不过 URL 路径的前缀更短了一些而已。&lt;/p>
&lt;p>我们定制&lt;code>mux&lt;/code>的过程与&lt;code>net/http/pprof&lt;/code>包中的&lt;code>init&lt;/code>函数所做的事情也是类似的。这个&lt;code>init&lt;/code>函数的存在，其实就是我们在前面仅仅导入&amp;quot;net/http/pprof&amp;quot;代码包就能够访问相关路径的原因。&lt;/p>
&lt;p>在我们编写网络服务程序的时候，使用&lt;code>net/http/pprof&lt;/code>包要比直接使用&lt;code>runtime/pprof&lt;/code>包方便和实用很多。通过合理运用，这个代码包可以为网络服务的监测提供有力的支撑。关于这个包的知识，我就先介绍到这里。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>这两篇文章中，我们主要讲了 Go 程序的性能分析，提到的很多内容都是你必备的知识和技巧。这些有助于你真正地理解以采样、收集、输出为代表的一系列操作步骤。&lt;/p>
&lt;p>我提到的几种概要信息有关的问题。你需要记住的是，每一种概要信息都代表了什么，它们分别都包含了什么样的内容。&lt;/p>
&lt;p>你还需要知道获取它们的正确方式，包括怎样启动和停止采样、怎样设定采样频率，以及怎样控制输出内容的格式和详细程度。&lt;/p>
&lt;p>此外，&lt;code>runtime/pprof&lt;/code>包中的&lt;code>Lookup&lt;/code>函数的正确调用方式也很重要。对于除了 CPU 概要信息之外的其他概要信息，我们都可以通过调用这个函数获取到。&lt;/p>
&lt;p>除此之外，我还提及了一个上层的应用，即：为基于 HTTP 协议的网络服务，添加性能分析接口。这也是很实用的一个部分。&lt;/p>
&lt;p>虽然&lt;code>net/http/pprof&lt;/code>包提供的程序实体并不多，但是它却能够让我们用不同的方式，实现性能分析接口的嵌入。这些方式有的是极简的、开箱即用的，而有的则用于满足各种定制需求。&lt;/p>
&lt;p>以上这些，就是我今天为你讲述的 Go 语言知识，它们是程序性能分析的基础。如果你把 Go 语言程序运用于生产环境，那么肯定会涉及它们。对于这里提到的所有内容和问题，我都希望你能够认真地去思考和领会。这样才能够让你在真正使用它们的时候信手拈来。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>我今天留给你的思考题其实在前面已经透露了，那就是：&lt;code>runtime/trace&lt;/code>代码包的功用是什么？&lt;/p>
&lt;p>感谢你的收听，我们下期再见。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item><item><title>极客专栏: 50丨学习专栏的正确姿势</title><link>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/50%E4%B8%A8%E5%AD%A6%E4%B9%A0%E4%B8%93%E6%A0%8F%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>/%E6%9E%81%E5%AE%A2%E4%B8%93%E6%A0%8F/go-%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83-36-%E8%AE%B2/50%E4%B8%A8%E5%AD%A6%E4%B9%A0%E4%B8%93%E6%A0%8F%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</guid><description>
&lt;p>你好，我是郝林，今天我分享的主题是，学习专栏的正确姿势。&lt;/p>
&lt;p>到了这里，专栏的全部内容已经都推送到你的面前了。如果你已经同步学习完了，那么我要给你点一个大大的赞！&lt;/p>
&lt;p>还没有看完的同学也不要着急，因为推送的速度肯定要比你们的学习速度快上不少。如果是我的话，我肯定无法用很快的速度，去认真地学习和理解专栏内容的。不过，粗读一遍的话，这个时间倒是绰绰有余的。我今天就想跟你聊聊学习专栏的正确姿势。&lt;/p>
&lt;h2 id="专栏应该怎样学">专栏应该怎样学&lt;/h2>
&lt;p>我们做互联网技术的人，应该对这种索引 + 摘要 + 详情的数据存取方案并不陌生。我希望我的专栏文章也可以达成这样的一种状态：它是你需要时，即能查阅的知识手册。&lt;/p>
&lt;p>在第一次听音频或浏览文章的时候，你可以走马观花，并不用去细扣每一个概念和每一句话。让自己对每一个主题、每一个问题和每一个要点都有一个大概的印象就可以了。&lt;/p>
&lt;p>如此一来，当想到或遇到某方面的疑惑的时候，你就可以有一个大致的方向，并且知道怎样从专栏里找出相应的内容。&lt;/p>
&lt;p>这就是所谓的粗读，相当于在你的脑袋里面存了一份索引，甚至是一份摘要。利用这种快速的学习方式，你往往可以在有限的精力和无限的知识之间做出适合你的权衡。&lt;/p>
&lt;p>极客时间可以让我们无限期地查阅专栏的全部内容。所以你完全不用心急，可以按照自己的节奏先粗读、再细读，然后再拿这个专栏当做知识手册来用。重要的是真正的理解和积极的实践，而不是阅读的速度。&lt;/p>
&lt;h2 id="实践的正确姿势">实践的正确姿势&lt;/h2>
&lt;p>最近一段时间，有不少同学问我说：&amp;ldquo;老师，我快要学完这个专栏了，也买了你的书，那我后边怎么去实践呢？&amp;rdquo;&lt;/p>
&lt;p>问我此类问题的同学，大多数都是很少有机会在工作中使用 Go 语言的程序员，或者是对 Go 语言感兴趣的互联网领域的从业者，还有一些是在校的大学生。&lt;/p>
&lt;p>我给大家的第一个建议一般都是&amp;quot;去写网络爬虫吧&amp;quot;。&lt;/p>
&lt;p>互联网络的世界很庞杂，但又有一定的规律可循，是非常好的技术学习环境。你编写一个网络服务程序，即使放到了公共的网络上，也还需要考虑清楚一系列的问题，才能让你有足够多的技术磨炼机会，比如，服务的种类、功能、规则、安全、界面、受众、宣传和访问途径，以及日常的非技术性维护。&lt;/p>
&lt;p>我认为，这已经不是纯粹的技术实践了，对于初期的技术技能增长是不利的。当然了，如果你有信心和精力去搞定这一系列问题，并乐于从中学习到各种各样的技能，那就放手去做吧。&lt;/p>
&lt;p>我在我的书和专栏中一直都在释放这样几个信号：&amp;ldquo;并发程序&amp;quot;&amp;ldquo;互联网络&amp;quot;&amp;ldquo;客户端&amp;quot;&amp;ldquo;网络爬虫&amp;rdquo;。这其实就是我们实践的最佳切入点。它成本低，收效明显，既有深度又有广度。&lt;/p>
&lt;p>有的同学还问我：&amp;ldquo;我的程序爬取了某某网站，可是只爬了两三下就好像被人家封掉了&amp;rdquo;。原因很明显，你暴力获取人家的网站内容，肯定会封你的啊。&lt;/p>
&lt;p>我们要让程序去模拟人的行为，模拟人使用网络浏览器访问网站内容的过程，而不是用尽计算力去疯狂地霸占人家的带宽和服务，否则那不就成了网络攻击了。这是一个非常重要的自我实践的技巧，请大家记住，&amp;ldquo;利己，但不要损人&amp;rdquo;。&lt;/p>
&lt;p>注意，正常爬取网站内容并不意味着失去了高并发的应用场景。把内容下载下来只是一个开始，后边还有不少的工作要做呢。&lt;/p>
&lt;p>单单&amp;quot;模拟人&amp;quot;这一点就需要花一些心思。而且，你可以同时爬取成千上万的同类甚至不同类的网站。这已经足够你研究和实践很长一段时间了。我在这里还要郑重地提示一下，做这类技术研究一定不要跨越道德的底线，更不能违反法律。&lt;/p>
&lt;p>再进一步，我们最好以结构化的形式把爬取到的网络内容存储下来。当得到足够多的数据之后，你的选择就很多了。比如，对某类数据进行整理、提取和分析，从而挖掘出更有价值的东西。这就属于数据挖掘的范畴了。&lt;/p>
&lt;p>在如今这个数据过剩的时代，这也是一项很重要的技能。又比如，基于这些数据提供统一的访问接口，制作成搜索引擎，甚至对外提供服务。这也是一个很有深度的选择。&lt;/p>
&lt;p>当然，技术实践的方式远不止这些。不过鉴于篇幅，我就先说这么多。&lt;/p>
&lt;h2 id="优秀-go-项目推荐">优秀 Go 项目推荐&lt;/h2>
&lt;p>最后，我再给大家推荐一些优秀的 Go 项目。别忘了，阅读优秀的项目源码也是一个很重要的学习途径。请看下图。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/29/f8/29c794731d9fb43f9fd37cc4d91994f8.png" alt="">&lt;br>
（长按保存大图查看）&lt;/p>
&lt;p>这幅图包含了我之前私藏的所有高&lt;code>Star&lt;/code>，且近期依然活跃的 Go 项目。不得不说，在 Github 这个全球最大的程序员交友社区中，好东西真的是不少。&lt;/p>
&lt;p>在这幅图的左上角，有我对图中各种符号的说明，大家在进一步读图之前需要先看一下。参看这些项目的顺序完全由你自己决定，不过我建议从&amp;quot;贴近你实际工作的那个方面&amp;quot;入手，然后可以是&amp;quot;你感兴趣的方面&amp;rdquo;，最后有机会再看其他的项目。千万不要贪多，要循序渐进着来。&lt;/p>
&lt;p>我个人还为你们专门在&lt;a href="https://bearychat.com">BearyChat&lt;/a>上创建了一个名叫&amp;quot;GoHackers&amp;quot;的团队空间。创建这个空间的初衷是我想增进与专栏读者们的交流，包括文章答疑、思考题解读以及在技术和职业方面的互通有无。&lt;/p>
&lt;p>当然了，即使不是本专栏的读者也是可以加入的，只要你对 Go 语言编程感兴趣就可以。通过这个&lt;a href="https://gohackers.bearychat.com/signup/2d533429591347db9810f3f106596270">邀请链接&lt;/a>，你可以直接加入并参与讨论。不过，你可能需要先简单地注册一下。&lt;/p>
&lt;p>&lt;a href="https://github.com/hyper0x/Golang_Puzzlers">戳此查看 Go 语言专栏文章配套详细代码。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/35/48/358e4e8578a706598e18a7dfed3ed648.jpg" alt="">&lt;/p></description></item></channel></rss>